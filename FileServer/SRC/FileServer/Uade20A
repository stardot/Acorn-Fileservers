 OPT UADE20 ;FILE > Uade20A
 TTL File server file UADE20A

;*** NON - NET  UTILITIES ***


CPDNAM ROUT

;Read disc name of disc number at ARGF on stack
;into MIDTX offset by A.

 PHA ;Push MIDTX offset

 LDYIM ARGF
 LDAIY NEWARG ;GET DISC NO.
 PHA
 INY
 LDAIY NEWARG ;SET ON STACK AT ARGB
 LDYIM ARGC
 STAIY NEWARG
 DEY
 PLA
 STAIY NEWARG
 LDAIM &B ;MAPMAN ENTRY PT.
 JSR SETRTN
 JSR MAPMAN
 BNE #20

 LDYIM ARGB
 LDAIY NEWARG
 STA GENPTR
 INY
 LDAIY NEWARG
 STA GENPTR+1 ;SET PTR. TO DISC NAME

 [ $CMOS
 PLX ; Offset from MIDTX
 |
 PLA
 TAX ; Offset from MIDTX
 ]
 LDYIM 0
10 LDAIY GENPTR
 STAAX MIDTX
 INX
 INY
 CPYIM DNAMLN
 BNE #10
20 RTS


DIRIND ROUT
 STA COZERO
 JSR STKUSA ;Stack user info at ARGA
 LDXIM &C1
 [ $CMOS
 BRA #10
 |
 BNE #10
 ]
 
;Call DIRMAN.EXAMINE to get last component of
;file title (may be CR) and disc number and cycle
;number of directory.
;On entry, A is offset from MIDTX to put dir. name
;Dir. name arg. is assumed at MIDRX

DIRINF STA COZERO
 JSR STKUSA ;Stack user info at ARGA
 LDXIM &C0
10 LDAIM HDRLEN
DIRIN2  ;Entry point from CPINFO
 STX COZERO+1 ;save parameter for DIRMAN
 JSR SETFTP ;MOVE FILE TITLE PTR. TO STACK
 INY
 LDA COZERO ;Load offset
 CLC
 ADCIM :LSB:MIDTX
 STAIY NEWARG ;SET RESULT AREA FOR EXAMINE
 LDAIM :MSB:MIDTX
 ADCIM 0
 INY
 STAIY NEWARG
 INY
 LDAIM 4
 STAIY NEWARG ;ARG. FOR EXAMINE => GET TITLE
 LDAIM 7
 JSR SETRTN

 LDYIM ARGK
 LDA COZERO+1 ;passed parameter
 STAIY NEWARG ;wild card flag

 JMP DIRMAN ;GET INFO. and return


;Copy SIN/Disc no. from DANDS to
;stack. Y already set as stack ptr.

SINDSC ROUT
 LDXIM 0
10 LDAAX DANDS
 STAIY NEWARG
 INY
 INX
 CPXIM 5
 BNE #10
 RTS


;Copy disc block information to stack, starting
;at Y.

;Info is:
;1) Current disc block start (CURBLK)
;2) No. of blocks to read/write (DIVPAR)
;3) Address to read/write to/from (BBUF)

IBLOCK ROUT
 LDA CURBLK
 STAIY NEWARG
 INY
 LDA CURBLK+1
 STAIY NEWARG

 INY
 LDA DIVPAR
 STAIY NEWARG
 INY
 LDA DIVPAR+1
 STAIY NEWARG

 INY
 [ $Level3
 LDA IOBUF
 |
 LDA BBUF
 ]
 STAIY NEWARG
 INY
 [ $Level3
 LDA IOBUF + 1
 |
 LDA BBUF+1
 ]
 STAIY NEWARG

 RTS



;Set pointer on stack pointing to
;text buffer.
;Also set 0 in byte after receive buffer
;Offset in A on entry to SETTXP

SBUFPT ROUT
 LDAIM 0

SETTXP INY
 CLC
 ADCIM :LSB:TXTBUF
 STAIY NEWARG
 LDAIM :MSB:TXTBUF
10 INY
 ADCIM 0
 STAIY NEWARG
 [ $CMOS
 PHX
 |
 TXA
 PHA
 ]
 LDX BPTR
 [ $CMOS
 STZAX RXBUF+RXBUFL ;**22/3/88**
 PLX
 |
 LDAIM 0
 STAAX RXBUF+RXBUFL ;**22/3/88**
 PLA
 TAX
 ]
 RTS

;Sets file title pointer to stack
;at Y.
;On entry, A is offset of file title
;in RX buffer.

;This routine also puts 0 in the byte
;after the receive buffer so that
;analysis of the file title doesn't
;get carried away.

SETFTP INY
 CLC
 ADC BPTR ;Add file title offset to buffer offset
 ADCIM :LSB:RXBUF
 STAIY NEWARG
 LDAIM :MSB:RXBUF
 [ $CMOS
 BRA #10
 |
 BNE #10
 ]
 
;Returns the last component of the pathname handed to save
;in MIDTX [3:13]

SAVNAM ROUT
 LDX BPTR
10 INX
 LDAAX MIDRX+11
 CMPIM CR
 BNE #10 ;look for CR
20 DEX
 LDAAX MIDRX+11
 CMPIM "."
 BEQ #30
 CPX BPTR ;maybe just one component here
 BNE #20
 DEX
30 INX
 LDYIM 0
40 LDAAX MIDRX+11
 CMPIM CR
 BEQ #50
 STAAY MIDTX+3
 INX
 INY
 BNE #40
50 LDAIM &20
60 CPYIM 12
 BCS #70
 STAAY MIDTX+3
 INY
 [ $CMOS
 BRA #60
 |
 BNE #60
 ]
 
70 LDAIM &80
 STAAY MIDTX+3
 RTS ;terminate with CR


;Call FINDMC using machine number
;in net control block.

;Then set CSD handle from RX block into
;user table.

GETUSE ROUT ;Entry generating EXTERR if error
 JSR GETUSR
 BEQ #10
 JSR EXTERR
 LDAIM &FF ;Indicate unsuccessful exit
 RTS

GETUSR LDY QPTR ;Entry not generating error
 LDAAY CBSTID
 STA MCNUMB
 LDAAY CBSTID+1
 STA MCNUMB+1
 LDAAY CBflg ;**25/12/86**
 ANDIM MCtask
 STA MCnumb+2

 JSR FINDMC
 BNE #10

 LDX BPTR
 LDAAX CPCSD ;GET CSD SENT FROM CLIENT
 LDYIM UTHSLD
 STAIY USTPTR ;SET CSD
 LDAIM 0 ;Indicate successful exit
10 RTS



;Move user info. pointer in USTPTR
;to stack.
SETUSE ROUT
 INY
 LDA USTPTR
 STAIY NEWARG
 LDA USTPTR+1
 INY
 STAIY NEWARG
 RTS


;GET USER INFO AND PUT ON STACK AT ARGB

STKUSE ROUT
 JSR GETUSE
 BNE #10
STKUSA LDYIM ARGA
 JSR SETUSE ;NOTE SETUSE DOES INY FIRST, SO ARGA CORRECT
 LDAIM 0
10 RTS

;PUT THREE HANDLES FROM RX BUFFER
;ON STACK AT Y.

STKHND ROUT
 LDX BPTR
 LDAAX CPUFD
 STAIY NEWARG
 INY
 LDAAX CPCSD
 STAIY NEWARG
 INY
 LDAAX CPLIB
 STAIY NEWARG
 RTS

SETRTN ROUT
 LDYIM ARGA
 STAIY NEWARG
 RTS


;Set pointer to COWORK on stack

SCOWPT ROUT
 INY
 LDAIM :LSB:COWORK
 STAIY NEWARG
 INY
 LDAIM :MSB:COWORK
 STAIY NEWARG
 RTS



;SIN/disc no. of object are on
;stack (usually just after a call
;of PRESERVE).

;assumes that GETUSE result is valid ** 3/10/84 **

;If SIN <> 0 ...

;1) Clear object from store.
;2) Delete object from map
;3) Ensure map.

OBJCLR ROUT
 JSR SINZED ;Check SIN is zero (also used in RENAME)
 BEQ #30 ;If zero, exit

 LDAIM 5 ;STRALL function
 JSR SETRTN
 JSR STRMAN ;Flush from store
 BNE SETRTN ;put it on the stack if error

 LDYIM ARGF
 JSR SETUSE ;pass pointer to user info ** 3/10/84 **

 LDAIM MAPFS ;Map free store
 JSR SETRTN
 JSR MAPMAN ;Delete from map
 BNE #20 ;No good => abort

 LDAIM MAPENS ;Map ensure fn.
 JSR SETRTN
 JSR MAPMAN ;Ensure map
 BEQ #30 ;OK => exit

20 JSR INTERR ;Not ok => stop

30 RTS


SINZED LDYIM ARGD
 LDAIY NEWARG
 INY
 ORAIY NEWARG
 INY
 ORAIY NEWARG
 RTS


;Gets entry point, no. of entries and a pointer
;to BIGBFR +1 onto stack. Used by DISCS and USERS

STKLST ROUT
 TYA
 TAX ;pointer into MIDRX
 LDYIM ARGB
 LDAAX MIDRX
 STAIY NEWARG ;Start point in list
 INY
 LDAAX MIDRX+1
 STAIY NEWARG ;Number of entries
 INY
 LDA BBUF
 CLC
 ADCIM TXHDR+1 ;Result area
 STAIY NEWARG
 INY
 LDA BBUF+1
 ADCIM 0
 STAIY NEWARG
 RTS



;Given no. of entries found and ptr. to
;end of result area on stack, sends off the
;result of DISC/USERS in big buffer.
;On entry A = continue code.

LSTRPY ROUT
 STA TEMPA
 LDYIM ARGB
 LDAIY NEWARG
 PHA ;Number of entries found
 LDA BBUF
 STA GENPTR
 LDA BBUF+1
 STA GENPTR+1
 LDYIM 0
 LDA TEMPA ;Continue code
 STAIY GENPTR
 TYA ;Return code (0)
 INY
 STAIY GENPTR
 PLA
 INY
 STAIY GENPTR ;Number of entries found

;Set control block for reply

 LDA RPLYPT
 LDX QPTR
 STAAX CBPORT
 LDA BBUF
 STAAX CBBUF ;Ptr. to message
 LDA BBUF+1
 STAAX CBBUF+1
 LDYIM ARGC
 LDAIY NEWARG ;End of result buffer
 STAAX CBBUFE
 INY
 LDAIY NEWARG
 STAAX CBBUFE+1
 LDY QPTR ;Arg to SEND
 JMP SEND ;Send reply and exit



;Set stack and call DIRMAN retrieve
;to put details into COWORK buffer.
;On entry A = offset in RXCB of file name

LDRETR ROUT
 LDAIM LODFTO

CPRETR PHA
 LDAIM DRRTR ;Dirman retreive
 JSR SETUSA ;PLACE ADDR OF USERINFO ONTO NEWARG STACK
 PLA ;Pull f.t. offset
 JSR SETFTP ;Set file title pointer
 JSR SCOWPT
 LDAIM &C0 ;allow wild cards in LOAD
 LDYIM ARGH
 STAIY NEWARG ;wild card flag

 JMP DIRMAN ;Get info. to COWORK and return



 [ 1=0
RNAMDQ ROUT
 TAY
 LDAIM &C0 ;wild card flag
 PHA
 TYA
 BNE #10

RNAMDM

;Call DIRMAN with function code in A, file title offset
;from TXTBUF in X. Used from RENAME.

 TAY
 LDAIM 0
 PHA
 TYA
10 JSR SETUSA
 TXA ;Get offset of file name in TXTBUF
 JSR SETTXP
 PLA
 JMP CPRET1 ;Set pointer to COWORK, and call DIRMAN



;Check access/type byte for RENAME
;Must be an unlocked file with OWNER access

CHEKTB = DRERRG ;Is locked
 = LODERA ;Is a directory
 = DRERRE ;Insufficient access

CHEKRN ROUT
 LDXIM 3
 LDYIM ARGB
 LDAIY NEWARG
 EORIM OWNER ;Flip the OWNER bit
 ASLA
10 ASLA
 BCS #20
 DEX
 BNE #10

 TXA ;Zero RC
 RTS

20 LDAAX CHEKTB-1
 RTS
       
 ]


;COMMAND LINE UTILS


;Get string (possibly quoted) from
;CLI string (at MIDRX) and transfer
;to TXTBUF offset by X (normally zero)
;NOTE - ACKS and NACKS ignored here !!

BUFTXT ROUT
 LDXIM 0
 [ $CMOS
BTXTA STZ QUOTED ;Quoted flag
 |
BTXTA LDAIM 0
 STA QUOTED ;Quoted flag
 ]
 
 JSR SPACES
 CMPIM """"
 BNE #30
 DEC QUOTED ;Quoted flag on
 DEX

20 INX
25 INY
30 LDAAY MIDRX
35 STAAX TXTBUF

 CMPIM ACK
 BEQ #25 ;Inc. string ptr., but not buffer
 CMPIM NACK
 BEQ #25

 CMPIM CR
 BEQ #60
 CMPIM SPACE
 BNE #50
 BIT QUOTED
 BMI #20 ;Spaces OK in quoted string

40 LDAIM CR ;Finish with CR as terminator in destn.
 [ $CMOS
 BRA #35
 |
 BNE #35
 ]
 
50 CMPIM """"
 BNE #20
 INY ;Step C.line ptr. past final delimiter
 INC QUOTED ;Switch off quoted flag
 [ $CMOS
 BRA #40 ;Exit, with CR terminator
 |
 BEQ #40 ;Exit, with CR terminator
 ]
 
60 LDA QUOTED ;Error in quoted string
 BEQ #70 ;Otherwise exit, Z set

BUFERR LDAIM NAMERR
 PHP
 JSR EXTERR ;Send error message
 PLP
70 RTS ;Give Z unset exit

 [ 1=0
;Read hex number (up to 4 bytes)
;into 4-byte p.0 area at X. NOTE
;uses 1 extra byte at X.

RDNUM ROUT
 STZAX 0
 STZAX 1
 STZAX 2
 STZAX 3
 STZAX 4
 JSR SPACES
10 LDAAY MIDRX
 CMPIM "0"
 BCC #40
 CMPIM &3A
 BCC #20
 SBCIM 7
 BCC #40
 CMPIM &40
 BCS #40

20 ASLA
 ASLA
 ASLA
 ASLA
 STYZX 4
 LDYIM 4
30 ASLA
 ROLZX 0
 ROLZX 1
 ROLZX 2
 ROLZX 3
 DEY
 BNE #30
 LDYZX 4
 INY
 BNE #10

40 LDAZX 4
 RTS  
 ]

SPACER DEY
50 INY
SPACES LDAAY MIDRX
 CMPIM SPACE
 BEQ #50
 RTS


;Move file title into TXTBUF and
;check to end of line for syntax.

RDTITL ROUT
 JSR BUFTXT
 BNE #10 ;**20/5/87** fall into COMEND

COMEND JSR SPACES
 CMPIM CR
 BEQ #10
 LDAIM SYNERR
 JSR EXTERR
 LDAIM SYNERR ;Give non-zero exit
10 RTS

;** E R R O R  T A B L E **

ERRTAB

 [ Lang = English
 = URERRA,"Who are you?",CR
 = WOTERR,"Bad Command",CR
 = SYNERR,"Syntax",CR
 = NAMERR,"Bad string",CR
 = NUMERR,"Bad number",CR
 = DRERRA,"Bad file name",CR
 = DRERRB,"Broken dir",CR
 = DRERRC,"Not found",CR
 = DRERRD,"Not a directory",CR
 = DRERRE,"Insufficient access",CR
 = DRERRG,"Entry locked",CR
 = ATERRB,"User not known",CR
 = ATERRC,"Wrong password",CR
 = ATERRE,"Bad password",CR
 = MPERRB,"Disc full",CR
 = MPERRA,"Disc changed",CR
 = SAERRA,"Bad attribute",CR
 = ATERRA,"PW file not found",CR
 [ $Level3
 = &54,"Insert a Fileserver disc",CR
 ]
 = RDERRB,"Channel",CR
 = RDERRJ,"EOF",CR
 = RDERRL,"Outside file",CR
 = RDERRH,"Already open at station ",CR
 = RDERRN,"File read only",CR
 = DCERRE,"Disc read only",CR
 = DCERRF,"Disc fault",CR
 = MPERRL,"Map fault",CR
 = RDERRC,"Too many open files",CR
 = URERRB,"Too many users",CR
 = LODERA,"Is a directory",CR
 = &BA,"Insufficient privilege",CR ;** 13/4/83 **
 = DRERRJ,"Dir. not empty",CR
 = DRERRM,"Dir. full",CR
 = ATERRF,"Already a user",CR
 = RNAMQQ,"Bad Rename",CR
 = DRERRK,"Types don't match",CR
 = URERRE,"Not logged on",CR
 = ATERRG,"Bad user name",CR
 = RDERRO,"Write only",CR ;** 16/11/84
 = MPERRN,"Insufficient space",CR
 = SPERRA,"Bad privilege letter",CR ;** 6/11/86 **
 [ $CMOS
 = DOORER,"Drive door open",CR
 ]
 =  0 ;Table terminator
 ]

 [ Lang = Italian
 = URERRA,"Chi sei?",CR
 = WOTERR,"Comando Errato",CR
 = SYNERR,"Syntax",CR         ; ************************************
 = NAMERR,"Sequenza errata",CR
 = NUMERR,"Numero errata",CR  ; ************************************
 = DRERRA,"Nome file errato",CR
 = DRERRB,"Dir rotto",CR
 = DRERRC,"Non trovato",CR
 = DRERRD,"Non e' un directory",CR
 = DRERRE,"Accesso insufficiente",CR
 = DRERRG,"Entrata bloccata",CR
 = ATERRB,"Utente Sconosciuto",CR
 = ATERRC,"P.o. Errata",CR
 = ATERRE,"P.o. incorretta",CR
 = MPERRB,"Disco pieno",CR
 = MPERRA,"Disco changed",CR    ; **********************************
 = SAERRA,"Attributo Errato",CR
 = ATERRA,"P.o. file non trovato",CR
 [ $Level3
 = &54,"Inserire un disco Fileserver",CR
 ]
 = RDERRB,"Canale",CR
 = RDERRJ,"FDF",CR
 = RDERRL,"Fuori file",CR
 = RDERRH,"Gia' aperto alla stazione ",CR
 = RDERRN,"File solo lettura",CR
 = DCERRE,"Disco solo lettura",CR
 = DCERRF,"Disco difettoso",CR
 = MPERRL,"Mappa difettoso",CR
 = RDERRC,"Troppi file aperti",CR
 = URERRB,"Troppi utenti",CR
 = LODERA,"E' gia' un directory",CR
 = &BA,"Privilegio insufficiente",CR ;** 13/4/83 **
 = DRERRJ,"Dir non vuoto",CR
 = DRERRM,"Dir pieno",CR
 = ATERRF,"Gia' in uso",CR
 = RNAMQQ,"Rinome errata",CR
 = DRERRK,"Tipi non coincidono",CR
 = URERRE,"Non acceso",CR
 = ATERRG,"Nome utente errato",CR
 = RDERRO,"Solo scrittura",CR ;** 16/11/84
 = MPERRN,"Spazio insufficiente",CR
 = SPERRA,"Privilegio lettera errato",CR ;** 6/11/86 **
 [ $CMOS
 = DOORER,"Drive aperto",CR
 ]
 =  0 ;Table terminator
 ]

 LNK PRINT0

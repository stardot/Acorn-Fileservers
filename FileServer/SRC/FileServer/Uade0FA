 OPT UADE0F ;> Uade0FA
 TTL File server file UADE0FA

;***** ATWRIT *****

;ENTRY as for ATFREE+ ARGF-I value to write

ATWRIT ROUT
 JSR CHKPRV
 BNE #30 ;check for priv

 LDYIM ARGD
 LDAIY ARGPTR
 TAX
 INY
 LDAIY ARGPTR
 LDYIM ARGC
 STAIY NEWARG
 DEY
 TXA
 STAIY NEWARG ;pointer to name

 LDAIM ARGF
 STA OFF1
 LDXIM ARGPTR
 LDAIM ARGD
 STA OFF2
 LDYIM NEWARG
 LDAIM 4
 JSR MOVBLK

 LDAIM 9
 JSR SETRTN ;call update user free space
 JSR USRMAN
 BNE #30

 JSR SETAUT
 JSR FDUSID
 BNE #30 ;not found

 LDAIM PWFREE ;area to copy to
 STA OFF2
 LDYIM PWFPTR

 LDAIM ARGF
 STA OFF1
 LDXIM ARGPTR

 LDAIM 4
 JSR MOVBLK

 JSR MARKDT ;indicate that PW file is dirty
 LDAIM 0
 JSR APENFL ;flush the PW file block

30 JMP ATEXIT

ATFPTR LDYIM ARGF ;setup Zpage pointer from ARGE
 LDAIY NEWARG
 STA GENPTR
 INY
 LDAIY NEWARG
 STA GENPTR+1
 RTS

ATFIND ROUT
 LDXIM 4 ;EXIT Z=1 => ok user: C=1 => not logged on
 LDYIM ARGB
10 LDAIY ARGPTR
 STAIY NEWARG
 INY
 DEX
 BNE #10 ;copy stack for USRMAN

 LDAIM 6 ;find user
 JSR SETRTN
 JSR USRMAN
 CLC
 BEQ #20 ;user found in table

 CMPIM URERRE ;'not logged on'
20 RTS

SETAUT LDYIM ARGD
 LDAIY ARGPTR
 STA AUTPTR
 INY
 LDAIY ARGPTR
 STA AUTPTR+1 ;AUTPTR:=ADDRESS OF USERID
 RTS

CHKPRV ROUT
 LDYIM ARGB
 LDAIY ARGPTR
 STA GENPTR
 INY
 LDAIY ARGPTR
 STA GENPTR+1
 LDYIM UTPRIV
 LDAIY GENPTR
 ANDIM SYSTPV
 BNE #10
 LDAIM ATERRD ;INSUFFICIENT PRIV
 RTS

10 LDAIM 0
 RTS

;RETPWF: RETRIEVE PW FILE FROM DISC (ARGB-C HOLDS DISCNO)

;FIRST SETUP ARGS FOR DIRMAN.RETRIEVE

RETPTB = 2 ;DIRMAN.RETRIEVE
 & ATUSRI ;userinfo
 & PWTITL ;PW file title
 & ATINF ;result area
 = 0

RETPWF ROUT
 LDYIM ARGB ;**25/12/86** Copy disc no to UTDISC
 LDAIY NEWARG
 LDYIM UTDISC
 STAIY ATUSPT
 LDYIM ARGC
 LDAIY NEWARG
 LDYIM UTDISC+1
 STAIY ATUSPT

 LDYIM ARGA
10 LDAAY RETPTB-ARGA
 STAIY NEWARG
 INY
 CPYIM ARGI
 BNE #10

 JSR DIRMAN
 BNE #30
 LDYIM ARGB
 LDAIY NEWARG
 ANDIM TYPDIR
 CMPIM TYPFIL
 BEQ #20
 LDAIM ATERRI ;$.PASSWORDS WRONG TYPE
 JSR INTERR
20 LDAIM 0 ;RC:=0
30 PHP
 CMPIM MPERRA ;DISC NOT FOUND
 BNE #40
 LDAIM ATERRA
40 PLP
 RTS

; DSCSIA: Put arg, INFDIS & INFSIN on NEWARG stack
; DSCSIN: Put just INFDIS & INFSIN on NEWARG stack
; Exit:   Y=ARGF

DSCSIA ROUT
 JSR SETRTN ;**25/12/86**
DSCSIN LDYIM ARGB ;PLACE DISC NO & SIN ONTO NEWARG STACK
 LDA ATINF+INFDIS ;disc number (lo)
 STAIY NEWARG
 INY
 LDA ATINF+INFDIS+1 ;disc number (hi)
 STAIY NEWARG
 INY
 LDA ATINF+INFSIN
 STAIY NEWARG ;SIN (ls)
 INY
 LDA ATINF+INFSIN+1
 STAIY NEWARG ;SIN (cs)
 INY
 LDA ATINF+INFSIN+2
 STAIY NEWARG ;SIN (ms)
 RTS

MARKDT LDA ATSTRA
 STA GENPTR
 LDA ATSTRA+1
 STA GENPTR+1
 JMP MRKDRT

;FDUSID: SEARCH THE PW FILE FOR GIVEN USERID

;ENTRY: AUTPTR = POINTER TO USERID
;       ATDRIV = first drive to scan (usually zero)
;       ATWORK = +- to search for userid, 0 to find free entry
;                if 0, then ATDRIV has a hint for a first drive

;EXIT:  A = RC
;PWFPTR = PTR TO RELEVANT ENTRY IN PW FILE


FDUSID ROUT
 LDA ATDRIV ;**23/1/87** first drive to scan
 LDY ATWORK ;**23/1/87** free entry with hint?
 BNE #00
 DEY
 STY ATDRIV ;**23/1/87** so drive 0 up next after hint
00 JSR DRVINF
 BEQ #04 ;**25/12/86** Br if disc on this drive
02 INC ATDRIV ;**25/12/86** Next drive
 LDA ATDRIV
 CMP DRIVES
 BCC #00 ;**25/12/86** More drives, scan on
 LDAIM ATERRB ;**25/12/86** Cannot find user id
 RTS
 
04 JSR APINIT ;get first block of entries
 BEQ #05
 CMPIM DRERRC ;**25/12/86** onto next disc if no pw file
 BEQ #02
 [ $CMOS
 RTS
 ]

 [ $CMOS
05 STZ DOTFLG ;initialise the flag for every lookup
 |
05 LDAIM 0
 STA DOTFLG ;initialise the flag for every lookup
 ] 

 LDYIM PWFLAG
 LDAIY PWFPTR
 ANDIM INUSE ;IS THE ENTRY IN USE?
 BEQ #45

 LDA ATWORK
 BEQ #60
 LDYIM PWUSID
 STY TEMPA ;use registers to hold pointers
 STY TEMPB ;pointer into PW file
10 LDY TEMPA
 LDAIY AUTPTR
 JSR ISCHAR ;C=1 -> not alpha
 LDY TEMPB
 EORIY PWFPTR ;Compare with PW file
 BCS #15
 ANDIM &DF ;Compare with case forcing
15 BNE #60

 LDAIY PWFPTR ;Here are equal, so check if are terminators
 CMPIM TERMIN
 BEQ #40 ;Both terminators => found
 
 CPYIM PWPASS-1 ; *** LH 24/10/85
 BNE #20 ;Not last pair so continue
 LDY TEMPA ;Check USERID terminated
 INY
 LDAIY AUTPTR
 CMPIM TERMIN
 BEQ #40 ;End and terminated
 [ $CMOS
 BRA #60 ;Not terminated so step on
 |
 BNE #60 ;Not terminated so step on
 ]

20 INC TEMPA
 INC TEMPB
 LDY TEMPA
 LDAIY AUTPTR
 CMPIM DOT
 BNE #30
 INC DOTFLG

 CPYIM MAXID ;only skip if the dot could have been omitted
 BNE #30 ;from the PW file

 LDY TEMPB ;just look for "."
 EORIY PWFPTR
 BNE #25 ;dont adjust if it is there
 INC TEMPB
25 INC TEMPA ;step past in AUTPTR, not PWFPTR

30 LDY TEMPA
 CPYIM MAXID+1 ;check that we have had a dot in first 11 chars
 BNE #10 ;** LH 24/10/85  check next match **

 LDA DOTFLG
 BEQ #60 ;should have found one by now
 [ $CMOS
 BRA #10 ;Dot found so continue
 |
 BNE #10 ;Dot found so continue
 ]

40 LDAIM 0 ;FOUND IT
42 RTS

45 LDA ATWORK ;**25/12/86** looking for free slot?
 BEQ #42 ;**25/12/86** exit with free slot in PWFPTR

;NOW MAKE PWFPTR POINT TO THE NEXT ENTRY

 [ $Level3
60 JSR APTEST ;check for end-of-window
 BNE #65
 JSR APEND ;check end-of-file
 BEQ #90
 JSR APNEXT ;get next window
 BNE #42
65 JMP #05
 |
60 JSR APTEST ;check for end-of-window
 BNE #05
 JSR APEND ;check end-of-file
 BEQ #90
 JSR APNEXT ;get next window
 BEQ #05
 RTS
 ]
 
90 LDAIM 0 ;**25/12/86** flush final block
 JSR APENFL
 BNE #42
 LDA ATWORK ;**25/12/86** stop after first file
 BEQ #95 ;**25/12/86** if looking for free slot
 JMP #02 ;**25/12/86** userid not found - next drive

95 LDAIM ATERRB ;**25/12/86** no free slot
 RTS

;CHEKPW: CHECK PASSWORD SUPPLIED BY THE USER WITH
;THAT IN THE PASSWORD FILE.

;ENTRY: AUTPTR = PTR TO USERID (TERMINATED CR) FOLLOWED BY PW.
;PWFPTR = PTR TO PW FILE ENTRY.

;EXIT:  A = RC

CHEKPW ROUT
 JSR STEPUR ;Step Y past userid. to password
CHEKP1 ;Entry from SETPASSWORD (Y already set)
 LDAIM PWPASS ;Set up offsets for PW comparison
 STA OFF2

10 LDAIY AUTPTR
 STY OFF1
 LDY OFF2 ;Offset into PW file
 CPYIM PWPASS+MAXPW ;Check if reached end of pw in file
 BEQ #20 ;If so, check that pw from AUTPTR is terminated

 EORIY PWFPTR
 INC OFF2 ;Increment PW ptr. for next time
 LDY OFF1 ;Get offset from AUTPTR
 INY ;Increment for next time
 ANDIM &DF ;Complete comparison
 BNE #30 ;Not the same -> exit with error

 DEY ;Point to char. off AUTPTR
 LDAIY AUTPTR ;The same -> check if end of string
 INY ;Restore Y in case going back to CHEKWB
 SEC
 SBCIM TERMIN
 BNE #10
 RTS

20 SEC
 SBCIM TERMIN
 BEQ #40 ;Both are terminators => exit with zero

30 LDAIM ATERRC ;=> not found
40 RTS

STEPUR LDYIM 0
50 LDAIY AUTPTR
 INY
 CMPIM TERMIN ;Move Y to point to posn. after userid
 BNE #50 ;Not there yet
 RTS

SETAP1 ;Set pointer to callers user id
 CLC
 LDYIM ARGB
 LDAIY ARGPTR
 ADCIM UTUSID
 STA AUTPTR
 INY
 LDAIY ARGPTR
 ADCIM 0
 STA AUTPTR+1 ;AUTPTR:=PTR TO CALLER'S USERID
 RTS

;**** Start of PW paging routines ****

;start pointer := 0
;end pointer := 0
;current pointer := 0 ;initialisation of variables

;REPEAT
;  load window ( end pointer DIV 256, window size)
;  End pointer+:= amount loaded
;  Current pointer := Current pointer REM 256
;  REPEAT
;    perform operation (current pointer)
;    start pointer+:= entry size
;    current pointer+:= entry size
;  UNTIL end pointer - start pointer < entry size OR ...
;  IF end pointer <> start pointer THEN end pointer -:= 256
;UNTIL end pointer >= file size OR ...

;**** Initialisation of variables ****

APINIT ROUT
 [ $CMOS
 STZ STRPTR
 STZ STRPTR+1 ;start := 0
 STZ PTREND
 STZ PTREND+1 ;end := 0
 STZ PWFPTR
 STZ PWFPTR+1 ;current := 0
 |
 LDAIM 0
 STA STRPTR
 STA STRPTR+1 ;start := 0
 STA PTREND
 STA PTREND+1 ;end := 0
 STA PWFPTR
 STA PWFPTR+1 ;current := 0
 ] 
 JSR RETPWF ;read the password file info
 BEQ #20 ;first call has no window to release
 CMPIM DRERRC ;**25/12/86** file not found?
 BNE #20 ;continue if not
 TAX
 RTS ;**25/12/86** Error exit

;**** Grab next chunk of PW file ****

APNEXT LDAIM 0 ;flush previous block
 JSR APENFL
 BNE #60 ;detect error here
20 LDAIM 1 ;Disc address -> store address
 JSR DSCSIA ;put disc number & SIN onto NEWARG stack
 INY
 LDA STRPTR+1
 STAIY NEWARG ;logical block (lo)
 INY
 LDAIM 0
 STAIY NEWARG ;logical block (hi)

 INY
 SEC
 LDA ATINF+INFSZE+1
 SBC STRPTR+1 ;get number of blocks remaining
 LDX ATINF+INFSZE ;**1/6/88** round up if part sector
 BEQ #30
 [ $Level3
 CLC
 ADCIM 1
 |
 INCA
 ]
 BEQ #35 ;**1/6/88** in case now 256
30 CMPIM APWIND
 BCC #40 ;<= window size left
35 LDAIM APWIND
40 STAIY NEWARG ;no of blocks (lo)

 INY
 LDAIM 0 ;no of blocks (hi)
 STAIY NEWARG

 JSR STRMAN ;do the call

 PHA ;save RC
 CLC
 LDYIM ARGB
 LDAIY NEWARG ;get store address
 STA ATSTRA
 ADC STRPTR
 STA PWFPTR
 INY
 LDAIY NEWARG
 STA ATSTRA+1 ;two bytes
 ADCIM 0
 STA PWFPTR+1

 INY
 LDAIY NEWARG
 STA GENPTR
 INY
 LDAIY NEWARG
 STA GENPTR+1 ;get number of blocks loaded

 LDYIM CEBLKS ;from cache descriptor
 LDAIY GENPTR
 CLC
 ADC STRPTR+1 ;**1/6/88**
 STA PTREND+1 ;update PTREND by this value

 PLA
 BCC #60 ;**1/6/88** br if password file not too big
 JSR APENFL ;**1/6/88** flush unwanted segment
 LDAIM ATERRB ;**1/6/88** else say entry not found
60 RTS ;return code from STRMAN

;****   Update counters, test end condition   ****
;**** Z-> end condition met ****

APTEST ROUT
 CLC
 LDAIM PWENSZ
 ADC STRPTR
 STA STRPTR ;strptr+:= entry size
 BCC #10
 INC STRPTR+1

10 CLC
 LDAIM PWENSZ
 ADC PWFPTR
 STA PWFPTR ;curptr+:= entry size
 BCC #20
 INC PWFPTR+1

20
 [ $CMOS
 LDA STRPTR+1 ;**1/6/88** test for endfile
 CMP ATINF+INFSZE+1
 BCC #30
 LDA STRPTR
 CMP ATINF+INFSZE
 BCS #40
30
 ]

 SEC
 LDA PTREND
 SBC STRPTR
 TAX ;save result
 LDA PTREND+1
 SBC STRPTR+1
 BNE #50 ;not zero condition
 TXA
 BEQ #50 ;start=end
 CMPIM PWENSZ
 LDXIM &FF ;unset Z if necessary
 BCS #50
40 LDAIM 0
50 RTS
 

;****  test for end of PW file ****

APEND ROUT
 LDXIM &FF
 LDA PTREND+1
 CMP ATINF+INFSZE+1
 BCC #10
 BNE #00
 LDA PTREND
 CMP ATINF+INFSZE
 BCC #10
00 INX
10 TXA ;set code
 RTS ;Z shows condition


;**** release old window ****

APENLV ROUT
 PHA
 LDAIM 3 ;STRMAN.unlock window
 [ $CMOS
 BRA #10 ;but leave it in cache
 |
 BNE #10 ;but leave it in cache
 ]
 
APENFL PHA
 LDAIM 4 ;STRMAN.flush old window
10 JSR SETRTN
 INY
 LDA ATSTRA ;store address
 STAIY NEWARG
 INY
 LDA ATSTRA+1
 STAIY NEWARG
 INY
 LDAIM &FF
 STAIY NEWARG ;decrement reference count (2)
20 JSR STRMAN ;make call
 TAX ;return the first error code
 PLA
 BNE #30
 TXA
30 RTS ;return error

APENRG ROUT ;enlarge the password file
 LDA ATINF+INFSZE+2 
 BNE #00
 LDA ATINF+INFSZE+1 ;**1/6/88** see if maximal size already
 CMPIM &FE ;**1/6/88** won't work if bigger than this
 BCC #05 ;**1/6/88** because two byte offsets only used
00 LDAIM ATERRH ;**1/6/88** password file too big
 RTS

05 LDAIM 14 ;MAPMAN.changesize without space check
 JSR DSCSIA ;put disc number & SIN onto NEWARG stack
 INY
 LDAIM 0
 STAIY NEWARG ;new size (lo)
 CLC
 INY
 LDA ATINF+INFSZE+1
 ADCIM 1
 STAIY NEWARG ;new size (mid)
 INY
 LDA ATINF+INFSZE+2
 ADCIM 0
 STAIY NEWARG ;new size (hi)

 JSR MAPMAN
 BNE #10 ;skip if some error

 LDAIM 13 ;Zero area of disc
 JSR DSCSIA
 INY
 LDA ATINF+INFSZE
 STAIY NEWARG
 INY
 LDA ATINF+INFSZE+1
 STAIY NEWARG
 INY
 LDA ATINF+INFSZE+2
 STAIY NEWARG

 JSR MAPMAN
 BNE #10

 LDAIM 6 ;MAPMAN.ensure
 JSR DSCSIA ;discno & sin onto NEWARG stack
 JSR MAPMAN
10 RTS ;leave with RC set

 LNK UADE10

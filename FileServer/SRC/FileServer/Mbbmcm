 OPT MBBMCM ;> Mbbmcm
 TTL File server file MBBMCM

;
; MAP BLOCK AND BIT MAP MANAGEMENT
;
;
; INITIALISE THE MAP BLOCKS
;
; ALLOCATES CONTROL BLOCKS FOR THE BIT MAP CACHE
; AND THE MAP BLOCK CACHE
;
; USES MPTMPE,MPTMPD
;
INBKMN ROUT
 LDYIM :LSB:SZMBCB
 LDXIM :MSB:SZMBCB
 JSR GETVEC ;GET SPACE FOR MAP BLOCK CHACHE DESCRIPTORS
 STY MBCBPT ;SAVE POINTER TO AREA
 STX MBCBPT+1
 LDYIM :LSB:SZBMCB
 LDXIM :MSB:SZBMCB
 JSR GETVEC ;GET SPACE FOR BIT MAP CACHE DESCRIPTORS
 STY BMCBPT
 STX BMCBPT+1 ;SAVE THIS POINTER
 LDAIM :LSB:SZBMAR ;SIZE OF MEMORY AREA FOR THESE BLOCKS
 STA MPTMPE
 LDAIM :MSB:SZBMAR
 STA MPTMPE+1
 JSR SETBM ;**25/12/86**
 JSR SETCBS ;INITIALISE CONTROL BLOCKS
 LDAIM :LSB:SZMBAR ;SIZE OF MAP BLOCK AREA
 STA MPTMPE
 LDAIM :MSB:SZMBAR
 STA MPTMPE+1
 JSR SETMB
 JSR SETCBS
00 RTS
;
; SETUP MAP BLOCK OR BIT MAP CONTROL BLOCKS
;
; ON ENTRY
;     GNCBPT POINTS TO CONTROL BLOCK
;     MPTMPE HOLDS SIZE OF DISC BLOCK CACHE
;     NCBDB HOLDS NUMBER OF DISC BLOCK ENTRIES
;
SETCBS LDY MPTMPE
 LDX MPTMPE+1 ;GET SIZE OF CACHE
 JSR GETVEC ;GET THE SPACE
 STY MPTMPE
 STX MPTMPE+1 ; SAVE THE AREA
 LDX NCBDB ;GET NUMBER OF ENTRIES
10 LDYIM CAFLG
 LDAIM 0
 STAIY GNCBPT ;ZERO ALL FLAGS
 LDYIM CBSA
 LDA MPTMPE
 STAIY GNCBPT ;SAVE ADDRESS OF STORE
 INY
 LDA MPTMPE+1
 STAIY GNCBPT
 DEX
 BEQ #00 ; FINISH
 CLC
 LDA MPTMPE ;Increment to next block of store
 ADCIM :LSB:BTINBK
 STA MPTMPE
 LDA MPTMPE+1
 ADCIM :MSB:BTINBK
 STA MPTMPE+1
 JSR ADGNCB ;POINT TO NEXT CONTROL BLOCK
 [ $CMOS
 BRA #10 ;TRY NEXT
 |
 JMP #10 ;TRY NEXT
 ]
 
;
; GET BLOCK TO STORE
;
; ON ENTRY
;      CBSIN HOLDS THE DISC ADDRESS
;      GNCBPT POINTS TO RELEVANT CACHE DESCRIPTORS
;      NCBDB HOLDS NUMBER OF CONTROL BLOCK ENTRIES
;      MPDRVE HOLDS DRIVE NUMBER
;
; ON EXIT
;      CBSTA HOLDS STORE ADDRESS OF BLOCK
;
GTBTS ROUT
 LDA GNCBPT ;SAVE POINTER TO CONTROL BLOCKS
 PHA
 LDA GNCBPT+1
 PHA
 JSR FNDBLK
 BCC #30
10 LDYIM CBSA ;IN STORE SO JUST GET ADDRESS
 LDAIY GNCBPT
 STA CBSTA
 INY
 LDAIY GNCBPT
 STA CBSTA+1
 LDYIM CBAGE
 LDAIM 0
 STAIY GNCBPT
 PLA ;RESTORE POINTER
 STA GNCBPT+1
 PLA
 STA GNCBPT
 JSR CAAGE ;AGE ALL ENTRIES
 LDAIM 0
 RTS

 [ $CMOS
30 PLX ;NEED TO START AT BEGINNING AGAIN
 |
30 PLA ;NEED TO START AT BEGINNING AGAIN
 TAX
 ] 
 PLA
 STA GNCBPT
 PHA
 STX GNCBPT+1
 [ $CMOS
 PHX ;KEEP POINTER IN CORRECT ORDER ON STACK
 |
 TXA
 PHA ;KEEP POINTER IN CORRECT ORDER ON STACK
 ] 
 JSR GETFR ;GET A FREE POSITION
 BNE #50 ;IF FAILED
 LDYIM CBDA
 LDA CBSIN
 STAIY GNCBPT
 INY
 LDA CBSIN+1
 STAIY GNCBPT
 INY
 LDA CBSIN+2
 STAIY GNCBPT
 LDYIM CBDR
 LDA MPDRVE
 STAIY GNCBPT
 JSR RDBLK ;READ IN THE NEW BLOCK
 BEQ #40
 LDAIM 2 ;READ ERROR
 [ $CMOS
 TSB ERRTYP
 |
 ORA ERRTYP
 STA ERRTYP
 ]
40 LDYIM CAFLG
 LDAIY GNCBPT
 ORAIM 1 ;FLAG IN STORE
 STAIY GNCBPT
 [ $CMOS
 BRA #10
 |
 BNE #10
 ]
 
50 TAX ; ** 13/12/85 **
 PLA
 STA GNCBPT+1
 PLA ;Balance stack
 STA GNCBPT
 TXA
 RTS

;
; FIND A SPECIFIED DISC BLOCK IN STORE
;
; CBSIN HOLDS DISC ADDRESS
; MPDRVE HOLDS DRIVE NUMBER
;
; C SET IF FOUND
FNDBLK ROUT
 LDA GNCBPT
 PHA
 LDA GNCBPT+1
 PHA
 LDX NCBDB ;CHECK IF ALREADY IN STORE
10 LDYIM CBDA
 LDAIY GNCBPT
 CMP CBSIN
 BNE #20
 INY
 LDAIY GNCBPT
 CMP CBSIN+1
 BNE #20
 INY
 LDAIY GNCBPT
 CMP CBSIN+2
 BNE #20
 LDYIM CBDR
 LDAIY GNCBPT
 CMP MPDRVE
 BEQ #30
20 DEX
 BEQ #40
 JSR ADGNCB
 [ $CMOS
 BRA #10
 |
 JMP #10
 ]
 
30 LDYIM CAFLG ;CHECK IF IN STORE
 LDAIY GNCBPT
 ANDIM 1
 BEQ #20
 PLA
 PLA
 SEC
 RTS

40 PLA
 STA GNCBPT+1
 PLA
 STA GNCBPT
 CLC
 RTS
;
; READ/WRITE A BLOCK INTO STORE
;
; ON ENTRY
;      GNCBPT POINTS TO ENTRY IN CACHE DESCRIPTOR
;

 [ $Level3
 [ WINCH=0
RDBLK ROUT
 LDAIM &08
 BNE #00
WRBLK LDAIM &0A
00 STA SAVCOM
 LDYIM CBDR
 LDAIY GNCBPT
 STA DRIVNO
 LDYIM CBDA
 LDAIY GNCBPT
 STA RBDA ; SAVE DISC ADDRESS
 INY
 LDAIY GNCBPT
 STA RBDA+1
 INY
 LDAIY GNCBPT
 STA RBDA+2
10 LDYIM MPSECS
 LDA RBDA
 CMPIY MAPPTR
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 INY
 LDA RBDA+2
 SBCIY MAPPTR
 BCC #20
 LDYIM MPADFT
 CLC
 LDA DRIVNO
 ADCIY MAPPTR
 STA DRIVNO
 SEC
 LDYIM MPSECS
 LDA RBDA
 SBCIY MAPPTR
 STA RBDA
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 STA RBDA+1
 INY
 LDA RBDA+2
 SBCIY MAPPTR
 STA RBDA+2
 JMP #10

20 LDYIM CBSA
 LDAIY GNCBPT
 STA DCSTAD
 INY
 LDAIY GNCBPT
 STA DCSTAD+1
 LDA DSCCB+TRADD+2
 PHA
 LDAIM 0
 STA DSCCB+TRADD+2
 STA DSCCB+TRADD+3
 LDYIM CAFLG ;MARK NOT WRITTEN
 LDAIY GNCBPT
 ANDIM 3
 STAIY GNCBPT
 LDA RBDA
 ORA RBDA+1
 ORA RBDA+2 ;IF SECTOR ZERO CALCULATE CHECKSUM
 BNE #40
 LDA GNCBPT
 PHA
 LDA GNCBPT+1
 PHA
 LDA DCSTAD
 STA GNCBPT
 LDA DCSTAD+1
 STA GNCBPT+1
 LDYIM &FF
 TYA
 STAIY GNCBPT
 LDAIM 0
 CLC
30 ADCIY GNCBPT
 DEY
 BNE #30
 ADCIY GNCBPT
 DEY
 STAIY GNCBPT
 PLA
 STA GNCBPT+1
 PLA
 STA GNCBPT
40 JSR XFER ;Transfer block
 TAX
 PLA
 STA DSCCB+TRADD+2
 STA DSCCB+TRADD+3
 TXA
 RTS
 |
RDBLK ROUT
 LDAIM &53 ;VALUE FOR READ
 BNE #10

WRBLK LDAIM &4B ;VALUE FOR WRITE
10 STA SAVCOM ;SAVE VALUE
 LDYIM CBDR
 LDAIY GNCBPT ;GET DRIVE NUMBER
 STA DRIVNO
 LDAIM 0
 STA CTRACK ;PREPARE TO CALCULATE TRACK AND SECTOR
 STA CSECTR
 LDYIM CBDA
 LDAIY GNCBPT
 STA RBDA ; SAVE DISC ADDRESS
 INY
 LDAIY GNCBPT
 STA RBDA+1
 INY
 LDAIY GNCBPT
 STA RBDA+2
20 LDYIM MPSECS
 LDA RBDA
 CMPIY MAPPTR
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 INY
 LDA RBDA+2
 SBCIY MAPPTR
 BCC #30
 LDYIM MPADFT
 CLC
 LDA DRIVNO
 ADCIY MAPPTR
 STA DRIVNO
 SEC
 LDYIM MPSECS
 LDA RBDA
 SBCIY MAPPTR
 STA RBDA
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 STA RBDA+1
 INY
 LDA RBDA+2
 SBCIY MAPPTR
 STA RBDA+2
 JMP #20

30 LDYIM MPSPCY
 LDA RBDA
 CMPIY MAPPTR ; CHECK IF END REACHED
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 LDA RBDA+2
 SBCIM 0
 BCC #40 ;BRANCH WHEN CORRECT PLACE
 INC CTRACK
 LDYIM MPSPCY
 SEC
 LDA RBDA
 SBCIY MAPPTR ; KEEP DECREMENTING
 STA RBDA
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 STA RBDA+1
 LDA RBDA+2
 SBCIM 0
 STA RBDA+2
 JMP #30

40 LDA RBDA
 STA CSECTR ; SAVE SECTOR
 LDYIM CBSA
 LDAIY GNCBPT
 STA DCSTAD
 INY
 LDAIY GNCBPT
 STA DCSTAD+1
 LDAIM 0
 STA DSCCB+TRADD+2
 STA DSCCB+TRADD+3
 LDYIM CAFLG ;MARK NOT WRITTEN
 LDAIY GNCBPT
 ANDIM 3
 STAIY GNCBPT
 JMP XFER ;TRANSFER THE BLOCK
 ]
 
 | ; not level3, filestore code
 
RDBLK ROUT
 LDAIM &08
 [ $CMOS
 BRA #00
 |
 BNE #00
 ]
WRBLK LDAIM &0A
00 STA SAVCOM
 LDYIM CBDR
 LDAIY GNCBPT
 STA DRIVNO
 LDYIM CBDA
 LDAIY GNCBPT
 STA RBDA ; SAVE DISC ADDRESS
 INY
 LDAIY GNCBPT
 STA RBDA+1
 INY
 LDAIY GNCBPT
 STA RBDA+2
 [ 1=0  ; not needed, no disc overflow **16/1/86**
10 LDYIM MPSECS
 LDA RBDA
 CMPIY MAPPTR
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 INY
 LDA RBDA+2
 SBCIY MAPPTR
 BCC #20
 LDYIM MPADFT
 CLC
 LDA DRIVNO
 ADCIY MAPPTR
 STA DRIVNO
 SEC
 LDYIM MPSECS
 LDA RBDA
 SBCIY MAPPTR
 STA RBDA
 INY
 LDA RBDA+1
 SBCIY MAPPTR
 STA RBDA+1
 INY
 LDA RBDA+2
 SBCIY MAPPTR
 STA RBDA+2

20
 ]
 LDYIM CBSA
 LDAIY GNCBPT
 STA DCSTAD
 INY
 LDAIY GNCBPT
 STA DCSTAD+1
 STZ DSCCB+TRADD+2
 STZ DSCCB+TRADD+3
 LDYIM CAFLG ;MARK NOT WRITTEN
 LDAIY GNCBPT
 ANDIM 3
 STAIY GNCBPT
 [ 1=0 ;**23/1/87** never use sector zero this way
 LDA RBDA
 ORA RBDA+1
 ORA RBDA+2 ;IF SECTOR ZERO CALCULATE CHECKSUM
 BNE #40
 LDA GNCBPT
 PHA
 LDA GNCBPT+1
 PHA
 LDA DCSTAD
 STA GNCBPT
 LDA DCSTAD+1
 STA GNCBPT+1
 LDYIM &FF
 TYA
 STAIY GNCBPT
 LDAIM 0
 CLC
30 ADCIY GNCBPT
 DEY
 BNE #30
 ADCIY GNCBPT
 DEY
 STAIY GNCBPT
 PLA
 STA GNCBPT+1
 PLA
 STA GNCBPT
 ]
40 JMP XFER ;Transfer block, exit cc still set

 ]
;
; AGE ALL CHAIN ENTRIES
;
; ON ENTRY
;      GNCBPT POINTS TO RELEVANT CACHE DESCRIPTOR
;      NCBDB HOLDS NUMBER OF ENTRIES
;
CAAGE ROUT
 LDA GNCBPT
 PHA ; SAVE THE POINTER
 LDA GNCBPT+1
 PHA
 LDX NCBDB
10 LDYIM CBAGE ; GET CURRENT AGE
 LDAIY GNCBPT
 [ $CMOS
 INCA ;INCREMENT
 |
 ADCIM 1 ;INCREMENT
 ] 
 STAIY GNCBPT
 DEX
 BEQ #20 ;CHECK FOR END
 JSR ADGNCB
 [ $CMOS
 BRA #10 ;LOOK AT NEXT
 |
 JMP #10 ;LOOK AT NEXT
 ]
 
20 PLA ;GET POINTER BACK
 STA GNCBPT+1
 PLA
 STA GNCBPT
 RTS
;
; GET A FREE SPACE FOR A BLOCK
;
; ON ENTRY
;      GNCBPT POINTS TO START OF CONTROL BLOCK
;      NCBDB HOLDS NUMBER OF CONTROL BLOCK ENTRIES
;
; ON EXIT
;      GNCBPT POINTS TO VACANT ENTRY
;
; USES CBSTA,CBTPPT
;
GETFR ROUT
 LDA GNCBPT
 PHA
 LDA GNCBPT+1
 PHA
 LDX NCBDB
 LDAIM &FF
 STA CBSTA ;CURRENT YOUNGEST
 [ $CMOS
 STZ CBTPPT ;CURRENT POINTER TO YOUNGEST
 STZ CBTPPT+1
 |
 LDAIM 0
 STA CBTPPT ;CURRENT POINTER TO YOUNGEST
 STA CBTPPT+1
 ]
10 LDYIM CAFLG
 LDAIY GNCBPT
 [ $CMOS
 BITIM 4 ;**25/12/86** check if written
 BEQ #20
 BITIM 2 ;**25/12/86** check if locked
 |
 ANDIM 4 ;check if written
 BEQ #20
 LDAIY GNCBPT
 ANDIM 2 ;check if locked
 ]
 BNE #20
 LDYIM CBAGE
 LDAIY GNCBPT
 CMP CBSTA
 BCS #20
 STA CBSTA
 LDA GNCBPT
 STA CBTPPT
 LDA GNCBPT+1
 STA CBTPPT+1
20 JSR ADGNCB
 DEX
 BNE #10
 LDA CBTPPT
 STA GNCBPT
 ORA CBTPPT+1
 BEQ #30
 LDA CBTPPT+1
 STA GNCBPT+1
 JSR WRBLK
 BEQ #30
 LDAIM 1
 [ $CMOS
 TSB ERRTYP
 |
 ORA ERRTYP
 STA ERRTYP
 ] 
30 PLA
 STA GNCBPT+1
 PLA
 STA GNCBPT
 LDX NCBDB ;NUMBER OF ENTRIES
 [ $CMOS
 STZ CBSTA ;CURRENT OLDEST
 STZ CBTPPT ;CURRENT POINTER TO OLDEST
 STZ CBTPPT+1
 |
 LDAIM 0
 STA CBSTA ;CURRENT OLDEST
 STA CBTPPT ;CURRENT POINTER TO OLDEST
 STA CBTPPT+1
 ]
40 LDYIM CAFLG
 LDAIY GNCBPT
 RORA ;Test bit 0
 BCS #50
 LDXIM 1 ;FREE AREA SO FOOL INTO THINKING ITS END
 [ $CMOS
 BRA #60
 |
 BNE #60
 ]
 
50 RORA
 BCS #70
 LDYIM CBAGE
 LDAIY GNCBPT
 CMP CBSTA
 BCC #70
 STA CBSTA
60 LDA GNCBPT
 STA CBTPPT
 LDA GNCBPT+1
 STA CBTPPT+1
70 DEX
 BEQ #80
 JSR ADGNCB ;LOOK AT NEXT ENTRY
 [ $CMOS
 BRA #40
 |
 JMP #40
 ]
 
80 LDA CBTPPT ;CHECK IF ANYTHING FOUND
 ORA CBTPPT+1
 BEQ #95
 LDA CBTPPT ;SAVE ADDRESS
 STA GNCBPT
 LDA CBTPPT+1
 STA GNCBPT+1
 LDYIM CAFLG ;CHECK IF ALLOCATED
 LDAIY GNCBPT 
 RORA
 BCC #90
 RORA
 RORA ;CHECK IF IT HAS BEEN WRITTEN TO
 BCC #90
 JSR WRBLK
 BEQ #90
 LDAIM 1
 [ $CMOS
 TSB ERRTYP
 |
 ORA ERRTYP
 STA ERRTYP
 ]
90 LDAIM 0
 LDYIM CAFLG
 STAIY GNCBPT
 RTS

95 LDAIM MPERRM ;FLAG ERROR
 RTS
;
; SET THE WRITTEN BIT IN THE GIVEN CACHE DESCRIPTOR
; THE STORE ADDRESS IS GIVEN
;
; ON ENTRY
;     GNCBPT POINTS TO RELEVANT CACHE DESCRIPTORS
;     NCBDB  HOLDS NUMBER OF DESCRIPTORS
;     CBSTA  HOLDS STORE ADDRESS OF BLOCK
;
; ON EXIT
;     Z NON-ZERO IF FAILED
;
;
CASTWB ROUT
 LDX NCBDB ;GET NUMBER OF DESCRIPTORS
10 LDYIM CBSA ;CHECK ADDRESS
 LDAIY GNCBPT
 CMP CBSTA
 BNE #20 ;GO TO CHECK NEXT
 INY
 LDAIY GNCBPT
 CMP CBSTA+1
 BEQ #30
20 DEX ;CHECK FOR END
 BEQ #40
 JSR ADGNCB
 [ $CMOS
 BRA #10
 |
 JMP #10
 ]
 
30 LDYIM CAFLG
 LDAIY GNCBPT ;SET WRITTEN BIT
 ORAIM 4 ;WRITTEN BIT
 STAIY GNCBPT
 LDYIM CBAGE
 LDAIM 0
 STAIY GNCBPT
 RTS ;Exit A=0, success

40 LDAIM 1
 RTS ;NOT FOUND
;
; ENSURE ALL CACHED BLOCKS
;
; ON ENTRY
;     GNCBPT POINTS TO CACHE DESCRIPTORS
;     NCBDB  HOLDS NUMBER OF DECRIPTORS
;
ENSBKS ROUT
 LDX NCBDB ;NUMBER
10 LDYIM CAFLG
 LDAIY GNCBPT
 ANDIM 4 ;WRITTEN FLAG
 BEQ #40 ;DON'T WRITE OUT IF NOT WRITTEN
 [ $CMOS
 PHX
 |
 TXA
 PHA
 ] 
 LDYIM CBSA
 LDAIY GNCBPT
 STA GENPTR
 INY
 LDAIY GNCBPT
 STA GENPTR+1
 LDYIM 16
20 LDAIY GENPTR ;SAVE SOME OF BLOCK
 STAAY DATARA
 DEY
 BPL #20
 JSR WRBLK
 BEQ #30
 LDAIM 1
 [ $CMOS
 TSB ERRTYP
 BRA #35 ;**26/2/87** Return now if any error
 |
 ORA ERRTYP
 STA ERRTYP
 BNE #35 ;**26/2/87** Return now if any error
 ]
 
30 JSR CHECKB
 [ $CMOS
35 PLX
 |
35 PLA
 TAX
 ] 
40 JSR ADGNCB
 DEX
 BNE #10
 RTS
;
; CHECK BLOCK JUST WRITTEN FOR VALIDITY
;
CHECKB ROUT
 JSR RDBLK
 BNE #30
 LDYIM CBSA
 LDAIY GNCBPT
 STA GENPTR
 INY
 LDAIY GNCBPT
 STA GENPTR+1
 LDYIM 16
10 LDAIY GENPTR
 CMPAY DATARA
 BNE #20
 DEY
 BPL #10
 RTS

20 LDAIM &F8
 JSR INTERR
30 CLC
 RTS
;
; MAKE GNCBPT POINT TO NEXT ENTRY
;
ADGNCB ROUT
 CLC
 LDA GNCBPT
 ADCIM CBSZ
 STA GNCBPT
 BCC #10
 INC GNCBPT+1
10 RTS
;
; MARK WRITTEN BIT IN SPECIFIED CACHE DESCRIPTOR
;
; ON ENTRY
;     CBSTA POINTS TO ADDRESS IN MEMORY
;
MBMWT ROUT
 LDA BMCBPT ;GET POINTERS TO BIT MAP
 STA GNCBPT
 LDA BMCBPT+1
 STA GNCBPT+1
 LDAIM NOBTMP
 STA NCBDB
 JSR CASTWB
 BEQ #10
 LDAIM &F5
 JSR INTERR
10 RTS
;
; MARK WRITTEN BIT IN SPECIFIED MAP BLOCK
;
; ON ENTRY
;      CBSTA POINTS TO MAP BLOCK
;
;
MMBWT ROUT
 LDA CBSTA
 STA GNCBPT
 LDA CBSTA+1
 STA GNCBPT+1
 LDYIM MBSQNO
 [ $CMOS
 LDAIY GNCBPT
 INCA
 STAIY GNCBPT
 |
 CLC 
 LDAIY GNCBPT
 ADCIM 1
 STAIY GNCBPT
 ]
 CLC
 LDA GNCBPT
 ADCIM :LSB:LSTSQ
 STA GNCBPT
 LDA GNCBPT+1
 ADCIM :MSB:LSTSQ
 STA GNCBPT+1
 [ $CMOS
 LDAI GNCBPT
 INCA
 STAI GNCBPT
 |
 LDYIM 0
 CLC
 LDAIY GNCBPT
 ADCIM 1
 STAIY GNCBPT
 ] 
 JSR SETMB
 JMP CASTWB

;
; ENSURE BIT MAPS
;
ENSBM ROUT
 LDA BMCBPT
 STA GNCBPT
 LDA BMCBPT+1
 STA GNCBPT+1
 LDAIM NOBTMP
 STA NCBDB
 JMP ENSBKS

;
; ENSURE MAP BLOCKS
;
ENSMB ROUT
 JSR SETMB
 JMP ENSBKS

;
; FIND THE SPECIFIED MAP BLOCK
;
; CBSIN HOLDS THE SIN
;
; C SET IF FOUND
;
FNDMB ROUT
 LDA MBCBPT
 STA GNCBPT
 LDA MBCBPT+1
 STA GNCBPT+1
 LDAIM NOMPBK
 STA NCBDB
 JMP FNDBLK

;
; LOCK IN STORE
;
; BLOCK WHOSE STORE ADDRESS IS IN CBSTA
; GNCBPT POINTS TO CACHE BLOCKS
; NCBDB NUMBER OF DESCRIPTORS
;
; NON-ZERO IF NOT FOUND
;
LOCKIS ROUT
 LDX NCBDB
10 LDYIM CBSA
 LDAIY GNCBPT
 CMP CBSTA
 BNE #20
 INY
 LDAIY GNCBPT
 CMP CBSTA+1
 BEQ #30
20 JSR ADGNCB
 DEX
 BNE #10
 LDAIM 1
 RTS

30 LDYIM CAFLG
 LDAIY GNCBPT
 ORAIM 2 ;LOCK IN STORE
 STAIY GNCBPT
 LDAIM 0
 RTS
;
; UNLOCK ALL BLOCKS
;
; NCBDB HOLDS NUMBER OF BLOCKS
; GNCBPT POINTS TO LIST
;
UNLKBS ROUT
 LDX NCBDB
 LDYIM CAFLG
10 LDAIY GNCBPT
 ANDIM &FD ;UNLOCK BLOCK
 STAIY GNCBPT
 JSR ADGNCB
 DEX
 BNE #10
 RTS
;
;
; MARK MAP BLOCK LOCKED
;
; MPMBPT HOLDS STORE ADDRESS OF MAP BLOCK
; NON-ZERO IF FAILED
;
MMBLKD ROUT
 JSR SETMB
 LDA MPMBPT
 STA CBSTA
 LDA MPMBPT+1
 STA CBSTA+1
 [ $CMOS
 BRA LOCKIS
 |
 JMP LOCKIS
 ]
 ;
; MARK BIT MAP LOCKED
;
; MPscor POINTS TO BIT MAP
;
;
MBMLKD ROUT
 JSR SETBM
 LDA MPscor ;**23/1/87**
 STA CBSTA
 LDA MPscor+1
 STA CBSTA+1
 [ $CMOS
 BRA LOCKIS
 |
 JMP LOCKIS
 ]
 ;
; UNLOCK ALL MAP BLOCKS
;
ULMB ROUT
 JSR SETMB
 [ $CMOS
 BRA UNLKBS
 |
 JMP UNLKBS
 ]
 ;
; UNLOCK ALL BIT MAPS
;
ULBM ROUT
 JSR SETBM
 [ $CMOS
 BRA UNLKBS
 |
 JMP UNLKBS
 ]
 ;
; SET VALUES FOR BIT MAP
;
SETBM ROUT
 LDA BMCBPT
 STA GNCBPT
 LDA BMCBPT+1
 STA GNCBPT+1
 LDAIM NOBTMP
 STA NCBDB
 RTS
;
; SET VALUES FOR MAP BLOCKS
;
SETMB ROUT
 LDA MBCBPT
 STA GNCBPT
 LDA MBCBPT+1
 STA GNCBPT+1
 LDAIM NOMPBK
 STA NCBDB
 RTS


 LNK UADE14

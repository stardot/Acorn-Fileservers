 OPT UADE13 ;> Uade13
 TTL File server file UADE13

;FNDMAP:
;SEARCHES MAPTB LOOKING FOR DISC NUMBER
;WHICH IS IN ARGB AND ARGC. WHEN
;FOUND LEAVES A POINTER TO THE CORRECT ENTRY IN MAPPTR & MAPENT.
;NOTE THAT MAPENT IS USED BY DSCMAN & SHOULD
;NOT BE ALTERED BY MAPMAN.

FNDMAP ROUT
 [ $CMOS
 STZ MPDRVE
 STZ DRIVNO
 |
 LDAIM 0
 STA MPDRVE
 STA DRIVNO
 ]
 LDA MAPTB ;START OF MAP TABLE
 STA MAPPTR ;LOOK AT FIRST ENTRY
 LDA MAPTB+1
 STA MAPPTR+1
 [ $Level3
 LDXIM 0 ;X HOLDS DRIVE NUMBER
 ]
10 LDYIM MPDCNO ;OFFSET TO DISC NUMBER
 LDAIY MAPPTR
 LDYIM ARGB
 CMPIY ARGPTR ;SEE IF ITS CORRECT DISC NUMBER
 BNE #20
 LDYIM MPDCNO+1
 LDAIY MAPPTR
 LDYIM ARGC
 CMPIY ARGPTR
 BEQ #30 ;BRANCH IF DISC NUMBER MATCHES
20 INC MPDRVE ; ** 14/06/86 ** drive numbers contiguous
 JSR MPADMP ;GET NEXT ENTRY
 INC DRIVNO
 LDA DRIVNO
 CMP DRIVES ;CHECK FOR END
 BNE #10 ;BRANCH IF NOT AT END
;IF WE REACH HERE THE DISC WAS NOT FOUND
 LDAIM MPERRA
 RTS

30 LDYIM MPNOCY ;Check no leg pull ** 14/06/86 **
 LDAIY MAPPTR
 INY
 ORAIY MAPPTR ;by non-zero cyl count ** 14/06/86 **
 BEQ #20
 LDA MAPPTR
 STA MAPENT
 LDA MAPPTR+1
 STA MAPENT+1 ;MAPENT := PTR TO MAPTB ENTRY
 LDAIM 0 ;SUCESSFUL SO ZERO RC
 RTS

;CHECK MAP SIZE
;
;CHECKS THAT NEW CYLINDER MAP SIZE IS NOT GREATER THAN OLD
;
;SECTOR TWO INFO POINTED TO BY MPSCPT,
;MAP TABLE ENTRY BY MAPPTR
;
CHMPSZ ROUT
 LDYIM MPNOCY+1
 LDAAY MAPTBF
 PHA
 DEY
 LDAAY MAPTBF
 PHA ;GET OLD NUMBER OF CYLINDERS
 LDYIM MPNOCY ;SECTOR TWO NO. CYLINDERS
 PLA
 CMPIY MAPPTR
 PLA
 INY
 SBCIY MAPPTR
 LDAIM 0
 BCS #10 ;OLD MAP >= NEW MAP
 LDAIM MPERRI
10 RTS


;
;
;FIND SIZE OF NEW MAP AND SAVE IT
;
;
MPMPSZ ROUT
 LDYIM MPSECS ;NO. OF SECTORS ON DISC
 LDAIY MAPPTR
 STA MPTMPC ;SAVE IT
 INY
 LDAIY MAPPTR
 STA MPTMPC+1
 INY
 LDAIY MAPPTR
 STA MPTMPC+2
 [ $CMOS
 STZ MPTMPA
 STZ MPTMPA+1
 STZ MPTMPA+2
 |
 LDAIM 0
 STA MPTMPA
 STA MPTMPA+1
 STA MPTMPA+2
 ] 
 LDYIM MPDSCS
 LDAIY MAPPTR
 TAX
10 CLC
 LDA MPTMPA
 ADC MPTMPC
 STA MPTMPA
 LDA MPTMPA+1
 ADC MPTMPC+1
 STA MPTMPA+1
 LDA MPTMPA+2
 ADC MPTMPC+2
 STA MPTMPA+2
 DEX
 BNE #10
 LDYIM MPSCTT
 LDA MPTMPA
 STAIY MAPPTR
 INY
 LDA MPTMPA+1
 STAIY MAPPTR
 INY
 LDA MPTMPA+2
 STAIY MAPPTR
 RTS
;
;DELETE THE RELEVANT OBJECT
;
MPDLTE LDYIM ARGD ;GET SIN
 LDAIY ARGPTR
 STA MPTMPA
 INY
 LDAIY ARGPTR
 STA MPTMPA+1
 INY
 LDAIY ARGPTR
 STA MPTMPA+2
 LDAIM :LSB:MBENTS ;GET OFFSET TO START
 STA MPSCPT
 LDAIM :MSB:MBENTS
 STA MPSCPT+1
 LDAIM 1 ;FLAG CURRENT MAP BLOCK TO BE DELETED
 STA MPTMPE
 STA SAVSC ;STOP EXTRA WORK
 JMP CLRBLK ;REMOVE ALL ENTRIES
;
;INCREMENT MAPPTR TO NEXT MAPTB ENTRY
;

MPADMP ROUT
 CLC
 LDAIM MPTBSZ
 ADC MAPPTR
 STA MAPPTR
 BCC #10
 INC MAPPTR+1
10 RTS

DIVIDE ROUT
 JSR DVDE ;CONVERT TO OLD DIVIDE
 SEC
 LDA DIVTMP
 SBCIM 1
 STA DIVPAR
 LDA DIVTMP+1
 SBCIM 0
 STA DIVPAR+1
 LDA DIVTMP+2
 SBCIM 0
 STA DIVPAR+2
 RTS

;ADD NAME TABLE ENTRY LENGTH TO
;DNMPTR.

INAMPT ROUT
 CLC
 LDAIM NTENSZ
 ADC DNMPTR
 STA DNMPTR
 BCC #00
 INC DNMPTR+1
00 RTS


;DIVIDE SECTORS
;
;  CALCULATES A CYLINDER NUMBER FROM A SIN
;
;ON ENTRY
;      MPTMPA HOLDS THE SIN
;
;ON EXIT
;      MPTMPB HOLDS THE CYLINDER
;
;USES MPTMPA
;
 [ $CMOS
DIVSEC STZ MPTMPB
 STZ MPTMPB+1 ;CLEAR VARIABLE
 |
DIVSEC LDAIM 0
 STA MPTMPB
 STA MPTMPB+1 ;CLEAR VARIABLE
 ] 
10 LDYIM MPSPCY
 SEC
 LDA MPTMPA
 SBCIY MAPPTR ;DIVIDE BY SECTORS PER CYLINDER
 STA MPTMPA
 INY
 LDA MPTMPA+1
 SBCIY MAPPTR
 STA MPTMPA+1
 LDA MPTMPA+2
 SBCIM 0
 STA MPTMPA+2
 BCC #00
 INC MPTMPB
 BNE #10
 INC MPTMPB+1
 [ $CMOS
 BRA #10
 |
 JMP #10
 ]
 

;TAKE TEXT DISC NAME FROM DNMBUF
;AND PUT IN NAME TABLE ENTRY AT
;DNMPTR. ALSO PUT IN NEW DISC NUMBER
;FROM NXTDNO, AND MARK ENTRY IN USE.
;DISC NO. ALSO PLACED IN MAP TABLE ENTRY
;POINTED TO BY MAPPTR.

;ALSO INCREMENT NXTDNO !!

SDSCNM ROUT
 LDYIM NTNAME
 LDXIM 0

10 LDAAX DNMBUF
 STAIY DNMPTR
 INY
 INX
 CPXIM DNAMLN
 BNE #10

 LDYIM NTDNO
 LDA NXTDNO
 PHA
 STAIY DNMPTR ;SET DISC NO. LO
 INY
 LDA NXTDNO+1
 STAIY DNMPTR

 LDYIM MPDCNO+1
 STAIY MAPPTR ;DISC NO. IN MAP TABLE
 DEY
 PLA
 STAIY MAPPTR

 LDYIM NTUSED
 LDAIM USED
 STAIY DNMPTR

 INC NXTDNO
 BNE #20
 INC NXTDNO+1
20 LDAIM 0
 RTS

;
;SET UP CYLINDER MAP FOR CURRENT DISC
;
MPSTCY ROUT
 LDAIM 1
 STA RSTFLG
 LDYIM MPCYMP
 CLC
 LDAIY MAPPTR
 ADCIM 3 ;TO POINT AT ACTUAL ENTRIES
 STA MPCYPT
 INY
 LDAIY MAPPTR
 ADCIM 0
 STA MPCYPT+1
 [ $CMOS
 STZ MPTMPC
 STZ MPTMPC+1
 STZ MPTMPA+2 ;** 21/11/84 **
 |
 LDAIM 0
 STA DDRSZE+2
 STA MPTMPC
 STA MPTMPC+1
 STA MPTMPA+2 ;** 21/11/84 **
 ]
10 LDYIM MPSCYL
 LDA MPTMPC
 CMPIY MAPPTR
 INY
 LDA MPTMPC+1
 SBCIY MAPPTR
 BCS #20
 LDAIM 0
 TAY
 STAIY MPCYPT
 INY
 STAIY MPCYPT
 CLC
 LDA MPCYPT
 ADCIM 2
 STA MPCYPT
 BCC #15
 INC MPCYPT+1
15 INC MPTMPC
 BNE #10
 INC MPTMPC+1
 [ $CMOS
 BRA #10
 |
 JMP #10
 ]
 
20 STA MPTMPB
 STA MPTMPB+1
 STA MPTMPB+2
 [ $CMOS
25 STZ MPTMPA ;LOOP TO READ IN BIT MAPS
 STZ MPTMPA+1
 |
25 LDAIM 0
 STA MPTMPA ;LOOP TO READ IN BIT MAPS
 STA MPTMPA+1
 ] 

 LDA MPTMPA+2 ;check not skipping
 BEQ #30
 DEC MPTMPA+2 ;counter for maps to skip
 [ $CMOS
 BRA #60
 |
 JMP #60
 ]
 
30 JSR RDBTMP

 LDYIM MP1BIT
 LDAIY MAPPTR ;**23/1/87** no valid flag if packed map
 BNE #32
 LDYIM MPVAL ;check that subsequent maps are valid
 LDAIY MPSCPT ;** 21/11/84 **
 STA MPTMPA+2 ;save this flag [n<>0 => skip n maps]

32 LDYIM MPSPCY
 LDAIY MAPPTR
 STA MAPTMP
 INY
 LDAIY MAPPTR
 STA MAPTMP+1 ;SECTORS PER CYCLINDER
35 LDXIM 8 ;EIGHT BITS PER BYTE
 LDYIM 0
 LDAIY MPSCPT
40 RORA ;CHECK IF SECTOR FREE
 BCC #45 ;CLEAR IF ALLOCATED
 INC MPTMPA ;COUNT OF FREE SECTORS
 BNE #45
 INC MPTMPA+1
45 PHA
 LDA MAPTMP ;TO CHECK FOR END OF MAP
 BNE #47
 DEC MAPTMP+1
47 DEC MAPTMP
 LDA MAPTMP+1
 ORA MAPTMP
 BEQ #50 ;BRANCH IF END OF MAP
 PLA
 DEX ;FOR END OF BYTE
 BNE #40
 INC MPSCPT ;INCREMENT POINTER TO BIT MAP
 BNE #35
 INC MPSCPT+1
 [ $CMOS
 BRA #35 ;TO LOOK AT NEXT BIT
 |
 JMP #35 ;TO LOOK AT NEXT BIT
 ]
 
50 PLA ;REMOVE SAVED REG.
60 LDA MPTMPA
 STAIY MPCYPT ;SAVE COUNT OF FREE SECTORS
 CLC
 ADC MPTMPB ;SAVE TOTAL
 STA MPTMPB
 INY
 LDA MPTMPA+1
 STAIY MPCYPT
 ADC MPTMPB+1
 STA MPTMPB+1
 BCC #63
 INC MPTMPB+2
63 CLC ;MOVE POINTER TO NEXT ENTRY
 LDA MPCYPT
 ADCIM 2
 STA MPCYPT
 BCC #66
 INC MPCYPT+1
66 INC MPTMPC
 BNE #70
 INC MPTMPC+1
70 LDYIM MPNOCY ;CHECK FOR END OF DISC
 LDA MPTMPC
 CMPIY MAPPTR
 INY
 LDA MPTMPC+1
 SBCIY MAPPTR
 BCS #80
 JMP #25

80 LDYIM MPCYMP ;END OF MAPS SO SAVE TOTAL COUNT
 LDAIY MAPPTR
 STA MPSCPT
 INY
 LDAIY MAPPTR
 STA MPSCPT+1
 LDYIM 0
 LDA MPTMPB
 STAIY MPSCPT
 INY
 LDA MPTMPB+1
 STAIY MPSCPT
 INY
 LDA MPTMPB+2
 STAIY MPSCPT
 LDAIM 0
 STA RSTFLG
 RTS

;FIND SIZE OF OBJECT
;
;ON ENTRY
;     MPMBPT POINTS TO MAP BLOCK
;     ARGD holds SIN of MAP root
;
;ON EXIT
;     MPTMPA HOLDS NUMBER OF BYTES
;     MPTMPD HOLDS NUMBER OF BLOCKS
;
;
MPGTSZ ROUT
 [ $CMOS
 STZ MPTMPD
 STZ MPTMPD+1
 STZ MPTMPD+2 ;ZERO BLOCK COUNT
 |
 LDAIM 0
 STA MPTMPD
 STA MPTMPD+1
 STA MPTMPD+2 ;ZERO BLOCK COUNT
 ] 
10 LDAIM :LSB:MBENTS
 STA MPTMPB
 LDAIM :MSB:MBENTS
 STA MPTMPB+1 ;OFFSET
20 ;ADD UP NEXT ENTRY
 CLC
 LDA MPMBPT
 ADC MPTMPB
 STA MPSCPT
 LDA MPMBPT+1
 ADC MPTMPB+1
 STA MPSCPT+1
 LDYIM 0
 LDAIY MPSCPT
 INY
 ORAIY MPSCPT
 INY
 ORAIY MPSCPT
 BEQ #50
 LDA MPTMPB
 CMPIM :LSB:LSTENT
 LDA MPTMPB+1
 SBCIM :MSB:LSTENT
 BCS #30
 LDYIM 3
 CLC
 LDA MPTMPD
 ADCIY MPSCPT
 STA MPTMPD
 INY
 LDA MPTMPD+1
 ADCIY MPSCPT
 STA MPTMPD+1
 BCC #25
 INC MPTMPD+2
25 CLC
 LDA MPTMPB
 ADCIM ENSZ
 STA MPTMPB
 BCC #20
 INC MPTMPB+1
 [ $CMOS
 BRA #20
 |
 JMP #20
 ]
 
30 ;GET NEXT MAP BLOCK
 LDYIM 0
 LDAIY MPSCPT
 STA MPTMPA
 INY
 LDAIY MPSCPT
 STA MPTMPA+1
 INY
 LDAIY MPSCPT
 STA MPTMPA+2
 CLC
 JSR RDMPBK
 BEQ #40
35 LDAIM MPERRC
 RTS

40 LDA MAPTMP
 STA MPMBPT
 LDA MAPTMP+1
 STA MPMBPT+1
 JMP #10

50 JSR RDmpbd ;**8/5/87** Read block at ARGD
 BNE #35
 LDA MAPTMP
 STA MPMBPT
 LDA MAPTMP+1
 STA MPMBPT+1

 ;CALCULATE BYTES FROM BLOCKS
 LDA MPTMPD ;NUMBER OF BLOCKS
 STA MPTMPB
 LDA MPTMPD+1
 STA MPTMPB+1
 LDA MPTMPD+2
 STA MPTMPB+2
 [ $CMOS
 STZ MPTMPA ;ZERO BYTE COUNT
 STZ MPTMPA+1
 STZ MPTMPA+2
 |
 LDAIM 0
 STA MPTMPA ;ZERO BYTE COUNT
 STA MPTMPA+1
 STA MPTMPA+2
 ]
 LDA MPTMPD
 ORA MPTMPD+1
 ORA MPTMPD+2
 BEQ #90
60 LDA MPTMPB
 BNE #62
 LDA MPTMPB+1
 BNE #61
 DEC MPTMPB+2
61 DEC MPTMPB+1
62 DEC MPTMPB
 LDA MPTMPB+2
 ORA MPTMPB+1
 ORA MPTMPB
 BEQ #70
 JSR #95 ; MPTMPA := MPTMPA+BTINBK
 [ $CMOS
 BRA #60
 |
 JMP #60
 ]
 
70 ;GET BYTES IN LAST BLOCK
 LDYIM BILB
 LDAIY MPMBPT
 INY
 ORAIY MPMBPT
 BNE #80
 JSR #95 ;MPTMPA := MPTMPA+BTINBK
 [ $CMOS
 BRA #90
 |
 JMP #90
 ]
 
80 LDYIM BILB
 CLC
 LDA MPTMPA
 ADCIY MPMBPT
 STA MPTMPA
 INY
 LDA MPTMPA+1
 ADCIY MPMBPT
 STA MPTMPA+1
 BCC #90
 INC MPTMPA+2
90 LDAIM 0
 RTS

95 CLC ; MPTMPA := MPTMPA+BTINBK
 LDA MPTMPA
 ADCIM :LSB:BTINBK
 STA MPTMPA
 LDA MPTMPA+1
 ADCIM :MSB:BTINBK
 STA MPTMPA+1
 BCC #99
 INC MPTMPA+2
99 RTS

;CHDNAM

;LOOK UP DISC NAME IN SECTOR ZERO INFO
;POINTED TO BY MPSCPT.
;IF FOUND, AND ENTRY IN USE -> ERROR
;IF FOUND, ENTRY NOT IN USE, MARK IN USE
;AND SET MAP TABLE ENTRY DISC NO. FROM TABLE
;IF NOT FOUND, CHUCK OUT LRU DISC NO. NOT
;CURRENTLY IN USE, INSERT NEW NAME AND GIVE IT
;A NEW DISC NUMBER (FROM NXTDNO). MARK ENTRY IN USE.
;SET DISC NO. IN MAP TABLE

;ON ENTRY MAPPTR -> MAP TABLE ENTRY


CHDNAM ROUT
 JSR FNDDSC ;EXIT WITH DNMPTR POINTING TO ENTRY
 BNE #20 ;NOT FOUND, THROW AN ENTRY OUT

;IF HERE, DISC FOUND. IF IN USE, THEN ERROR
;COZ => TWO DISCS OF SAME NAME IN USE
;ON SAME SYSTEM. IF NOT IN USE, RETURN
;DISC NUMBER.

 LDYIM NTUSED
 LDAIY DNMPTR
 BNE #10 ;NOT IN USE, OK

 LDAIM MPERRJ
 RTS ;ERROR

10 LDYIM NTDNO
 LDAIY DNMPTR
 PHA
 INY
 LDAIY DNMPTR

;NOW SET MAP TABLE ENTRY

 LDYIM MPDCNO+1
 STAIY MAPPTR
 DEY
 PLA
 STAIY MAPPTR

;MARK NAME TABLE ENTRY IN USE

 LDYIM NTUSED
 LDAIM USED
 STAIY DNMPTR

 [ $CMOS
 BRA #30 ;FOUND FINISH
 |
 JMP #30 ;FOUND FINISH
 ]
 

20 JSR LRUDSC

;NOW DNMPTR => LRU NAME ENTRY

 JSR SDSCNM

30 LDAIM 0
 RTS ;EXIT


;MOVE DISC NAME FROM SEC. ZERO
;TO DNMBUF.

MOVDNM ROUT
 LDXIM 0
 LDYIM MPSZNM
10 LDAIY MPSCPT
 STAAX DNMBUF
 INY
 INX
 CPXIM DNAMLN
 BNE #10
 RTS


;FNDDSC

;ENTRY: MPSCPT -> SECTOR ZERO INFO, INCLUDING DISC NAME

;EXIT:  DNMPTR -> NAME TABLE ENTRY IF FOUND
;Z FLAG SET IF FOUND

;SIDE EFFECT: DISC NAME MOVED TO DNMBUF

FNDDSC ROUT
 JSR MOVDNM ;MOVE DISC NAME TO DNMBUF

FNDNAM LDA NAMETB
 STA DNMPTR
 LDA NAMETB+1
 STA DNMPTR+1 ;SET P.0 POINTER
 LDAIM NTSIZE ;NO. OF ENTRIES IN NAMTAB
 STA TEMPA

10 LDYIM NTNAME ;NAMTAB OFFSET
 LDXIM 0
20 LDAIY DNMPTR
 EORAX DNMBUF ;Compare
 ANDIM &DF ;Force cases
 BNE #30
 INX
 INY
 CPXIM DNAMLN
 BNE #20
 RTS

;IF HERE, NAME FOUND, Z SET.

30 DEC TEMPA
 BEQ #40 ;SEARCH FINISHED, NOT FOUND
 JSR INAMPT ;SET DNMPTR TO POINT TO NEXT ENTRY
 [ $CMOS
 BRA #10 ;DO NEXT ENTRY
 |
 JMP #10 ;DO NEXT ENTRY
 ]
 
40 LDAIM MPERRK ;UNSET Z FLAG
 RTS



;LRUDSC

;SEARCH NAME TABLE FOR LRU ENTRY

;ON EXIT DNMPTR -> LRU ENTRY

LRUDSC ROUT
 LDA NAMETB
 STA GENPTR
 LDA NAMETB+1
 STA GENPTR+1

 LDAIM &FF
 STA TEMPA ;USED TO KEEP PARTIAL RESULT
 LDXIM NTSIZE ;NO. OF ENTRIES

10 LDYIM NTUSED ;OFFSET OF USE FLAG
 LDAIY GENPTR
 BEQ #20 ;IN USE -> NO GOOD

 CMP TEMPA
 BCS #20 ;TABLE ENTRY>=TEMPA, CONTINUE

 STA TEMPA ;NEW PARTIAL RESULT
 LDA GENPTR
 STA DNMPTR ;SET POINTER TO PARTIAL RESULT ENTRY
 LDA GENPTR+1
 STA DNMPTR+1

20 DEX
 BEQ #30 ;ALL ENTRIES DONE, FINISH

 CLC
 LDAIM NTENSZ
 ADC GENPTR
 STA GENPTR
 BCC #10
 INC GENPTR+1
 [ $CMOS
 BRA #10
 |
 JMP #10
 ]
 
30 RTS



;DDNAME
 [ 1=0
;DELETE DISC NAME POINTED TO BY
;DNMPTR.
;PUT $80 IN FIRST CHAR. OF NAME SO
;IT WON'T BE RECOGNISED AND SET
;USED FLAG TO UNUSED.

DDNAME ROUT
 LDYIM NTNAME
 LDAIM &80
 STAIY DNMPTR
 LDYIM NTUSED
 LDAIM UNUSED
 STAIY DNMPTR
 RTS
 ]

;FNDDNO
;LOOK UP CURDNO IN NAMETABLE.
;EXIT: NAMTAB -> ENTRY, Z SET IF FOUND

FNDDNO ROUT
 JSR SDNMPT
 LDXIM NTSIZE-1

10 LDYIM NTDNO
 LDA CURDSC
 CMPIY DNMPTR
 BNE #20
 INY
 LDA CURDSC+1
 CMPIY DNMPTR
 BEQ #30 ;FOUND, FINISH

20 JSR INAMPT ;MOVE DNMPTR
 DEX
 BPL #10

30 RTS



;AGENTB
;AGE ALL ENTRIES NOT IN USED IN THE
;DISC NAME TABLE

AGENTB ROUT
 JSR SDNMPT
 LDXIM NTSIZE
 LDYIM NTUSED
10 LDAIY DNMPTR
 BEQ #20 ;IN USE, DON'T AGE
 [ $CMOS
 DECA ;AGE
 |
 SEC
 SBCIM 1 ;AGE
 ] 
 STAIY DNMPTR
20 JSR INAMPT
 DEX
 BNE #10
 RTS


SDNMPT LDA NAMETB
 STA DNMPTR
 LDA NAMETB+1
 STA DNMPTR+1
 RTS


;CHECK SECTOR ZERO INFO (POINTED TO BY MPSCPT) IS FOR A VALID FS DISC
;If a Winchester, check for suitable company copyright.

TAGTAB = "AFS0"

CHKDSC ROUT
 [ $CMOS
 LDA MPdrve ;**23/1/87** Check if Winnie
 CMPIM 4
 BCS #00 ;br if floppy
 LDXIM CAcopy
 JSR OSrdad ;**23/3/88** find if check to be done
 BNE #00
 LDAIM &25 ;check user page A
 LDXIM :LSB:CAcorn
 LDYIM :MSB:CAcorn
 JSR #50
 BNE #30
 LDAIM &26 ;check user page B
 LDXIM :LSB:(CAcorn+4)
 LDYIM :MSB:(CAcorn+4)
 JSR #50
 BNE #30
 ]
 
00 LDYIM MPDRNM+3 ;POINTER TO NAME
 LDXIM 4
10 LDAAX TAGTAB-1
 CMPIY MPSCPT
 BNE #30
 DEY
 DEX
 BNE #10 ;IF EQ, DROP THROUGH AND EXIT, Z SET
20 RTS

30 LDAIM MPERRD
 RTS

 [ $CMOS
50 STX Movto ;Save pointer into copyright
 STY Movto+1
 LDXIM Cmd+5 ;Zero disc control block
60 STZAX Dsccb
 DEX
 BPL #60
 STA Dsccb+Cmd+2 ;Set page number
 LDA Mpdrve ;**1/8/88**
 ASLA
 ASLA
 ASLA
 ASLA
 ASLA
 STA Dsccb+Cmd+1
 LDAIM &1A ;Mode sense command
 STA Dsccb+Cmd
 CLC
 LDA Mpscpt ;Where to read user pages
 STA Dsccb+Tradd
 ADCIM 3
 STA Movfrm ; location of block descriptor length
 LDA Mpscpt+1
 INCA ;**6/7/88** don't overlay sector zero on restart
 STA Dsccb+Tradd+1
 ADCIM 0
 STA Movfrm+1
 LDAIM 20 ;Max length of data area
 STA Dsccb+Cmd+4
 JSR Dsccmd
 BNE #20 ;exit on any error, Z clear
 CLC ;**8/8/87** allow SCSI 4A spec
 LDAI Movfrm ; load block descriptor length
 ADCIM 6 ; skip block header plus page descriptor
 ADC Mpscpt
 STA Movfrm
 LDA Mpscpt+1
 ADCIM 1
 STA Movfrm+1 ; point to user data
 LDXIM 4
 JMP Compar ;go compare text and return
 ]


;SMAPEN
;MOVE SECTOR ZERO INFO. POINTED TO
;BY MPSCPT INTO MAP TABLE ENTRY
;POINTED TO BY MAPPTR

SMAPEN ROUT
 CLC  ;COPY AREA OF STORE
 LDA MAPPTR
 ADCIM MPNOCY ;MAKE MAPPTR POINT TO START OF AREA
 STA MOVTO
 LDA MAPPTR+1
 ADCIM 0
 STA MOVTO+1 ;STORE IN POINTER TO COPY
 CLC
 LDA MPSCPT
 ADCIM MPSZNC ;TO POINT TO DISC INFO
 STA MOVFRM
 LDA MPSCPT+1
 ADCIM 0
 STA MOVFRM+1 ;POINTER FOR MOVING TO
 LDXIM MPSZLN
 JMP MOVE ;MOVE AND EXIT

;Zeroes an area of disc. Is a psuedo
;map management routine.
;
;On entry
;           OLDSZE = Old size in bytes
;           MPTMPA = SIN of object
;
;On exit    Z set if sucessful

ZERDSK ROUT
 JSR FNDMAP
 BEQ #10
05 RTS

10 CLC
 JSR RDMPBK ;Requires SIN in MPTMPA
 BNE #05
 LDA MAPTMP
 STA MPMBPT
 LDA MAPTMP+1
 STA MPMBPT+1
 LDA OLDSZE
 STA DIVPAR
 LDA OLDSZE+1
 STA DIVPAR+1
 LDA OLDSZE+2
 STA DIVPAR+2
 JSR DVDE
 BCC #15
 LDAIM &F9
 JSR INTERR
15 LDAIM 2
 LDY OLDSZE
 BNE #20
 [ $CMOS
 DECA ; now 1
 |
 LDAIM 1
 ]
20 STA DIVPAR
 SEC
 LDA DIVTMP
 SBC DIVPAR ;START FROM BLOCK ZERO
 STA BREGA
 LDA DIVTMP+1
 SBCIM 0
 STA BREGA+1
 LDAIM &FF
 STA NBLKS
 STA NBLKS+1
 JSR DCENT2
 BEQ #30
 JMP #90

;MAPTMP holds SIN of current disc block
;MPTMPD holds count of number in this entry
;Now zero out rest of current block
30 LDA MAPTMP
 STA MPTMPA
 LDA MAPTMP+1
 STA MPTMPA+1
 LDA MAPTMP+2
 STA MPTMPA+2
 LDA OLDSZE
 ORA OLDSZE+1
 ORA OLDSZE+2
 BEQ #40
 LDA OLDSZE
 BEQ #60 ;If all of this block used continue
40 CLC
 JSR RDMPBK ;Pretend its map block
 LDA MAPTMP ;Ignore possible error
 STA MPCYPT
 LDA MAPTMP+1
 STA MPCYPT+1
 LDY OLDSZE
 LDAIM 0
50 STAIY MPCYPT ;Zero rest of block
 INY
 BNE #50
 JSR SETMB
 JSR CASTWB ;Mark block written
 JSR ENSMB ;Write it to disc
 JSR SETMB
 JSR FNDBLK ;FIND BLOCK TO FLUSH
 LDAIM 0
 LDYIM CAFLG
 STAIY GNCBPT
 LDA MPTMPD
 BNE #55
 DEC MPTMPD+1
55 DEC MPTMPD
 INC MPTMPA
 BNE #60
 INC MPTMPA+1
 BNE #60
 INC MPTMPA+2
;Next bit writes 0's to MPTMPD entries until
;none left.
60 
 [ $Level3
 JSR SETBM ;Use bit maps
 JSR GETFR
 LDYIM CBSA
 LDAIY GNCBPT
 STA MPCYPT
 INY
 LDAIY GNCBPT
 STA MPCYPT+1
 LDYIM 0
 TYA
70 STAIY MPCYPT
 INY
 BNE #70 ;Area of store zeroed
 LDA MPCYPT
 STA DCSTAD
 LDA MPCYPT+1
 STA DCSTAD+1
 |
 STZ DCSTAD ;**29/4/88** zero store address
 STZ DCSTAD+1 ;**29/4/88** MOS treats as write zeroes
 ]
 
 LDA MPDRVE
 STA DRIVNO
75 LDA MPTMPD
 ORA MPTMPD+1
 BEQ #80
 LDA MPTMPA
 STA RBDA
 LDA MPTMPA+1
 STA RBDA+1
 LDA MPTMPA+2
 STA RBDA+2
 LDAIM &A
 STA SAVCOM
 [ $Level3
 JSR XFER 
 LDA MPTMPD
 BNE #77
 DEC MPTMPD+1
77 DEC MPTMPD
 INC MPTMPA
 BNE #75
 INC MPTMPA+1
 BNE #75
 INC MPTMPA+2
 [ $CMOS
 BRA #75
 |
 JMP #75
 ]
 |
 JSR XFERIN ;**29/4/88**
 ] 
 
80 JSR NXTEN
 BNE #90
 LDA MAPTMP
 STA MPTMPA
 LDA MAPTMP+1
 STA MPTMPA+1
 LDA MAPTMP+2
 STA MPTMPA+2
 [ $CMOS
 BRA #75
 |
 JMP #75
 ]
 
90 LDAIM 0
 RTS

 LNK MBBMCM

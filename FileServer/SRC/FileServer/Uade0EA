 OPT UADE0E ;FILE > Uade0EA
 TTL File server file UADE0EA

;************ RETAIN *************

;RETAIN: RTN TO RETAIN A SIN IN A
;SPECIFIED DIRECTORY, WITH
;GIVEN FILE NAME.

;ENTRY: ARGUMENTS ON ARGPTR STACK, AS SPECIFIED
;FOR DIRMAN.DRPRES.

;EXIT :
;A = RC
;ARGB-C DISC NO
;ARGD-F SIN OF OBJECT TO BE DELETED

;NOTE OBJSIN CAN BE DESTROYED BY RETAIN

;FUNCTION:

;IF TYPE = TYPDIR
;THEN PUT LAST COMPONENT OF FILE TITLE IN DIR HEADER
;FI;
;IF ENTRY ALREADY EXISTS
;THEN CHECK THAT IT MAY BE DELETED;
;CHECK THAT TYPES AGREE;
;CALL MAPMAN.ENSURE(MAP)
;NOTE SIN OF OBJECT TO BE DELETED;
;UPDATE DIR ENTRY (all except access - including name);
;ENSURE DIRECTORY UPTO DATE ON DISC;
;RETURN(success,disc no,sin)
;ELIF ROOM FOR A NEW ENTRY
;THEN CALL MAPMAN.ENSURE(MAP);
;UPDATE DIRECTORY;
;ENSURE DIR UPTO DATE ON DISC;
;RETURN(success,0,0)
;ELSE RETURN(directory full)
;FI

RETAIN ROUT
 LDAIM &FF
RETA12 STA TEMPA ;skip DELCHK entry point
 JSR LOADTX
 LDA TXTNAM ;**1/6/87** prohibit pseudo-directory names
 JSR Testpd
 BNE #10
 LDA TXTNAM+1
 CMPIM &20
 BNE #10
 LDAIM DRERRA
 [ $CMOS
 BRA #15
 |
 BNE #15
 ]
 
10 JSR FNDTEX ;DOES TEXT NAME ALREADY EXIST ?
 BNE #40

;ENTRY ALREADY EXISTS

 LDA TEMPA ;check entry point
 BEQ #25 ;skip if RENAME involved ** 25/9/84 **

 JSR DELCHK ;CAN IT BE DELETED ?
 BEQ #25 
15 JSR UNLOCK ;UNLOCK THE LOADED DIR 
20 RTS
 
;SEE IF TYPES MATCH

25 LDYIM ARGN
 LDAIY ARGPTR ;TYPE & ACCESS OF OBJECT TO BE PRESERVED
 ANDIM TYPE
 STA TEMPA
 LDYIM DRACCS
 LDAIY CRNTEN
 STA OBJACC ;OBJACC:=OLD ACCESS FIELD IN DIR
 ANDIM TYPE
 CMP TEMPA
 BEQ #30
 LDAIM DRERRK ;TYPES DON'T MATCH
 [ $CMOS
 BRA #15
 |
 BNE #15
 ]

30 JSR #45 ;**1/6/88** check entry code and update header
 JSR CRNSIN ;OBJSIN:=SIN OF OBJECT TO BE DELETED
 JSR COPYDT ;COPY OBJECT DETAILS INTO DIR
 JSR COPYNM ;Copy name TXTNAM -> dir. entry
 LDYIM DRACCS ;BUT KEEP OLD ACCESS FIELD
 LDA OBJACC
 STAIY CRNTEN
 JSR ARGDSN ;MOVE DISC NO & OBJSIN ONTO ARGPTR STACK
 JMP ENSRIT ;STRMAN.ENSURE(DIR)

;MAKE A NEW DIR ENTRY

40 JSR SETFRE ;DIRFRE := ADDR OF FREE ENTRY PTR
 BNE #50
 JSR UNLOCK

;THE DIR IS FULL SO TRY AND INCREASE ITS SIZE

 JSR CHZSZE ;INCREASE DIR SIZE
 BNE #20
 JSR LOADDR ;RELOAD THE DIR
 BEQ #10 ;TRY AGAIN
 RTS ;Failed, exit (directory unlocked) **25/12/86**

45 LDYIM ARGA ;**1/6/88** check if preserve-check only
 LDAIY ARGPTR
 EORIM 13 ;set zero if so
 BEQ #47 ;and go unlock and return  
 JSR RATDIR ;IF DIR THEN UPDATE NAME IN HEADER
 BNE #47
 JSR ENSMAP ;ENSURE MAP OF OBJECT TO BE RETAINED
 BNE #47
 RTS

47 TAY
 PLA
 PLA
 TYA
 [ $CMOS
 BRA #15
 |
 JMP #15
 ]
 
50 JSR #45 ;**1/6/88** check entry code and update header

;REMOVE ENTRY FROM FREE CHAIN AND INSERT
;IT IN APPROPRIATE POSITION, ON THE IN USE CHAIN.

 LDYIM DRLINK
 LDAIY PREVEN
 STA TEMPA
 INY
 LDAIY PREVEN
 STA TEMPA+1 ;TEMPA := [PREVEN]

 DEY  ;Y:= DRLINK
 LDAIY DIRFRE
 STAIY PREVEN
 INY
 LDAIY DIRFRE
 STAIY PREVEN ;[PREVEN] := [DIRFRE]

 JSR SETCRN ;CRNTEN := STORE ADDRESS OF [DIRFRE]

 LDYIM DRLINK
 LDAIY CRNTEN
 STAIY DIRFRE
 INY
 LDAIY CRNTEN
 STAIY DIRFRE ;[DIRFRE] := [CRNTEN]
 DEY  ;Y:=DRLINK
 LDA TEMPA
 STAIY CRNTEN
 INY
 LDA TEMPA+1
 STAIY CRNTEN ;[CRNTEN] := TEMPA

;INCREMENT DIR ENTRY COUNT

 JSR SETGEN ;GENPTR := [DIRSTA]
 [ $Level3
 CLC
 ]
 
 LDYIM DRENTS
 LDAIY GENPTR
 [ $CMOS
 INCA
 |
 ADCIM 1
 ]
 STAIY GENPTR
 [ $CMOS
 BNE #60
 ]
 INY
 LDAIY GENPTR
 [ $CMOS
 INCA
 |
 ADCIM 0
 ]
 STAIY GENPTR ;[DIRSTA + DRENTS] +:= 1

;COPY TEXT NAME INTO DIR ENTRY

60 JSR COPYNM

;COPY DETAILS ON ARGPTR STACK INTO DIR ENTRY

 JSR COPYDT
 JSR ENSRIT ;STRMAN.ENSURE(directory)
 JSR ARGDSN ;Copy Disc & SIN to stack, then zero SIN
 
;CLEAR SIN TO ZERO

 LDAIM 0
 LDYIM ARGD
 LDXIM 3
70 STAIY ARGPTR ;:=0
 INY
 DEX
 BNE #70
80 RTS


;RATDIR: IF RETAINING A DIR - WE COPY INTO ITS HEADER
;THE LAST COMPONENT OF A FILE TITLE.
;THIS IS THE DIR'S NAME & PROVIDED FOR THOSE
;CLIENTS WANTING TO DISPLAY A DIR'S NAME
;DURING EXAMINE.

RATDIR LDYIM ARGN
 LDAIY ARGPTR
 ANDIM TYPDIR
 BEQ #80

;AS WE ARE RETAINING A DIR WE MUST COPY THE CONTENTS
;OF TXTNAM INTO THE HEADER OF THIS DIR.

 JSR ARGOBJ ;OBJSIN:=SIN OF OBJECT TO BE PRESERVED
 JSR SINSZE ;FIND OUT THE DIR'S SIZE
 BNE #80
 LDYIM ARGE
 LDAIY NEWARG ;LS(NO OF BLOCKS)
 PHA
 INY
 LDAIY NEWARG ;MS(NO OF BLOCKS)
 PHA
 LDAIM 1
 JSR SETDSA ;PUT DISCNO & OBJSIN ON NEWARG STACK
 INY
 LDAIM 0
 STAIY NEWARG
 INY
 STAIY NEWARG ;BLOCK NO. = 0
 PLA
 LDYIM ARGJ
 STAIY NEWARG ;MS(NO OF BLOCKS)
 PLA
 DEY  ;Y:= ARGI
 STAIY NEWARG ;LS(NO OF BLOCKS)
 JSR STRMAN ;STRMAN.DISC ADDR->STORE ADDR
 BNE #80

;NOW THE DIR IS LOADED - SO COPY THE CONTENTS OF
;TXTNAM INTO THE HEADER OF THE DIR

 LDYIM ARGB
 LDAIY NEWARG
 STA GENPTR
 INY
 LDAIY NEWARG
 STA GENPTR+1
 CLC
 LDA GENPTR
 ADCIM DRNAME
 STA MOVTO
 LDA GENPTR+1
 ADCIM  0
 STA MOVTO+1
 LDAIM :LSB:TXTNAM
 STA MOVFRM
 LDAIM :MSB:TXTNAM
 STA MOVFRM+1
 LDXIM NAMLNT
 JSR MOVE
 
 LDYIM DRSTAR ;**08/02/87** 
 LDAIM &FF
 CMPIY GENPTR ;parent pointer in first entry?
 BNE #90
 INY
 CMPIY GENPTR
 BNE #90
 LDYIM DRSTAR+DRSIN ;yes, update to current parent
 LDA DIRSIN
 STAIY GENPTR
 INY
 LDA DIRSIN+1
 STAIY GENPTR
 INY
 LDA DIRSIN+2
 STAIY GENPTR

90 JSR MRKDRT ;MARK IT DIRTY
 LDAIM 2
 JSR SETRTN ;N.B. STR ADDR ALREADY ON NEWARG STACK
 LDYIM ARGD
 LDAIM UNLKIT
 STAIY NEWARG ;ENSURE & UNLOCK THE DIR
 JMP STRMAN


;COPY LOAD ADDR -> SIN, WHICH ARE ON ARGPTR STACK,
;INTO THE DIR ENTRY POINTED TO BY CRNTEN.

COPYDT LDAIM ARGF
 STA OFF1 ;Move from offset
 LDAIM DRLOAD
 STA OFF2 ;Move to offset
 LDXIM ARGPTR ;Move from ptr.
 LDYIM CRNTEN ;Move to ptr.
 LDAIM &E ;Move 14 bytes
 JMP MOVBLK


;Copy object name from TXTNAM to dir. entry

COPYNM LDAIM :LSB:TXTNAM
 STA MOVFRM
 LDAIM :MSB:TXTNAM
 STA MOVFRM+1
 CLC
 LDA CRNTEN
 ADCIM DRTITL
 STA MOVTO
 LDA CRNTEN+1
 ADCIM 0
 STA MOVTO+1
 LDXIM NAMLNT
 JMP MOVE


INCCRN ROUT
 CLC  ;CRNTEN +:= DRENSZ
 LDA CRNTEN
 ADCIM DRENSZ
 STA CRNTEN
 BCC #10
 INC CRNTEN + 1
10 RTS


ARGOBJ LDYIM ARGQ ;OBJSIN:=SIN OF OBJECT TO BE PRESERVED
 LDAIY ARGPTR
 STA OBJSIN
 INY
 LDAIY ARGPTR
 STA OBJSIN+1
 INY
 LDAIY ARGPTR
 STA OBJSIN+2
 RTS


ENSMAP JSR ARGOBJ ;ENSURE OBJECT'S MAP IS UPTO DATE ON DISC
ENSOMP LDAIM 6
 JSR SETDSA ;PUT DISC NO & OBJSIN ON NEWARG STACK
 JMP MAPMAN ;MAPMAN.ENSUREMAP


DELOBJ ROUT
 PHA  ;REMOVE NEWDIR FROM CACHTB
 JSR ARGOBJ ;OBJSIN:=SIN OF OBJECT WHICH WAS TO BE PRESERVED

 JSR REMOVE ;remove the cache entry
 TAX ;save RC
 PLA
 BNE #10
 TXA ;substitute RC here
10 CMPIM &C9 ;look for 'write protect'
 BEQ #30
 PHA
 JSR DELB ;rest of DLETIT
 TAX ;save RC
 PLA ;get old RC
 BNE #30 ;skip if there is previous error
 TXA ;else return new error
30 RTS

DELB ROUT
 LDAIM 2
 JSR SETDSA
 JSR JUSING ;** 21/12/84 **
 JSR MAPMAN ;MAPMAN.FREESPACE
 BNE #10

 LDAIM 6
 JSR SETDSA
 JSR MAPMAN ;MAPMAN.ENSURE MAP
 BEQ #20 
10 JSR INTERR
20 RTS

REMOVE LDAIM 5
 JSR SETDSA ;REMOVE OBJSIN FROM CACHE
 JMP STRMAN ;STRMAN.REMOVE


;INCREASE THE SIZE OF A DIR

;ENTRY: DIRSIN = SIN OF DIR TO HAVE ITS SIZE CHANGED
;EXIT: A = RC

CHZSZE ROUT
 JSR DIROBJ ;OBJSIN := DIRSIN
 JSR REMOVE ;REMOVE OBJSIN FROM THE CACHE
 JSR SINSZE
 BNE #10
 LDYIM ARGB
 LDAIY NEWARG
 STA CRNTEN
 INY
 LDAIY NEWARG
 STA CRNTEN+1 ;CRNTEN:=EXACT CURRENT SIZE OF DIR
 LDYIM ARGE
 LDAIY NEWARG
 STA BREGA
 INY
 LDAIY NEWARG
 STA BREGA+1 ;BREGA := NUMBER OF BLOCKS
 [ $CMOS
 STZ BREGA+2
 |
 LDAIM 0
 STA BREGA+2
 ] 
 JSR MULTBS ;BREGA *:= BLKSZE
 CLC
 LDA BREGA
 ADCIM :LSB:BLKSZE
 STA DIRTMP
 LDA BREGA+1
 ADCIM :MSB:BLKSZE
 STA DIRTMP+1 ;DIRTMP:=SIZEOFDIR+BLKSZE(INTEGRAL NB OF BLKS)

;TEST FOR MAX SIZE OF DIR ALLOWED

 LDAIM :LSB:MAXDIR
 CMP DIRTMP
 LDAIM :MSB:MAXDIR
 SBC DIRTMP+1
 BCS #20
 LDAIM DRERRM
10 RTS 


20 LDAIM 3
 JSR SETDSA
 INY
 LDA DIRTMP
 STAIY NEWARG ;LS(NEW SIZE)
 INY
 LDA DIRTMP+1
 STAIY NEWARG ;CS(NEW SIZE)
 INY
 LDAIM 0
 STAIY NEWARG ;MS(NEW SIZE)
 JSR JUSINF ;** 3/10/84 **
 JSR MAPMAN ;MAPMAN.CHANGESIZE
 BNE #30
 JSR LDDR ;LOAD CURRENT DIR
 BNE #30 
 LDA CRNTEN
 BNE #25
 DEC CRNTEN+1 
25 DEC CRNTEN ;CRNTEN-:=1(TO OVERWRITE OLD TRALNG SQ NO)
 CLC
 LDA DIRSTA
 ADC CRNTEN
 STA CRNTEN
 LDA DIRSTA+1
 ADC CRNTEN+1
 STA CRNTEN+1 ;CRNTEN PTS TO NEXT ENTRY TO BE MADE FREE
 JSR FORMAT ;FORMAT DIR
 JSR ENSRIT ;ENSURE ITS UPTO DATE ON DISC & UNLOCKIT
 BNE #30 

;ENSURE THE OBJECT MAP

 JSR ENSOMP ;N.B. OBJSIN MUST = SIN OF DIR
 BEQ #30
 JSR INTERR
30 RTS
 
 LNK UADE0F

 OPT UADE16 ; > Uade16A
 TTL File server file UADE16A

;*************
;*  L O A D  *
;*************

;1) RETRIEVE object info. (DIR. MAN)
;check access and type.

;2) Get handle of file, and open for
;reading, just in case.

;3) REPLY
;4) Loop round DSCMAN doing getdata from disc
;into Big Buffer, and sending to client.
;If disc error, set error flag but continue
;to pad out data until loop end.
;5) Return code reply.

;**8/2/88* Command level code deleted

LOAD ROUT
 JSR GETUSE  ;Get user info. using FINDMC
 BNE #17 ;Fail, exit

 [ Pseudods = Yes
 LDYIM UTHUFD ;**1/7/87** fix up user root handle
 LDAIY USTPTR
 STA UMHUFD
 ]

 JSR LDRETR ;Do retrieve
 BEQ #20 ;OK, continue

 LDX BPTR
 LDYAX FCODE
 CPYIM FCCMND ;Do a command ??
 BNE #15 ;Nope, send not found error.

 LDAAX CPLIB ;Get lib. handle
 LDYIM UTHSLD
 STAIY USTPTR ;Note, assumes USTPTR still OK from STKUSE.

 JSR LDRETR ;Do another retrieve.
 BEQ #20 ;OK, continue
 CMPIM DRERRC
 BEQ #10 ;Is, "not found".
 CMPIM DRERRA ;Is bad file title ?
 BNE #15 ;Nope, carry on
10 LDAIM WOTERR
15 JMP ERROR

17 JMP COMRTS ;Finish !!!

20 LDYIM ARGB
 LDAIM TYPDIR ;Directory type
 ANDIY NEWARG ;0 => is file
 BEQ #25 ;OK, carry on
 LDAIM LODERA ;Not ok, external error
 [ $CMOS
 BRA #15
 |
 BNE #15
 ]
 
25 LDAIM READAC
 ANDIY NEWARG
 BNE #30 ;Read access => OK
 LDAIM LODERB ;Not ok, external error
 [ $CMOS
 BRA #15
 |
 BNE #15
 ]
 
30 LDA DETDIS
 STA DANDS ;Store Disc. no.
 LDA DETDIS+1
 STA DANDS+1

 LDXIM 2
35 LDAAX DETSIN ;Store SIN
 STAAX DANDS+2
 DEX
 BPL #35

 LDAIM 2 ;arg to RNDMAN.INFO
 JSR SETRTN
 INY
 JSR SINDSC ;put disc number & SIN on stack
 JSR RNDMAN
 BNE #40 ;opject not open at all
 LDYIM ARGB ;test mode of access to object
 LDAIY NEWARG
 ANDIM &02 ;test bit 1 (write bit)
 BEQ #40
 LDAIM DRERRI ;object in use
 [ $CMOS
 BRA #15
 |
 BNE #15
 ]
 
;Move load/exec info. from COWORK to transmit buffer
;Note CPYLXS copies date and access as well

40 LDXIM 0 ;Offset from MIDTX
 JSR CPYLXS ;Note corrupts COTEMP

 LDXIM 10
45 LDAAX COWORK
 STAAX MIDTX+14
 DEX
 BPL #45

 LDAIM &20
 STA MIDTX+24
 STA MIDTX+25
 STX MIDTX+26 ;negative byte here

 LDXIM 2
50 LDAAX DETSZ ;Move file size to TOSEND variable
 STAAX TOSEND
 DEX
 BPL #50

 [ $CMOS
 STZ RTCODE
 |
 LDAIM 0
 STA RTCODE
 ]
 LDAIM 14 ;offset of name string in buffer
 STA CCODE

 LDAIM TXHDR+28 ;Message length (load/exec/size/acc/date)
 JSR REPLY ;Send reply
 BEQ #55
 JMP #95 ;Reply failed

 [ $CMOS
55 STZ DSCERR ;Set disc error flag
 STZ FINFLG ;Set finish flag
 STZ CURBLK
 STZ CURBLK+1
 |
55 LDAIM 0
 STA DSCERR ;Set disc error flag
 STA FINFLG ;Set finish flag
 STA CURBLK
 STA CURBLK+1
 ]
 
;Loop round sending data to client
;in blocks of size BBSIZE. TOSEND
;is the amount left to send, decremented
;by BBSIZE each loop.
;If a disc error occurs, the disc
;error number is put in DSCERR and
;the loop continues, padding out the
;data until the right amount has
;been sent. The disc error number
;is then sent as a return code.

;First, subtract BBSIZE from TOSEND

60 SEC
 LDA TOSEND
 [ $Level3
 SBC IOBSIZ
 |
 SBC BBSIZE
 ]
 STA COWORK
 LDA TOSEND+1
 [ $Level3
 SBC IOBSIZ+1
 |
 SBC BBSIZE+1
 ]
 STA COWORK+1
 LDA TOSEND+2

;Note BBSIZE is TWO bytes !!

 SBCIM 0
 STA COWORK+2

 ORA COWORK
 ORA COWORK+1

;If result +ve TOSEND > BBSIZE, so send
;a block of size BBSIZE.

 BEQ #65
 BCS #70

;If BBSIZE >= TOSEND, send remaining
;data (in TOSEND) and set flag.

65 LDA TOSEND
 STA OUTBSZ
 LDA TOSEND+1
 STA OUTBSZ+1
 DEC FINFLG ;Set loop finish flag=#FF
 ORA TOSEND
 BEQ #90 ;Zero length file => send final reply only
 [ $CMOS
 BRA #75
 |
 BNE #75
 ]
 
 [ $Level3
70 LDA IOBSIZ
 STA OUTBSZ
 LDA IOBSIZ+1
 STA OUTBSZ+1
 |
70 LDA BBSIZE
 STA OUTBSZ
 LDA BBSIZE+1
 STA OUTBSZ+1
 ]
 
;The size of the block to send (in
;bytes) is now in OUTBSZ. So divide
;by disc block size to get number
;of disc blocks to transfer.

75 LDA OUTBSZ
 STA DIVPAR
 LDA OUTBSZ+1
 STA DIVPAR+1
 [ $CMOS
 STZ DIVPAR+2 ;3 byte arg.
 |
 LDAIM 0
 STA DIVPAR+2 ;3 byte arg.
 ]
 JSR DIVIDE
 LDYIM ARGB
 JSR SINDSC ;Set disc/SIN on stack
 JSR IBLOCK ;Set disc block parms on stack
 LDAIM 3 ;Read disc function
 JSR SETRTN
 JSR DSCMAN ;*** DO DISC XFER TO BIG BUFFER **
 BEQ #80 ;OK => continue
 STA DSCERR ;Otherwise set disc error

80 LDY BPTR
 LDAAY CPUFD ;Get data port sent from client

 [ $Level3
 JSR SENDIO ;Send big block
 |
 JSR SENDBC ;Send big block
 ]
 BNE #95 ;Otherwise, contact lost with client, so give up.

;At end of loop, test finish flag,
;and set CURBLK to be start disc
;block for next iteration.
;Also set TOSEND from COWORK as decremented counter

85 BIT FINFLG
 BMI #90 ;#FF => exit

 CLC
 LDA CURBLK
 ADC DIVPAR ;Add no. of blocks xfered
 STA CURBLK
 LDA CURBLK+1
 ADC DIVPAR+1
 STA CURBLK+1

 LDA COWORK
 STA TOSEND
 LDA COWORK+1
 STA TOSEND+1
 LDA COWORK+2
 STA TOSEND+2

 JMP #60 ;*** LOOP RETURN **

90 LDA DSCERR
 JSR RCODE ;Send return code

;No cleaning up to do, so exit

95 JMP COMRTS



;***************
;* D E L E T E *
;***************


;1) CALL DELETE IN DIRMAN, WHICH SUPPLIES
;SIN AND DISC NO. OF OBJECT TO BE DELETED
;AFTER REMOVING IT FROM THE APPROPRIATE
;DIRECTORY.

;2) CALL UTILITY OBJCLR TO REMOVE OBJECT FROM
;STORE, FROM THE MAP, AND ENSURE THE MAP.


DELETE ROUT
 STY COTEMP ;Store command line pointer
 JSR STKUSE
 BNE #10

 LDY COTEMP
 JSR RDTITL
 BNE #10

 LDYIM ARGC
 JSR SBUFPT
 LDAIM 3
 JSR SETRTN

 LDYIM ARGG
 LDAIM &80
 STAIY NEWARG ;specify full last name

 JSR DIRMAN ;*** DIRECTORY DELETE **
 BNE #05 ;**23/1/87** if error, reply now
 JSR OBJCLR ;OTHERWISE CLEAR OLD OBJECT
05 JSR RCODE ;**** 17/3/83 ****

10 JMP COMRTS



;**********************
;* C A T  H E A D E R *
;**********************

;1) DIRMAN CALL RETRIEVE TO GET DIR. NAME
;AND DISC. NO.
;2) MAPMAN CALL TO GET DISC NAME FOR GIVEN NO.
;3) FORMAT ABOVE WITH INDICATION OF WHETHER
;OWNER OR PUBLIC ACCESS TO DIR. (ALSO
;GOT FROM EXAMINE CALL)

CATHDR ROUT
 JSR GETUSE
 BNE #30

 LDAIM 0 ;Offset from MIDTX to put dir. title
 JSR DIRIND ;Get dir. title/access/disc no.
 BNE #40

 LDAIM SPACE
 STA MIDTX+NAMLNT
 LDYIM ARGD
 LDAIY NEWARG
 ANDIM OWNER
 BEQ #10
 LDAIM "O"
 [ $CMOS
 BRA #20
 |
 BNE #20
 ]
 
10 LDAIM "P" ;PUBLIC OR OWNER ACCESS
20 STA MIDTX+&B
 LDAIM SPACE
 STA MIDTX+&C
 STA MIDTX+&D
 STA MIDTX+&E

 LDAIM &F ;Offset from MIDTX to put disc name
 JSR CPDNAM ;Read disc name of current disc
 BNE #40

 LDAIM CR
 STAAX MIDTX ;Note assumes X is offset remaining from CPDNAM
 LDAIM EXTERM ;BLOCK DELIM.
 STAAX MIDTX+1

 TXA
 CLC
 ADCIM TXHDR+2 ;GET MESSAGE LENGTH
 JSR REPLYC
30 JMP COMRTS

40 JMP ERROR



;*****************
;* E X A M I N E *
;*****************

;Mainly concerned with getting args
;from RXBUF to NEWARG, calling DIRMAN,
;and getting args back again.

EXAMIN
 JSR STKUSE ;CALL FINDMC AND SET USTPTR ON STACK
 BNE #30

 LDAIM EXAFTO
 JSR SETFTP ;SET FILE TITLE POINTER ON STACK

 INY
 CLC
 LDA BBUF
 ADCIM TXHDR+2
 STAIY NEWARG ;SET POINTER TO RESULT AREA

;RESULT OF CALL OF DIRMAN IS PLACED IN THE BIG
;BUFFER, OFFSET BY TWO BYTES FOR THE MESSGE HEADER
;TO BE INSERTED

 INY
 LDA BBUF+1
 ADCIM 0
 STAIY NEWARG

;NOW COPY 3 ARGS FROM RXBUF TO STACK

 LDX BPTR ;OFFSET IN RXBUF FOR THIS RX BUFFER
 INY
 LDAAX MIDRX
 STAIY NEWARG ;ARG
 INY
 LDAAX MIDRX+1
 STAIY NEWARG ;entry point
 INY
 LDAAX MIDRX+2
 STAIY NEWARG ; number of entries

 LDAIM 7 ;FUNCTION NUMBER IN DIRMAN
 JSR SETRTN

 LDYIM ARGK
 LDAIM &C1 ;specify directory here
 STAIY NEWARG ;pass parameter

 JSR DIRMAN ;*** DIRECTORY MANAGER CALL **
 BNE #40
 LDA BBUF
 STA GENPTR
 LDA BBUF+1
 STA GENPTR+1
 LDYIM 0
 TYA
 STAIY GENPTR ;STORE 0 RETURN CODE IN MESSAGE
 INY
 STAIY GENPTR ;STORE 0 COMMAND CODE

 LDYIM ARGD
 LDAIY NEWARG ;GET NUMBER OF ENTRIES RETURNED
 PHA ;Store for later
 INY
 LDAIY NEWARG
 LDYIM TXHDR+1 ;Store cycle no. of directory
 STAIY GENPTR
 PLA ;Restore no. of entries returned
 DEY
 STAIY GENPTR ;Set in message to client


;NOW SET UP CONTROL BLOCK

 LDA RPLYPT ;REPLY PORT
 LDX QPTR ;C.B POINTER
 STAAX CBPORT

 LDA BBUF ;POINTER TO MESSAGE START
 STAAX CBBUF
 LDA BBUF+1
 STAAX CBBUF+1

 LDYIM ARGB
 LDAIY NEWARG ;POINTER TO END OF MESSAGE,
 ;RETURNED BY DIR. MAN.

 STAAX CBBUFE
 INY
 LDAIY NEWARG
 STAAX CBBUFE+1

 LDY QPTR ;SET ARG FOR SEND
 JSR SEND ;*** SEND INFO **

 JMP COMRTS



;***********
;* I N F O *
;***********


;GET INFO ON A FILE IN A CHAR STRING
;FROM DIRMAN INTO BIG BUFFER AND SEND

INFO ROUT
 JSR RDTITL
 BNE #20
 JSR STKUSE
 BNE #20

 JSR SBUFPT
 INY
 CLC
 LDA BBUF
 ADCIM TXHDR
 STAIY NEWARG

;RESULT POINTER PASSED TO DIRMAN IS BBUF +A BIT
;TO ALLOW ROOM FOR THE MESSAGE HEADER
;IN THE FINAL MESSAGE BACK TO THE CLIENT.

 INY
 LDA BBUF+1
 ADCIM 0 ;RESULT AREA TOP BYTE
 STAIY NEWARG

 LDAIM 8
 JSR SETRTN

 LDYIM ARGH
 LDAIM &C0
 STAIY NEWARG ;wild card flag

 JSR DIRMAN ;*** GET THE INFO **
 BEQ #10 ;OK, CONTINUE
 JMP ERROR

10 LDA BBUF
 STA GENPTR
 LDA BBUF+1
 STA GENPTR+1

 LDYIM 0
 LDAIM CCINF
 STAIY GENPTR ;Command code
 INY
 LDAIM 0 ;Zero r.code
 STAIY GENPTR

;FROM HERE, SET UP TRANSMIT CONTROL BLOCK

 LDX QPTR
 LDA RPLYPT
 STAAX CBPORT

 LDA BBUF
 STAAX CBBUF ;MESSAGE BUFFER
 LDA BBUF+1
 STAAX CBBUF+1

 LDYIM ARGB ;GET MESSAGE BUFFER END FROM STACK
 LDAIY NEWARG
 STAAX CBBUFE
 INY
 LDAIY NEWARG
 STAAX CBBUFE+1

 LDY QPTR
 JSR SEND ;OFF WE GO ....

20 JMP COMRTS

 LNK UADE17

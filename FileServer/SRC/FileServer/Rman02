 OPT RMAN02 ; > <FileServerSource>.Rman02
 TTL File server file RMAN02

;**************** RDRDCH ****************

;RDRDCH: read one byte from an open file

;Entry: ARGB = (LS) ptr to user info
;ARGC = (MS) ptr to user info
;ARGD = file handle
;ARGE = sequence no. (in LS bit)

;Exit:  ARGA = return code
;ARGB = byte read
;ARGC = end-of-file flag
;normally zero,
;#X80 if this is the last byte in file
;#XC0 if this is byte after end of file

;1) Get HANDTB entry from handle
;2) Check that object is a file
;3) Get RANDTB entry
;4) Compare sequence no. in ARGD with that in RANDTB entry.
;Same => old seq. file ptr := current SFP
;increment sequence no. in RANDTB entry
;Different => repeat of last read;
;current SFP := old SFP
;5) Check sequential file pointer against file size
;SFP =  size => return $FE and EOFFLG = $C0
;SFP >  size => end of file; return RC
;SFP <  size => OK
;6) Work out disc address of block containing
;required byte, and offset of byte in block.
;7) Find / get required block in cache (STRMAN)
;8) Fetch required byte and return it
;Increment current SFP in RANDTB

RDRDCH ROUT
 JSR INITRD ;GENPTR := user info; MCNUMB := machine no.
;[RNDPTR := rubbish]
 LDYIM ARGD
 LDAIY ARGPTR ;A := handle
 JSR FNDHND ;HNDPTR := HANDTB entry
 BNE #30 ;Not found - exit
 
 JSR SETRPT ;RTEPTR := RANDTB entry
 BNE #30 ;Not found (object not file)

 LDYIM HTMODE
 LDAIY HNDPTR ;check that file is open for input
 ANDIM READAC
 BNE #10
 LDAIM RDERRO ;file not open for input ** 15/11/84 **
 [ $CMOS
 BRA #30
 |
 BNE #30
 ]

10 JSR RDCSEQ ;Compare sequence numbers
;and choose file ptr; if equal
;then increment seq no.
 JSR RDCKEX ;Check SFP against file length
 BNE #30 ;End of file
 LDAIM &FE ;Byte after last
 BIT EOFFLG
 BVS #20 ;Reading byte after last
;so return $FE

 JSR RDGBLK ;Get required block into cache
;GENPTR := store address
 BNE #30 ;error

;*** Assuming blocksize is 256 bytes ***
;Offset of required byte in block is given
;by LS byte of seq. file pointer.

 LDYIM RTCSFP
 LDAIY RTEPTR ;LS byte of SFP
 TAY
 LDAIY GENPTR ;Get required byte
20 LDYIM ARGB
 STAIY ARGPTR ;Return byte read
 INY
 LDA EOFFLG
 STAIY ARGPTR ;Return end-of-file flag

 JSR RDISFP ;Increment Current SFP

 LDAIM  0
30 JMP RDEXIT ;Exit: Rc in A


;**************** RDWRCH ****************

;RDWRCH: write one byte to an open file

;Entry: ARGB = (LS) ptr to user info
;ARGC = (MS) ptr to user info
;ARGD = file handle
;ARGE = sequence no. (in LS bit)
;ARGF = byte to be written

;Exit:  ARGA = return code

;1) Get HANDTB entry from handle
;2) Check that object is a file
;3) Check file open for update
;4) Get RANDTB entry
;5) Compare sequence no. in ARGD with that
;in RANDTB entry.
;Same => old seq. file ptr := current SFP
;increment sequence no. in RANDTB entry
;Different => repeat of last read;
;current SFP := old SFP
;6) Check sequential file pointer against file size
;SFP >= size => end of file; extend file
;SFP <  size => OK
;7) Work out disc address of block containing
;required byte, and offset of byte in block.
;8) Find / get required block in cache (STRMAN)
;9) Write byte to cache; mark cache buffer dirty
;(but do not cause it to be written to disc: this will
;happen when the cache space is needed for
;something else, or when the file is closed.
;The cache buffer is left unlocked between
;calls of RDWRCH).
;10) IF SFP > HWM THEN HWM := SFP
;11) Increment current SFP

RDWRCH ROUT
 JSR INITRD ;GENPTR := user info; MCNUMB := machine no.
;[RNDPTR := rubbish]

 LDYIM ARGD
 LDAIY ARGPTR ;A := handle
 JSR FNDHND ;HNDPTR := HANDTB entry
 BNE #40 ;Not found - exit

 LDYIM HTMODE ;Check file open for update
 LDAIY HNDPTR ;Get mode
 ANDIM WRITAC ;Extract write access bit
 BNE #10 ;OK to write

 LDAIM RDERRN ;"File not open for update"
 [ $CMOS
 BRA #40
 |
 BNE #40
 ]

10 JSR SETRPT ;RTEPTR := RANDTB entry
 BNE #40 ;Not found (object not file)

 JSR RDCSEQ ;Compare sequence numbers
;and choose file ptr; if equal
;then increment seq no.
 JSR RDCKSP ;Check SFP against file length
 BIT EOFFLG ;If PTR = EXT, need to extend
 BVS #20 ;V set => PTR = EXT => extend
 BEQ #30 ;Otherwise, Z set if inside file
;so don't extend

;Must extend file
;Allocate another block (1K bytes)

20 LDAIM 1 ;Ls byte of new size
 STA NEWFSZ ;**29/4/88** central subroutine
 [ $CMOS
 STZ NEWFSZ+1
 |
 LDAIM 0
 STA NEWFSZ+1
 ]
 JSR RDEXSZ ;**29/4/** Change file size
 BNE #40 ;Error

30 JSR RDGBLK ;Get required block into cache
;GENPTR := store address
 BNE #40 ;error

;*** Assuming blocksize is 256 bytes ***
;Offset of required byte in block is given
;by LS byte of seq. file pointer.

 LDYIM ARGF
 LDAIY ARGPTR ;Byte to be written
 TAX  ;Save it
 LDYIM RTCSFP
 LDAIY RTEPTR ;LS byte of file pointer
 TAY
 TXA
 STAIY GENPTR ;Write byte to cache

 JSR MRKDRT ;Mark buffer dirty (addr in GENPTR)
 JSR RDISFP ;Increment Current SFP
 JSR RDSHWM ;Set high water mark

 LDAIM 0 ;Success
40 JMP RDEXIT ;Return - RC in A


;****** RDRDAR ******

;RDRDAR: read RANDTB info on open file

;Entry: ARGB (LS) ptr to user info
;ARGC (MS) ptr to user info
;ARGD = file handle

;Exit:  ARGA = return code
;ARGB = (LS) Seq file ptr
;ARGC = (CS)  "   "    "
;ARGD = (MS   "   "    "
;ARGE = (LS) File high water mark
;ARGF = (CS)  "    "     "
;ARGG = (MS)  "    "     "
;ARGH = (LS) File size
;ARGI = (CS)  "    "
;ARGJ = (MS)  "    "

;The file handle is used to find the HANDTB
;entry, which points to the RANDTB entry
;from which the info is extracted.

RDRDAR ROUT
 JSR INITRD ;GENPTR:=ptr to user info
 LDYIM ARGD
 LDAIY ARGPTR ;A := handle
 JSR FNDHND ;HNDPTR := HANDTB entry
 BNE #40 ;Not found - exit

 JSR SETRPT ;RTEPTR := RANDTB entry
 BNE #40 ;Not found

;Return current seq file ptr

 LDYIM RTCSFP
 LDAIY RTEPTR ;LS byte of SFP
 LDYIM ARGB
 STAIY ARGPTR
 LDYIM RTCSFP+1
 LDAIY RTEPTR ;CS byte
 LDYIM ARGC
 STAIY ARGPTR
 LDYIM RTCSFP+2
 LDAIY RTEPTR ;MS
 LDYIM ARGD
 STAIY ARGPTR

;Copy 6 bytes from RANDTB entry to ARGPTR
;stack.  (The 2 fields are in the same
;order in each place).

 LDXIM 6 ;Loop count
 LDAIM ARGE ;1st stack offset
 STA RNDTMP ;Temp workspace
 LDYIM RTHWM ;Offset in RANDTB entry

10 LDAIY RTEPTR ;Get data from RANDTB
 STY RNDTMP+1 ;Save RANDTB entry offset
 LDY RNDTMP ;Get stack offset
 STAIY ARGPTR ;Put data on stack
 INY
 STY RNDTMP ;Save next stack offset
 LDY RNDTMP+1 ;Restore entry offset
 INY
 DEX  ;Loop count
 BNE #10 ;Loop if not zero
 JSR RDCKSP ;check for EOF ** 26/5/83 **
 BEQ #30 ;skip except on error

 LDYIM ARGJ
 STY RNDTMP
 LDYIM ARGD
 LDXIM 2 ;copy size to pointer area
20 STY RNDTMP+1
 LDY RNDTMP
 LDAIY ARGPTR ;move the data
 LDY RNDTMP+1
 STAIY ARGPTR
 DEC RNDTMP
 DEY
 DEX
 BPL #20 ;three bytes

30 LDAIM 0 ;All copied - set RC
40 JMP RDEXIT ;Return - RC in A


;****** RDSTAR ******

;RDSTAR: set sequential file ptr

;Entry: ARGB = (LS) ptr to user info
;ARGC = (MS)  "   "   "   "
;ARGD = file handle
;ARGE = arg saying what to set
;0: SFP
;1: HWM ** 5/9/84 **
;ARGF = (LS) New value to set
;ARGG = (CS)  "   "    "   "
;ARGH = (MS)  "   "    "   "
;ARGI = 4th byte if any

;Exit:  ARGA = return code

;The file handle is used to find the RANDTB entry.
;The arg in ARGE is inspected to find
;out what is being set.

RDSTAR ROUT
 JSR INITRD ;GENPTR -> user info
 LDYIM ARGD
 LDAIY ARGPTR ;A := handle
 JSR FNDHND ;HANDPTR := HANDTB entry
 BNE #10 ;error
 JSR SETRPT ;RTEPTR := RANDTB entry
 BNE #10 ;Not found

;Inspect arg in ARGE

 LDYIM ARGE
 LDAIY ARGPTR
 LSRA
 BEQ #20 ;0 => set SFP
            ;1 => set HWM

 LDAIM RDERRM ;"Bad arg to RDSTAR"
10 JMP #40

;Set seq file ptr

;IF newSFP < size THEN oldSFP = newSFP
;ELIF openforwriting THEN resize file: HWM = newSFP: oldSFP = newSFP
;ELSE IF newSFP <> size THEN error ELSE oldSFP = newSFP

20 BCS #50 ;A = 1 => set extent of file
 SEC
 LDYIM ARGF
 LDAIY ARGPTR
 LDYIM RTFSZE
 SBCIY RTEPTR ;Do RNDTMP := SFP - size
 STA RNDTMP
 LDYIM ARGG
 LDAIY ARGPTR
 LDYIM RTFSZE+1
 SBCIY RTEPTR
 STA RNDTMP+1
 LDYIM ARGH
 LDAIY ARGPTR
 LDYIM RTFSZE+2
 SBCIY RTEPTR
 ORA RNDTMP
 ORA RNDTMP+1
 BCC #35 ;Set SFP = new SFP as size > SFP

;Here SFP >= size, so attempt to point
;outside file. If open for update, resize
;else if SFP <> size then error else set SFP = new SFP

25 PHP ;Push Z flag indicating SFP = size
 LDYIM HTMODE
 LDAIY HNDPTR ;Mode handle opened for
 ANDIM WRITAC ;Check if open for writing
 BNE #30 ;Yes, so resize

 PLP ;Not open for writing, so check if SFP=size
 BEQ #35 ;Yes, so set SFP
 LDAIM RDERRL ;No => "attempt to point outside file"
 [ $CMOS
 BRA #40 ;Error exit
 |
 BNE #40
 ]

30 PLP ;Restore stack, and resize file
 LDYIM ARGH
 LDAIY ARGPTR ;Set NEWFSZ to seq. ptr.
 STA NEWFSZ+2
 DEY
 LDAIY ARGPTR
 STA NEWFSZ+1
 DEY
 LDAIY ARGPTR
 STA NEWFSZ
 JSR RDCHSZ ;Change size of file
 BNE #40 ;Error => exit

;Copy SFP into RANDTB

35 LDAIM ARGF
 STA OFF1
 LDAIM RTCSFP
 JSR #90 ;Set current seq. ptr.
 LDAIM RTOSFP ;Set old seq. ptr. as well
 JSR #90
 JSR RDSHWM ;**1/6/88** set HWM if SFP > old HWM
37 LDAIM 0 ;Return code
40 JMP RDEXIT ;Return - RC in A

50 LDYIM HTMODE
 LDAIY HNDPTR
 ANDIM WRITAC
 BNE #55 ;open for update
 LDAIM RDERRN ;not open for update
 [ $CMOS
 BRA #40 ;Error exit
 |
 BNE #40
 ]

55 LDYIM ARGF
 LDXIM :LSB:-3
60 LDAIY ARGPTR
 STAAX NEWFSZ-:LSB:(-3)
 INY
 INX
 BNE #60

 LDYIM RTHWM+2
 LDXIM 2
65 LDAIY RTEPTR
 CMPAX NEWFSZ
 BNE #70
 DEY
 DEX
 BPL #65
 [ $CMOS
 BRA #80 ;All ok
 |
 BMI #80
 ]

;exactly the same size so NOP here

70 LDYIM RTHWM
 LDAIY RTEPTR
 STA TEMPA ;save current extent
 ROLA
 STA TEMPB ;save carry as well

;C=0 => extending the file

 RORA
 BCC #75

;if decreasing file then must flush all blocks
;else cache may be left with antiquated data

 LDAIM 5
 JSR SETRTN
 JSR RDDSIN
 JSR STRMAN ;flush all blocks
 BNE #40

75 JSR RDCHSZ ;call changesize
 BNE #40

80 JSR #88 ;Having resized file, set HWM to ptr. value
 [ $CMOS
 BRA #37
 |
 JMP #37
 ]

;Little space-saving routine

88 LDAIM ARGF
 STA OFF1
 LDAIM RTHWM
90 STA OFF2
 LDXIM ARGPTR
 LDYIM RTEPTR
 LDAIM 3
 JMP MOVBLK

 LNK Rman02A

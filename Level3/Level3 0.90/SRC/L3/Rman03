 OPT RMAN03 ;RNDMAN   >  Rman03
 TTL File server file RMAN03

;*** RDCHNT ***

;Checks the cache descriptor hint in a
;RANDTB entry.

;Entry: HNDPTR points to HANDTB entry
;RTEPTR points to RANDTB entry

;Exit:  A = RC: zero    => hint used, GENPTR set
;non-zero=> must call STRMAN instead
;GENPTR points to cache buffer (iff RC=0)

RDCHNT LDYIM RTDESC ;GENPTR := Cache descriptor hint
 LDAIY RTEPTR           ;from RANDTB entry
 STA GENPTR
 INY
 LDAIY RTEPTR
 STA GENPTR + 1

;Hint is invalid if it is zero (as it
;is when file first opened)

 ORA GENPTR ;OR both bytes of hint
 BEQ RDCHNZ ;Hint no good (zero)

;Must now check that the hint still points
;to the cache descriptor we want. (If it
;is not zero, it will always point to
;SOME cache descriptor).
;The descriptor is valid only if it has the
;right disc number and SIN, and if its start
;block is the one we want.

;*** Assumptions:
;***  1) Blocksize = 256 bytes (=> easy
;***     calculation of block number
;***  2) Cache buffers contain only one
;***     disc block

;Compare SINs first (more likely to
;be different than disc number).

 LDYIM HTSIN
 LDAIY HNDPTR
 LDYIM CESIN
 CMPIY GENPTR ;Compare LS bytes
 BNE RDCHNZ ;Different
 LDYIM HTSIN + 1
 LDAIY HNDPTR
 LDYIM CESIN + 1
 CMPIY GENPTR ;Compare CS bytes
 BNE RDCHNZ ;Different
 LDYIM HTSIN + 2
 LDAIY HNDPTR
 LDYIM CESIN + 2
 CMPIY GENPTR ;Compare MS bytes
 BNE RDCHNZ ;Different

;SIN OK - check disc no.

 LDYIM HTDISC ;Compar disc nos.
 LDAIY HNDPTR
 LDYIM CEDISC
 CMPIY GENPTR ;Compare LS bytes
 BNE RDCHNZ ;Different - hint no good
 LDYIM HTDISC + 1
 LDAIY HNDPTR
 LDYIM CEDISC + 1
 CMPIY GENPTR ;Compare MS bytes
 BNE RDCHNZ ;Different

;Disc no. OK - Check block no.
;(should be equal to top 2 bytes of
;sequential file pointer).

 LDYIM CEBKNO
 LDAIY GENPTR ;LS byte of block no.
 LDYIM RTCSFP + 1
 CMPIY RTEPTR ;Comp with CS byte of SFP
 BNE RDCHNZ ;Different
 LDYIM CEBKNO + 1
 LDAIY GENPTR ;MS byte of block no.
 LDYIM RTCSFP + 2
 CMPIY RTEPTR ;Comp with MS byte of SFP
 BNE RDCHNZ ;Different

;The hint is OK.
;Copy buffer address to GENPTR (which
;currently points to cache descriptor).

 LDYIM CESTA
 LDAIY GENPTR ;LS byte of buff addr
 PHA  ;Save for now
 INY
 LDAIY GENPTR ;MS byte of buff addr
 STA GENPTR + 1 ;GENPTR := buff addr
 PLA
 STA GENPTR ;LS byte

 LDAIM  0 ;Success - hint used
 RTS

RDCHNZ LDAIM &FF ;Hint no good
 RTS



;************ RDCLAF ************


;RDCLAF: Close all files for the calling machine

;Entry:  ARGB = Ptr to user info (LS)
;ARGC = Ptr to user info (MS)

;Exit:   ARGA = Return code


RDCLAF JSR INITRD ;Set GENPTR & MCNUMB & RDUPTR (extra copy of user ptr.)
 JSR INITHD ;Set HNDPTR and X

RDCLFA LDYIM HTMCNO
 LDAIY HNDPTR ;Get mc no. from HANDTB entry
 CMP MCNUMB ;Same as client machine?
 BNE RDCLFB ;LS bytes differ
 INY
 LDAIY HNDPTR ;MS byte
 CMP MCNUMB + 1
 BNE RDCLFB ;MS bytes differ

;Entry is for this machine.
;See if the object is a file.

 LDYIM HTACC
 LDAIY HNDPTR ;Object type & access
 ANDIM TYPE
 CMPIM TYPDIR ;Is it a directory?
 BEQ RDCLFB ;Jump if yes

;Entry is for a file for this mc.

 LDA RDUPTR
 STA GENPTR
 LDA RDUPTR + 1
 STA GENPTR + 1 ;Set pointer to user info (corrupted over CLRHTE)

 TXA  ;Save X
 PHA
 JSR CLRHTE ;Close the file

 BEQ RDCLFJ ;ok here
 TAX
 PLA ;tidy stack
 TXA ;return error code 
 BNE RDCLFX ;**** 17/3/83 ****

RDCLFJ PLA
 TAX

RDCLFB JSR INCHND ;Inc pointer
 BNE RDCLFA ;Look at next entry

 LDAIM  0 ;Return code
RDCLFX JMP RDEXIT ;Return


;************ RDSUBO ************

;RDSUBO: Set up for PUTBYTES/GETBYTES operation

;Entry:  ARGB = LS ptr to user info
;ARGC = MS  "   "   "   "
;ARGD = file handle
;ARGE = Seq. no. received
;ARGF = Flag: 0 => use given offset
;NOT 0 => use SFP in RANDTB
;ARGG = LS total no. of bytes
;ARGH = CS   "    "   "   "
;ARGI = MS   "    "   "   "
;ARGJ = LS Offset in file
;ARGK = CS (only if flag=0)
;ARGL = MS   "
;
; Side effect:
;    OLDSZE is set to old HWM
;    OLDSZE+3 is zero if area of disc has
;    to be zeroed on a write
;
RDSUBO LDAIM 1
 STA OLDSZE +3
 JSR INITRD
 LDYIM ARGD
 LDAIY ARGPTR ;A := handle
 JSR FNDHND ;HNDPTR := HANDTB entry
 BNE RDSUBZ ;Not found - exit

 JSR SETRPT ;RTEPTR := RANDTB entry
 BNE RDSUBZ ;Not found

 JSR RDCSEQ ;Check seq no and set SFP accordingly

 LDYIM ARGF
 LDAIY ARGPTR ;A := flag
 BNE RDSUBA ;Offset not supplied

;Offset supplied : set SFP to offset

 LDYIM RTHWM ;GET CURRENT HWM
 LDAIY RTEPTR
 STA OLDSZE
 INY
 LDAIY RTEPTR
 STA OLDSZE + 1
 INY
 LDAIY RTEPTR
 STA OLDSZE + 2
 LDAIM  0 ;ZERO FLAG
 STA OLDSZE + 3
 LDYIM ARGJ ;CHECK IF NEW SIZE LARGER THAN OLD
 LDA OLDSZE
 CMPIY ARGPTR
 INY
 LDA OLDSZE + 1
 SBCIY ARGPTR
 INY
 LDA OLDSZE + 2
 SBCIY ARGPTR
 BCC RDSSI
 INC OLDSZE + 3
RDSSI
 LDYIM ARGJ
 LDAIY ARGPTR ;Offset (LS)
 LDYIM RTCSFP
 STAIY RTEPTR ;LS byte
 LDYIM ARGK
 LDAIY ARGPTR
 LDYIM RTCSFP + 1
 STAIY RTEPTR ;CS byte
 LDYIM ARGL
 LDAIY ARGPTR
 LDYIM RTCSFP + 2
 STAIY RTEPTR ;MS byte

RDSUBA JSR RDCKSP ;Check SFP inside file
 BNE RDSUBX ;SFP outside file

 LDAIM  0 ;rc
RDSUBZ JMP RDEXIT

RDSUBX PHA
 JSR RDBACK ;restore SFP to old SFP
 PLA
 JMP RDEXIT

 LNK RMAN04

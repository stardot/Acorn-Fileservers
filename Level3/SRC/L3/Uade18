 OPT UADE18 ;FILE > Uade18
 TTL File server file UADE18

;Random access and RENAME & User Info


;***************
;* R E N A M E *
;***************

;Rename file <A> as <B>
;
;1) Buffer both file names, call DIRMAN.CHECKDISCNOS
;2) Retrieve A. Check owner access, is a file, is unlocked
;3) Preserve name B with details of A
;4) If old SINofB = SINofA, renaming same file -> return
;5) Else, clear oldB from map, and delete A from dir (not map!)

RENAME ROUT
 STY COTEMP
 JSR GETUSE
 BNE Datoux

 LDY COTEMP ;pointer into MIDRX
 JSR BUFTXT ;Buffer name A
 BNE #10 ;Exit via extra jump
 INX
 STX COTEMP ;Store offset of B in TXTBUF
 JSR BTXTA ;Buffer name B
 BNE #10 ;Exit via extra jump
 JSR COMEND ;Check to end of command line
 BNE #10 ;Exit via extra jump

;** 24/9/84 **

;Substantial rewrite to allow renaming of directories
;The actual mechanics are identical to renaming files
;but lots of checking for loops in directories needs to be
;done, which means that full pathname expansion is called for

 LDA BBUF
 STA PTR
 LDA BBUF+1
 STA PTR+1

 LDAIM 0
 STA REXIST ;full wild card lookup
 JSR RNAMLK ;do the checking for existence etc.
 BNE #10 ;fail

 STX RTYPE ;type of object that we've found
 CLC
 LDA PTR
 STA PTR1
 ADCIM :LSB:INFNXT
 STA PTR

 LDA PTR+1
 STA PTR1+1
 ADCIM :msb:INFNXT
 STA PTR+1 ;new result area

;PTR =lastname and info <B>
;PTR1=lastname and info <A>

 LDA COTEMP ;offset of name <B>
 JSR RNAMLK ;similar checking as for <A>
 BEQ #15 ;all succeeded [but may not be ok !]

 LDXIM 0 ;no object returned so no type either
 CMPIM DRERRC ;'not found' in final part of name
10 BNE #45 ;failed for some serious reason
 ROR REXIST ;object <B> done NOT exist (=>&80)
 [ 1=0 ; removed, INFDIS set if B does not exist ** 14/10/86 **
 BMI #20 ;if so then skip disc number check
 ]

;now look for rename across discs

15 LDYIM INFDIS
 LDAIY PTR
 CMPIY PTR1
 BNE #40 ;failed here
 INY
 LDAIY PTR
 CMPIY PTR1
 BNE #40 ;failed here too

20 LDA RTYPE ;look for file/dir
 ANDIM TYPDIR
 BEQ #55 ;file so ok

;now look for loops in directories

 LDYIM 0 ;from the beginning
 STY LAST
 STY NAME
 LDX COTEMP ;starts with "$" ?
 LDAAY TXTBUF
 JSR RNAMPD ;**20/5/87** check root or pseudo directory
 BNE #25
 STA NAME ;**20/5/87** store root or pseudo directory name
 LDAAY TXTBUF+1
 JSR RNAMPT ;**20/5/87** check separator/terminator
 BNE #25
 INC LAST
25 LDAAX TXTBUF
 JSR RNAMPD ;**20/5/87** check root or pseudo directory
 BNE #28
 EOR NAME ;**20/5/87** zero if same root or pseudo directory as A?
 STA NAME
 LDAAX TXTBUF+1
 JSR RNAMPT ;**20/5/87** check separator/terminator
 BNE #28
 DEC LAST
28 ;X=0 or fail here
 LDA LAST ;test for mismatch
 BNE #40 ;bad rename
 LDA NAME ;**20/5/87** A & B must be in same or no pseudo directory
 BNE #40

30 LDAAY TXTBUF
 JSR ISCHAR
 BCS #32
 ANDIM &DF ;force upper case
32 CMPIM TERMIN
 BEQ #50 ;bad, LEFT$<B>=$<A> unless $<A>=$<B>
 STA NAME
 LDAAX TXTBUF ;mismatch in names is essential
 JSR ISCHAR ;force case on both chars
 BCS #35
 ANDIM &DF
35 CMP NAME ;match against other name
 BNE #37
 INX
 INY
 BNE #30

37 BIT REXIST ;different names so <B> must NOT exist
 BMI #55

40 LDAIM RNAMQQ ;bad rename error string
45 JMP ERROR

50 LDAAX TXTBUF ;check for subdirectory here
 CMPIM SEPART ;** 27/3/85 **
 BEQ #40
55 JSR STKUSE ;Set up PRESERVE call for A details, named B
 LDA COTEMP
 JSR SETTXP ;put name to stack

 INY
 STY NAME
 LDAIM INFLOA
 STA ONAME ;counters
 LDXIM 17

60 LDY ONAME
 LDAIY PTR1
 LDY NAME
 STAIY NEWARG
 INC ONAME
 INC NAME
 DEX
 BNE #60 

 LDAIM 12
 JSR SETRTN ;Do DIRMAN.PRESERVE (without DELCHK)

 LDYIM ARGT
 LDAIM &80 ;enable wildcards
 STAIY NEWARG ;wild card flag

 JSR DIRMAN
 BNE #45

 BIT REXIST ;did <B> exist
 BMI #80 ; .. no ..

 LDXIM 3
 LDYIM INFSIN+2
65 LDAIY PTR
 CMPIY PTR1
 BNE #70
 DEY
 DEX
 BNE #65

70 TXA
 BEQ #85 ;if identical then NOP

75 JSR OBJCLR ;Clear old B from map (if SIN <> zero)
 BNE #45 ;Error exit

;Then finally delete name A from directory

80 JSR STKUSE
 JSR SBUFPT ;Set pointer to TXTBUF
 LDAIM 11 ;** 24/9/84 **
 JSR SETRTN

 LDYIM ARGG
 LDAIM &C0
 STAIY NEWARG ;wild card flag

 JSR DIRMAN ;Delete A
85 JSR RCODE ;Return success/failure and exit

90 JMP COMRTS


RNAMLK ROUT ;A=offset in TXTBUF of pathname for object
;PTR=results area

;retrieves object in TXTBUF, expanding pathname into !PTR
;checks object existence, pathname completeness,
;object owned, unlocked, not open

 PHA
 JSR STKUSE ;prepare for retrieve call
 PLA
 JSR SETTXP ;point to the name
 
 LDYIM ARGF
 LDA PTR
 STAIY NEWARG
 INY
 LDA PTR+1
 STAIY NEWARG ;pointer to results area
 INY
 LDAIM 0 ;no wildcards
 STAIY NEWARG

 LDAIM 2
 JSR SETRTN
 JSR DIRMAN ;call retrieve
 BNE #40 ;DIRMAN call failed

 LDYIM ARGB
 LDAIY NEWARG
 TAY

 ANDIM OWNER
 BNE #10
 LDAIM DRERRE ;'insufficient priv'
 RTS

10 TYA
 ANDIM LOCKED
 BEQ #20
 LDAIM DRERRG ;'entry locked'
 RTS

20 STY LAST ;preserve Type & access

;now check that it isn't open

 LDAIM ARGB
 STA NAME
 LDYIM INFDIS
 STY ONAME
 LDXIM 2
 JSR #50 ;copy disc no.

 LDAIM INFSIN
 STA ONAME
 LDXIM 3
 JSR #50 ;copy SIN

 LDAIM 2
 JSR SETRTN
 JSR RNDMAN ;ask for info
 PHA
 LDX LAST
 PLA
 BNE #30 ;RC=0 if open
 LDAIM RDERRH ;'already open'
 RTS

30 LDAIM 0 
40 RTS ;*** the end ** 

 
50 LDY ONAME
 LDAIY PTR
 LDY NAME
 STAIY NEWARG
 INC NAME
 INC ONAME
 DEX
 BNE #50
 RTS

RNAMPD ROUT ;**20/5/87** check name for root or pseudo directory
 CMPIM ROOT
 BEQ #10
 JMP Testpd

RNAMPT ;**20/5/87** check separator or terminator
 CMPIM SEPART
 BEQ #10
 CMPIM TERMIN
10 RTS


;**************
;* USER INFO  *
;**************


CPUINF ROUT

 JSR STKUSE
 BNE #30 ;Who are you

 LDAIM HDRLEN ;Offset of user name
 JSR SETFTP ;Set ptr. to user name

 LDAIM 6 ;USRMAN.USERINFO
 JSR SETRTN

 JSR USRMAN
 BNE #40

 LDYIM ARGB
 LDAIY NEWARG
 [ 1=0
 LDXIM 0 ;calculate privilege value ; *** 25/5/86 ***
 BITIM SYSTPV
 BEQ #10
 LDXIM 1
10 BITIM LOPRIV
 BEQ #20
 LDXIM 2
20 STX MIDTX
 |
 ANDIM SYSTPV ;calculate privilege value ;**31/10/86**
 STA MIDTX
 ]
 INY ;copy station address
 LDAIY NEWARG
 STA MIDTX+1
 INY
 LDAIY NEWARG
 STA MIDTX+2
 INY
 LDAIY NEWARG ;**20/5/87** return job (task) number
 LSRA ;**20/5/87** position job (task) number
 LSRA
 LSRA
 STA MIDTX+3 ;**20/5/87** assume extended format
 
 LDX BPTR
 LDAAX RXBUF+1 ;**20/5/87** check function code
 CMPIM (FNuin2-FNtab)/2 ;**20/5/87** C set if extended function
 LDAIM TXHDR+3 ;Message length
 BCC #20
 LDAIM TXHDR+4
20 JSR REPLYC ;Return message
Cpuinx
30 JMP COMRTS

40 JSR RCODE ;Send error
 JMP #30



;*************
;* C L O S E *
;*************

CPSHUT JSR STKUSE
 BNE #30
 LDX BPTR
 LDAAX MIDRX ;Get old handle
 BEQ #50 ;Handle=0 => close all files for machine

 INY
 STAIY NEWARG
 LDAIM 3 ;"Close handle"
 BNE #60

50 LDAIM &D ;"Close all files"
60 JSR SETRTN
 JSR RNDMAN
 JMP #40

;********
;* FIND *
;********

;Open a file for reading or update,
;or open a directory

;Entry: BPTR is offset of buffer in RXBUF
;QPTR is offset of control block in RXCBV

FIND ROUT
 LDAIM 0
 STA COTEMP ;** 15/11/84 ** used to build access byte

 JSR GETUSE ;Set mc no. and call FINDMC
 BNE Cpuinx ;Fail, exit

;USTPTR now points to user info.
;Check if need to create a new file
;or if existing one will do. Then either create or retrieve
;new or existing file.

 LDX BPTR
 LDAAX MIDRX+1
 BNE #30 ;Not opening for update
 LDAAX MIDRX
 BNE #30 ;File must exist => don't create

 JSR FICRFL ;Otherwise, create file and forge retrieve info.
 BNE #45 ;Error

 LDAIM FILEJC ;Set "just created" flag in mode
 ORA COTEMP
 STA COTEMP
 BNE #40 ;Skip round retrieve since we have all info. already

30 JSR FIRETR ;Retrieve details of existing file
 BNE #45

40 LDYIM ARGB
 LDAIY NEWARG ;Get access allowed and type
 TAX
 ANDIM RDWRAC+TYPE
 BNE #50 ;File, no read or write access

 LDAIM DRERRE
45 JMP Error ;insufficient access

50 LDYIM ARGE
 TXA
 STAIY NEWARG ;Set up for RNDMAN call
 PHA ;save access byte

 LDAIM 1 ;RNDMAN.OPEN
 JSR SETUSA ;Copy USTPTR onto stack

;Mode so far is in COTEMP - may need write
;access bit setting.

 PLA ;restore access byte
 LDX BPTR
 LDYAX MIDRX+1 ;Get read flag from  client
 BNE #60 ;Jump if set

 ANDIM 3 ;supply just the public access bits
 JMP #65 ;fall thru' IS ok here

; ORAIM RDWRAC ;Set Read/Write access

60 LDAIM READAC
65 ORA COTEMP
 LDYIM ARGD
 STAIY NEWARG ;Put mode on stack

 INY  ;Y := ARGE
 JSR SCOWPT ;Put COWORK ptr on stack

 JSR RNDMAN ;*** Call RNDMAN.OPEN **
 BNE #90 ;Open failed

;Open worked - return handle

 LDYIM ARGB
 LDAIY NEWARG
 STA MIDTX ;Store handle in TX buffer

 LDA COTEMP
 ANDIM FILEJC ;DATE ALREADY SET IF JUST CREATED
 BNE #70
 LDY BPTR
 LDAAY MIDRX+1 ;updating file ?
 BNE #70
 LDA DATE ;Check date and skip update if unchanged
 CMP COTEMP+INFDTE
 BNE #67
 LDA DATE+1
 CMP COTEMP+INFDTE+1
 BEQ #70
67 LDAIM 4 ;DIRMAN.SET ATTRIBUTES
 JSR SETUSA ;USER INFO
 LDAIM FNDFTO ;POINTER TI FILE TITLE
 JSR SETFTP ;FILE TITLE POINTER TO STACK
 INY
 LDAIM &C0 ;** 19/11/84 ** only updates one entry
 STAIY NEWARG ;SET WILD CARD FLAG
 INY
 LDAIM 5 ;SET DATE FUNCTION
 STAIY NEWARG
 INY
 LDA DATE
 STAIY NEWARG ;PUT IN CURRENT DATE
 INY
 LDA DATE+1
 STAIY NEWARG
 JSR DIRMAN ;SET TODAYS DATE ON OBJECT
 BNE #90 ;SHOULDN'T FAIL!!!

70 LDAIM TXHDR+1 ;Message length
 JSR REPLYC ;Send handle back

80 JMP COMRTS ;Return

90 JSR EXTERR ;Send error code
 JMP #80 ;exit


;*** FIRETR ***

;Called from FIND to retrieve file details.
;Calls DIRMAN.RETRIEVE

;Entry: USTPTR points to USERTB entry
;File title stil in RX buffer

;Exit:  A: return code
;COWORK buffer: file details
;ARGB on NEWARG: max access allowed

FIRETR ROUT
 LDAIM DRRTR ;DIRMAN.RETRIEVE
 JSR SETUSA ;Put user info on NEWARG stack

 LDAIM FNDFTO ;File title offset
 JSR SETFTP ;Set file title pointer

 JSR SCOWPT

 LDYIM ARGH
 LDAIM &C0
 STAIY NEWARG ;wild card flag

 JMP DIRMAN ;*** Call DIRMAN.RETRIEVE and return **


;*** FICRFL ***

;Called to create new file in FIND.
;File is created with standard size of FIFLSZ bytes.

;Entry: USTPTR points to user info
;File title in request buffer

;Exit:  A = return code
;COWORK buffer: file details as if from
;DIRMAN.RETRIEVE

FICRFL ROUT
 LDAIM 10 ;=> get disc number for this file
 JSR SETUSA
 LDAIM FNDFTO
 JSR SETFTP ;Set pointer to file title

 LDYIM ARGK
 LDAIM &80
 STAIY NEWARG ;wild card flag

 JSR DIRMAN ;DIRMAN.FILETITLETODISCNUMBER
 BNE #10

;Correct disc number now on stack

 LDYIM ARGD ;Set file size to manifest FIFLSZ
 LDAIM :LSB:FIFLSZ
 STAIY NEWARG ;LS byte
 INY
 LDAIM :MSB:FIFLSZ
 STAIY NEWARG ;CS byte
 INY
 LDAIM 0 ;MS byte zero
 STAIY NEWARG

 JSR SETUSE ;pass userinfo @ ARGG,H ** 3/10/84 **

 LDAIM MAPCS ;MAPMAN.CREATESPACE
 JSR SETRTN

 JSR MAPMAN ;*** MAPMAN.CREATSPACE **
 BEQ #20
10 RTS  ;Exit if failed

;Disc number and SIN on stack.
;Save them in COWORK (=DETRAM) buffer in
;DIRMAN.RETRIEVE format.

20 LDYIM ARGB
 LDAIY NEWARG ;Disc no. (LS)
 STA DETDIS
 INY
 LDAIY NEWARG ;Disc no. (MS)
 STA DETDIS+1

 LDYIM ARGD
 LDAIY NEWARG ;SIN (LS)
 STA DETSIN
 INY
 LDAIY NEWARG ;SIN (CS)
 STA DETSIN+1
 INY
 LDAIY NEWARG ;SIN (MS)
 STA DETSIN+2

;zero the new space

 LDYIM ARGG
 LDAIM 0 ;old size
 STAIY NEWARG
 INY
 STAIY NEWARG
 INY
 STAIY NEWARG

 LDAIM 13
 JSR SETRTN
 JSR MAPMAN
 BNE #10 ;exit if error

;Preserve the newly created file

 LDAIM DRPRS ;DIRMAN.PRESERVE
 JSR SETUSA ;Set user info on NEWARG stack

 LDAIM FNDFTO ;Offset of file title
 JSR SETFTP ;Set pointer to title

 LDAIM &FF ;Clear load & exec addresses to $FF

30 INY
 STAIY NEWARG
 CPYIM ARGM ;ARGM is end of exec address
 BNE #30 ;Loop

 LDAIM ACCDEF+TYPFIL ;Default access; Type = file
 INY
 STAIY NEWARG ;Set type & access

 INY  ;Set creation date
 LDA DATE
 STAIY NEWARG
 INY
 LDA DATE+1
 STAIY NEWARG

;Copy SIN from COWORK (=DETRAM) to NEWARG stack

 LDA DETSIN ;SIN (LS)
 INY
 STAIY NEWARG
 LDA DETSIN+1 ;SIN (CS)
 INY
 STAIY NEWARG
 LDA DETSIN+2 ;SIN (MS)
 INY
 STAIY NEWARG

 LDYIM ARGT
 LDAIM &80
 STAIY NEWARG ;wild card flag

 JSR DIRMAN ;*** Call DIRMAN.PRESERVE **
 BNE #40 ;Failed
 JSR OBJCLR ;Clear old object out of map & cache if nesc.
 BNE #40 ;**** 17/3/83 ****

;Have created file: fabricate DIRMAN.RETRIEVE info
;in DETRAM buffer (disc no. and SIN already there)
;and on NEWARG stack.  Need to include only access
;info and size.

 LDAIM ACCDEF ;Default access
 STA DETACC

 LDAIM :LSB:FIFLSZ ;Size (LS)
 STA DETSZ
 LDAIM :msb:FIFLSZ ;Size (CS)
 STA DETSZ+1
 LDAIM 0
 STA DETSZ+2 ;Size (MS)

;Need to put type of object & max access
;allowed on NEWARG stack at ARGB (because
;DIRMAN.RETRIEVE does).

 LDAIM RDWRAC+TYPFIL ;Read/write access; Type = file
 LDYIM ARGB
 STAIY NEWARG

 LDAIM 0 ;return code
 RTS

;Failed to do preserve - must free space

40 STA COTEMP+1 ;Save RC

 JSR FIDSIN ;Disc no. & SIN to stack

 LDYIM ARGF
 JSR SETUSE ;pass pointer to user info ** 3/10/84 **

 LDAIM MAPFS ;MAPMAN.FREESPACE
 JSR SETRTN

 JSR MAPMAN ;*** MAPMAN.FREESPACE **
 BEQ #50 ;OK
 JSR INTERR ;Never happens?

50 LDA COTEMP+1 ;Get back RC from Preserve
 RTS


;*** FIDSIN ***

;Copy disc no. and SIN from DETRAM (=COWORK) buffer
;to NEWARG stack

FIDSIN ROUT
 LDYIM ARGB
 LDA DETDIS ;Disc no (LS)
 STAIY NEWARG
 LDA DETDIS+1 ;Disc no (MS)
 INY
 STAIY NEWARG

 LDA DETSIN ;SIN (LS)
 INY
 STAIY NEWARG
 LDA DETSIN+1 ;SIN (CS)
 INY
 STAIY NEWARG
 LDA DETSIN+2 ;SIN (MS)
 INY
 STAIY NEWARG
 RTS



;***********
;*  E O F  *
;***********

CPEOF ROUT

;Calls RDEOF and returns $FF if HWM<=SFP, zero
;otherwise.

 JSR STKUSE
 BNE #05 ;User not valid

 LDX BPTR
 LDAAX MIDRX
 INY
 STAIY NEWARG ;Set handle of file
 LDAIM &F
 JSR SETRTN
 JSR RNDMAN ;Do End of File call
 BNE #06 ;Error -> pass on
 LDYIM ARGB
 LDAIY NEWARG ;Get result from randman
 STA MIDTX
 LDAIM TXHDR+1
 JSR REPLYC
05 JMP COMRTS

06 JSR RCODE ;Return error
 JMP COMRTS

;*****************************
;* Return free space on disc *
;*****************************

CPSPAC
 JSR RDTITL
 BNE #05 ;syntax error ?

 LDAIM 10
 JSR SETRTN
 JSR SBUFPT ;put pointer on stack

 JSR MAPMAN ;name -> number
 BNE #20 ;skip on error

;returns:
;ARGB = LS disc number
;ARGC = MS disc number

 LDAIM 12 ;new entry point 21/3/83
 JSR SETRTN

 JSR MAPMAN
 BNE #20 ;skip on error

 LDXIM 5
 LDYIM ARGG ;ready to copy data back
10 LDAIY NEWARG
 STAAX MIDTX
 DEY
 DEX
 BPL #10 ;return three bytes

 LDAIM TXHDR+6 ;message length
 JMP Datout ;send back result

20 JMP Error


;return callers free space

RDFREE ROUT
 JSR STKUSE
 BNE #70
 
 LDYIM ARGC
 LDX BPTR
 LDAAX MIDRX
 CMPIM CR
 BNE #20 ;no argument

 LDA USTPTR
 CLC
 ADCIM UTUSID
 STA USTPTR
 BCC #10
 INC USTPTR+1
10 JSR SETUSE ;set the user pointer on stack
 JMP #30

20 LDAIM HDRLEN+0
 JSR SETFTP ;point to user name

30 LDAIM 9
 JSR SETRTN
 JSR AUTMAN
 BNE #50
 
 LDXIM 3
 LDYIM ARGB+3
40 LDAIY NEWARG
 STAAX MIDTX
 DEY
 DEX
 BPL #40
 LDAIM HDRLEN+4
 JMP Datout

50 JMP ERROR

;set user free space

WRFREE JSR STKUSE
 BNE #70

 LDYIM ARGC
 LDAIM HDRLEN+4 ;offset of name
 JSR SETFTP ;pointer to name

 LDX BPTR
 LDYIM ARGF
60 LDAAX MIDRX
 STAIY NEWARG
 INX
 INY
 CPYIM ARGF+4
 BNE #60

 LDAIM 10
 JSR SETRTN
 JSR AUTMAN
 JSR RCODE ;reply with zero RC
70 JMP COMRTS ;else all ok

 LNK UADE19

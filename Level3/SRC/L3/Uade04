 OPT UADE04 ; FILE > Uade04
 TTL File server file UADE04


;*********************************
;*   FILE SERVER INITIALISATION  *
;*********************************


INIT ROUT
 LDAIM 7
 JSR SETRTN
 JSR MAPMAN ;MAPMAN.RESTART
 BNE #10

 LDAIM 4
 JSR SETRTN
 JSR USRMAN ;USRMAN.RESTART
 BNE #10

 LDAIM 4
 JSR SETRTN
 JSR RNDMAN ;RNDMAN.RESTART
 BNE #10

 LDXIM &1F
 LDYIM  2
 JSR SETTAB ;Table of qualifiers/directory handles
 STY CDIRTB ;for DOS conversion.
 STX CDIRTB+1

 LDAIM 6
 JSR SETRTN
 JSR STRMAN ;STRMAN.RESTART
00 BEQ #20
10 PHA
 JSR USRERR
 PLA
20 RTS

RSTAUT LDAIM 6
 JSR SETRTN ;AUTMAN.RESTART
 JSR AUTMAN
 JMP #00

STRTFS ROUT

 CLD

 JSR MEMTST ;Test memory.
 BEQ ASKDAT ;OK

 JSR VSTRIN
 = "Memory fault found",CR
 = "File Server unable to start",CR
 = "Ended",CR
 NOP
 RTS  ;STOP !!

ASKDAT ROUT 
 [ DONGLE=0
 JSR RTC
 BEQ #10
 JSR VSTRIN
 = CR,"Clock Failure",CR
 NOP 
 JMP TSTART ; .. that's all folks ..

 |

 JSR STDATE ;FIND OUT THE DATE if no RTC

 ]
10 JSR RDTIME
 JSR RDDRVS ;HOW MANY DRIVES?



INITCO ROUT ;INITCO

;Main start point of any FS command.
;Resets ENDPTR, FREPTR and re-allocates all tables.
;NOTE !! It is therefore assumed that maps etc.
;have been ensured to disc !!

 LDAIM :LSB:DYNSTA
 STA FREPTR
 LDAIM :MSB:DYNSTA
 STA FREPTR+1 ;FREPTR := DYNSTA

 LDA MEMEND
 STA ENDPTR
 LDA MEMEND+1
 STA ENDPTR+1

;GET SOME SPACE FOR THE ARGUMENT STACK AND SETUP ARGPTR

 LDYIM :LSB:STKSZE
 LDXIM :MSB:STKSZE
 JSR GETVEC
 STY ARGPTR
 STX ARGPTR+1

;NOW CLEAR THE ARGUMENT STACK TO ZERO

 STY CLRPTR
 STX CLRPTR+1 ;CLRPTR:=ADDR OF ARGUMENT STACK
 LDYIM :LSB:STKSZE
 LDXIM :MSB:STKSZE
 JSR CLRSTR

 JSR VSTRIN
 = CR,"Command :"
 NOP
 JSR CURSON
 JSR OSECHO
 PHA
 JSR CURSOF
 PLA
 LDXIM 4
10 CMPAX FSCTBA
 BEQ #20
 DEX
 BPL #10

 JSR VSTRIN
 = CR,"S, A, * ONLY"
 NOP
 JMP INITCO

20 TXA
 ASLA
 TAX
 LDAAX FSCTBB
 STA TEMPA
 LDAAX FSCTBB+1
 STA TEMPA+1
 JMI TEMPA

FSCTBA = "SA*sa"

FSCTBB & STRTUP
 & ASKDAT
 & OSCMD
 & STRTUP
 & ASKDAT

OSCMD JSR RDLINE
 LDXIM 0
 LDYIM 1
 JSR OSCLI
 JMP INITCO

;NORMAL FILE SERVER STARTUP
STRTUP ROUT
 JSR RDUSRS
 LDAIM 1
 JSR SETFS
 JSR INIT
 BEQ #10
 JMP INITCO ;Error => do again

10 LDXIM :LSB:DOBRK
 LDYIM :MSB:DOBRK
 JSR SETBRK
 JSR RSTAUT ;RESTART AUTMAN
 JMP CMND ;JUMP TO FILE SERVER COMMAND PROCESSOR



RDDRVS ROUT
 JSR VSTRIN ;FINDOUT HOW MANY DRIVES THERE ARE
 = CR,"Number of drives:"
 NOP
 JSR RDLINE
 JSR GETINT ;INTEGR:=NUMBER OF DISCS
 BNE RDDRVS
 LDA INTEGR + 1
 BNE RDDRVS
 LDA INTEGR
 BEQ RDDRVS
 STA DRIVES ;DRIVES:=NUMBER OF DRIVES ATTACHED TO FS
 RTS



STDATE ROUT

 [ DONGLE=1 ;ie dongle absent

;If here, no time chip, so prompt for date

10 JSR VSTRIN ;SETUP THE DATE
 = CR,"Date (DD/MM/YY) = "
 NOP

 JSR RDLINE ;READ A COMPLETE LINE
 JSR GETINT ;GET DAY
20 BNE #10
 LDA INTEGR+1
 BNE #10
 LDA INTEGR
 STA DATE ;LS(DATE) := DAY
 LDAIY COMPTR
 CMPIM "/"
30 BNE #20
 JSR INCCOM ;COMPTR +:=1
 JSR GETINT ;GET MONTH
 BNE #30
 LDA INTEGR+1
 BNE #30
 LDA INTEGR
 ANDIM &F0
 BNE #10
 LDA INTEGR
 ANDIM &F
 STA DATE+1 ;LS(DATE+01) := MONTH
 LDAIY COMPTR
 CMPIM "/"
 BNE #30
 JSR INCCOM ;COMPTR +:=1
 JSR GETINT ;GET YEAR
 BNE #30
 LDA INTEGR+1
40 BNE #30
 LDA INTEGR
 SEC
 SBCIM BASEYR ;SUBTRACT 81
 BCS #50 ;**24/2/88** br if 19xx
 ADCIM 100 ;**24/2/88** correct if 20xx
50 JSR SETYR ;Set year nybble
 LDAIM  0
 STA DATE+2 ;With no time chip, day = 0
 JSR CHKDTE
 BNE #40
 JSR PRDTE
 ]
 RTS

CHKDTE ROUT
 LDA DATE
 STA DAYS
 BEQ #40
 CMPIM 32
 BCS #40
 LDA DATE+1
 STA MUNTHS
 ANDIM &F
 BEQ #40
 CMPIM 13
 BCS #40
 CMPIM 2
 BEQ #20 ; br to check leap year
 LDA DATE
 CMPIM 31
 BCC #30
 LDXIM 4
 LDA DATE+1
 ANDIM &F
10 CMPAX MW30D-1
 BEQ #40
 DEX
 BNE #10
 BEQ #30

20 LDA DATE
 CMPIM 29
 BCC #30
 CMPIM 30
 BCS #40
 LDA DATE+1
 LSRA
 LSRA
 LSRA
 LSRA
 ADCIM BASEYR
 ANDIM 3
 BNE #40
30 LDAIM 0
 RTS

40 LDAIM 1
 RTS

;PRNTDG: PRINT A DECIMAL NUMBER < 100
;ENTRY A:= NUMBER. C clear if to print leading zeroes

PRNTDG ROUT

 LDXIM &FF
 SEC
10 INX
 SBCIM &0A
 BCS #10
 ADCIM &0A

 PHA
 TXA  ;OUTPUT TOP DIGIT

 BEQ #20
15 JSR #40
 JMP #30
20 LDAIM " "
 JSR OSWRCH
30 PLA
40 CLC
 ADCIM "0"
 JMP OSWRCH


RDUSRS ROUT
 JSR VSTRIN
 = CR,"Stations:"
 NOP

 JSR RDLINE
 JSR GETINT
 BNE RDUSRS
 LDA INTEGR+1
 BNE RDUSRS
 LDA INTEGR
 BEQ RDUSRS
 STA USERS

 CMPIM MAXUSE+1 ; USRLIM
 BCS RDUSRS
 RTS

 [ DONGLE=1

RDTIME ROUT
 JSR VSTRIN
 = CR,"Time (HH:MM:SS) = "
 NOP

 JSR RDLINE ;INPUT TIME
 JSR GETINT ;GET HOURS
 BNE RDTIME
 LDA INTEGR+1
 BNE RDTIME
 LDA INTEGR
 CMPIM 24 ;CHECK LESS THAN 24 HOURS
 BCS RDTIME
 STA HRS
 LDAIY COMPTR
 CMPIM ":" ;CHECK CORRECT SEPARATOR
 BNE RDTIME
 JSR INCCOM ;NEXT INTEGER
 JSR GETINT
 BNE RDTIME
 LDA INTEGR+1
10 BNE RDTIME
 LDA INTEGR
 CMPIM 60
20 BCS RDTIME
 STA MINS
 LDAIY COMPTR
 CMPIM ":" ;CHECK FOR SEPARATOR
 BNE #10
 JSR INCCOM
 JSR GETINT ;GET SECONDS
 BNE #10
 LDA INTEGR+1
 BNE #10
 LDA INTEGR
 CMPIM 60 ;CHECK LESS THAN 60
 BCS #20
 STA SECS

SETTME ROUT
 LDAIM 0
 LDXIM 4
10 STAAX TIME
 DEX
 BPL #10
 JSR ZEROTM
 LDA HRS
 STA OTIME ;PREPARE TO CALCULATE CENTISECONDS
 JSR M60 ;MULTIPLY BY 60
 JSR M60 ;DITTO
 JSR M100 ;TO GET CENTISECONDS
 JSR TIMADD ;KEEP TRACK OF TIME
 JSR ZEROTM
 LDA MINS
 STA OTIME
 JSR M60
 JSR M100 ;TO GET CENTISECONDS
 JSR TIMADD ;KEEP TOTAL
 JSR ZEROTM

 LDA SECS
 STA OTIME
 JSR M100 ;FOR CENTISECONDS
 JSR TIMADD ;KEEP TOTAL
 JSR TMTOT
 LDXIM TIME
 LDYIM /(TIME)
 LDAIM 2
 JMP OSWORD
 
TMTOT ROUT
 LDXIM 4
10 LDAAX TIME
 STAAX OTIME
 DEX
 BPL #10
 RTS

ZEROTM ROUT
 LDAIM 0
 LDXIM 4
10 STAAX OTIME
 DEX
 BPL #10
 RTS

TIMADD ROUT
 CLC
 LDYIM 4
 LDXIM 0
10 LDAAX TIME
 ADCAX OTIME
 STAAX TIME
 INX
 DEY
 BPL #10
 RTS

M60 ROUT
 JSR TXOTN
 LDXIM 6
 JSR SHNTBX
 LDXIM 2
 JSR SHOTBX
 SEC
 LDXIM 0
 LDYIM 4
10 LDAAX NTIME
 SBCAX OTIME
 STAAX OTIME
 INX
 DEY
 BPL #10
 RTS

M100 ROUT
 JSR TXOTN
 LDXIM 6
 JSR SHNTBX
 LDXIM 2
 JSR SHOTBX
 CLC
 LDXIM 0
 LDYIM 4
10 LDAAX NTIME
 ADCAX OTIME
 STAAX NTIME
 INX
 DEY
 BPL #10
 LDXIM 3
 JSR SHOTBX
 CLC
 LDYIM 4
 LDXIM 0
10 LDAAX NTIME
 ADCAX OTIME
 STAAX OTIME
 INX
 DEY
 BPL #10
 RTS


TXOTN ROUT 
 LDXIM 4
10 LDAAX OTIME
 STAAX NTIME
 DEX
 BPL #10
 RTS

SHNTBX ROUT
 ASL NTIME
 ROL NTIME+1
 ROL NTIME+2
 ROL NTIME+3
 ROL NTIME+4
 DEX
 BNE SHNTBX
 RTS

SHOTBX ROUT
 ASL OTIME
 ROL OTIME+1
 ROL OTIME+2
 ROL OTIME+3
 ROL OTIME+4
 DEX
 BNE SHOTBX
 RTS

PRTIM ROUT
PRTIME LDXIM :LSB:TIME
 LDYIM :MSB:TIME
 LDAIM 1
 JSR OSWORD
 JSR DIV100
 JSR DIV60
 LDA REM
 STA SECS
 JSR DIV60
 LDA REM
 STA MINS
 JSR DIV24
 LDA REM
 STA HRS
 LDAIM &86
 JSR OSBYTE
 STX POS
 STY VPOS
 JSR DWIND ;*** setup the window
 JSR VSTRIN
 = 31,30,1
 NOP
 LDA HRS
 CLC
 JSR PRNTDG
 LDAIM ":"
 JSR OSWRCH
 LDA MINS
 CLC
 JSR PRNTDG
 LDAIM ":"
 JSR OSWRCH
 LDA SECS
 CLC
 JSR PRNTDG
 JSR MWIND ;*** reset the window
 LDXIM 4
 LDAIM 0
10 ORAAX TIME
 DEX
 BPL #10
 TAX
 BEQ #20
 LDXIM :LSB:TIME
 LDYIM :MSB:TIME
 LDAIM 1
 JSR OSWORD
 SEC
 LDA TIME+1 ;GONE PAST MIDNIGHT SO SET BACK TO APROX. ZERO
 SBCIM &D6
 STA TIME+1
 LDA TIME+2
 SBCIM &83
 STA TIME+2
 LDA TIME+3
 SBCIM 0
 STA TIME+3
 LDA TIME+4
 SBCIM 0
 STA TIME+4
 LDXIM :LSB:TIME
 LDYIM :MSB:TIME
 LDAIM 2
 JSR OSWORD
 JSR INCDAY
20 RTS

TDVD ROUT
 STA DVSOR
 LDAIM 0
 LDXIM 4
10 STAAX OTIME
 DEX
 BPL #10
 LDYIM &28
20 DEY
 BEQ #80
 ASL TIME
 ROL TIME+1
 ROL TIME+2
 ROL TIME+3
 ROL TIME+4
 BPL #20
30
 LDXIM :LSB:-5
40 ROLAX TIME-:LSB:-5
 INX
 BNE #40
 LDXIM :LSB:-5
50 ROLAX OTIME-:LSB:-5
 INX
 BNE #50
 SEC
 LDA OTIME
 SBC DVSOR
 PHA
 LDA OTIME+1
 SBCIM 0
 PHA
 LDA OTIME+2
 SBCIM 0
 PHA
 LDA OTIME+3
 SBCIM 0
 TAX
 LDA OTIME+4
 SBCIM 0
 BCC #60
 STA OTIME+4
 STX OTIME+3
 PLA
 STA OTIME+2
 PLA
 STA OTIME+1
 PLA
 STA OTIME
 BCS #70
60 PLA
 PLA
 PLA
70 DEY
 BNE #30
80 LDA OTIME
 STA REM
 RTS

DIV100 ROUT
 LDAIM 100
DODVD JSR TDVD
 LDXIM 0
 LDYIM 4
10 ROLAX TIME
 INX
 DEY
 BPL #10
 RTS

DIV60 LDAIM 60
 BNE DODVD

DIV24 LDAIM 24
 BNE DODVD
 ]

 [ DONGLE=0
RDTIME
 ]
PRDTE
 [ DONGLE=0
 JSR RDDONG
 ]
                                 
SCDATE
 JSR DWIND ;set window

 JSR VSTRIN
 = 12,31,0,1
 NOP
 JSR DATE1
 JSR MONTH
 JSR YR

 ;reset the window

MWIND ;set window for monitor
 JSR VSTRIN
 = 28,0,21,39,4,31
POS = 0
VPOS = 0
 NOP
 RTS

DWIND ;set window for printing the date in

 LDAIM &86
 JSR OSBYTE ;read cursor position
 STX POS
 STY VPOS
 JSR VSTRIN
 = 28, 0, 24, 39, 22
 NOP
 RTS

YR ROUT
 LDA DATE+1
 LSRA
 LSRA
 LSRA
 LSRA
 CLC
 ADCIM BASEYR
 PHA
 CMPIM 100
 BCC #10
 LDAIM 20
 BCS #20
10 LDAIM 19
20 
 JSR PRNTDG
 PLA
 JMP PRNTDG


MONTH ROUT
 LDA DATE+1
 ANDIM &F
 TAX
 LDYAX MTAB1-1
10 LDAAY MONTHS
 BEQ #20
 JSR OSWRCH
 INY
 BNE #10
MONOUT
20 LDAIM &20
 JMP OSWRCH


MONTHS
JAN = "January", 0
FEB = "February", 0
MAR = "March", 0
APR = "April", 0
MAY = "May", 0
JUN = "June", 0
JUL = "July", 0
AUG = "August", 0
SEP = "September", 0
OCT = "October", 0
NOV = "November", 0
DEC = "December", 0

MTAB1 = JAN-MONTHS
 = FEB-MONTHS
 = MAR-MONTHS
 = APR-MONTHS
 = MAY-MONTHS
 = JUN-MONTHS
 = JUL-MONTHS
 = AUG-MONTHS
 = SEP-MONTHS
MTAB2
 = OCT-MONTHS
 = NOV-MONTHS
 = DEC-MONTHS



DATE1 ROUT
 LDA DATE
 JSR PRNTDG
 LDA DATE
 CMPIM 10
 BCC #20
 SBCIM 10
 CMPIM 10
 BCC #30
10 SBCIM 10
 CMPIM 10
 BCS #10
20 TAY
 CPYIM 1
 BEQ #40
 CPYIM 2
 BEQ #40
 CPYIM 3
 BEQ #40
30 LDYIM 4
40 DEY
 LDXAY #80
50 LDAAX #70
 BEQ #60
 JSR OSWRCH
 INX
 BNE #50
60 LDAIM &20
 JMP OSWRCH

70
71 = "st", 0
72 = "nd", 0
73 = "rd", 0
74 = "th", 0


80 = #71-#70
 = #72-#70
 = #73-#70
 = #74-#70



SETYR ASLA
 ASLA
 ASLA
 ASLA
 ORA DATE+1
 STA DATE+1 ;Year is top nibble of DATE +01
 RTS

 [ DONGLE=0
 ; Dongle has 4 time set registers :- MINS,HOURS,DATE,MONTH               
 ; Also has 4 alarm registers which are treated as RAM
 ; to store YEAR and OLDMONTH to try to deal with year changes
 ; Because cursed chip can not handle years.
 ; All number are BCD coded in the chip                                         

 ; DESIGNATION AS FOLLOWS :-
 
 ; TIME SET REGISTERS, 
 ;     0=MONTH      2=DATE    4=HOURS     6=MINS
                              
 ; RAM REGISTERS,         
 ;  1=YEAR in lower 7 bits
 ;  3=OLDMONTH and bit &10 to indicate LEAP pending (Was date)
 ;     
 ;  5=Not Used
 ;  7=Used to determine presence of chip            (Was Mins)
                                                      

SETTME ROUT
 [ CHACK = 1
 RTS ; REM STOP CLOCK READ
 = :LSB:MUNTHS, :MSB:MUNTHS ; fill
 |
 LDA MUNTHS
 ]
 LSRA
 LSRA
 LSRA
 LSRA
 LDXIM 1
 JSR #95 ;set Year

SETTM1 LDA MUNTHS
 ANDIM &F
 LDXIM 0
 JSR #95 ;set month                                          

 LDA MUNTHS    ; *** LH 15/1/86 ***
 JSR SETMFX    ; Fix year and month to form for register
 LDXIM 3
 JSR #95 ; Set oldmonth to month and flag

 LDA MINS
 LDXIM 6
 JSR #95

 LDA HRS
 LDXIM 4
 JSR #95

 LDA DAYS
 LDXIM 2
 JSR #95
 
 JMP SCDATE ; SHOW DATE ON SCREEN

SETMFX  ; FIX MONTH AND FLAG ON SET TIME
 PHA    ; stack month and year
 ANDIM &0F ; Mask MONTH
 CMPIM 2
 BCC SETJAN ; Branch if Jan
 BNE LHNOF  ; >JAN so no flag pending
 LDA DAYS
 CMPIM 29
 BCS LHNOF  ; >= 29 so no flag pending
          
SETJAN      ; befor Feb 29 so check for leap
 PLA        ; Retreive year
 PHA       
 LSRA
 LSRA
 LSRA
 LSRA
 JSR LHNOG
 BNE LHNOF   ; Not leap so flag clear
 PLA 
 ANDIM &0F   ; Otherwise
 ORAIM &10   ; set flag on month
 RTS          

LHNOF PLA                           
 ANDIM &0F
 RTS
 
LHNOG CLC
 ADCIM BASEYR
 ANDIM 3
 RTS

PRTIM INC OTIME ;** avoid tube failure 25/1/85 **
 BNE RTCX ;exit 
 INC OTIME+1
 BMI RTCX
 SEC
 ROR OTIME+1
PRTIME JSR RDDONG
 LDA HRS
 ORA MINS
 BNE PRTIM1 ;midnight
 ORA SECS ;check not already done
 BNE PRTIM2

 INC SECS
 JSR PRDTE ;reprint the date
 JMP PRTIM2

PRTIM1 LDAIM 0
 STA SECS
PRTIM2 JSR DWIND ;set up window
 JSR VSTRIN
 = 31,30,1
 NOP
 LDA HRS
 JSR PRNTDG
 LDAIM ":"
 JSR OSWRCH
 LDA MINS
 JSR PRNTDG
 JMP MWIND ;reset window and return
 
RTC ;check that the read time clock is present
 [ CHACK = 1
 LDAIM 30
 STA &8A94 ; \MINUTES
 LDAIM 12
 STA &8A95 ; \HOURS
 LDAIM 1
 STA &8A7E ; \DAY
 STA &8A96 ; \..
 LDAIM &31
 STA &8A7F ; \high nibble = YEAR FROM 1981, low nibble = MONTH
 STA &8A97 ; \..
 LDAIM 0   ; \ensure clock test passed
 STA &8A93 ; \SECONDS
RTCX RTS
 |
 LDXIM 7
 LDAIM &71
 JSR #95 ;write the minutes alarm register

 LDXIM 7 ;read the same register
 JSR #00
 JSR #70
 EORIM &0D ;devious eh 
 BNE RTCX ;fail

 LDXIM 7
 JSR #95 ;write zero as well

 LDXIM 7
 JSR #00 ;read result
 CMPIM 0
RTCX RTS ;returns EQ if dongle present
 ]
 
RDDONG
 [ CHACK = 1
 RTS
 = 6 ; REM STOP CLOCK READ
 |
 LDXIM 6 ;read minutes
 ]
 JSR #00
 JSR #70
 STA MINS

 LDXIM 4 ;hours
 JSR #00
 JSR #70
 STA HRS

 LDXIM 2 ;days
 JSR #00
 JSR #70
 STA DATE

 LDXIM 0 ;months
 JSR #00
 JSR #70
 STA DATE+1
     
 LDXIM 3 ;oldmonth
 JSR #00
 JSR #70
 STA OTIME+2 ;  somewhere but where


 LDXIM 1 ;year (in alarm register)
 JSR #00
 JSR #70
 JSR SETYR
 ; JSR REDFIX  ; Fix year and month if neccessary *** LH ***
             ; *** 15/1/86 ***
 ; RTS
                          

REDFIX  ; FIX year changes    
 ; Fix date on reading dongle
 ; ENTRY DATE+1  has perceived month and year
 ;       OTIME+2 has OLDMONTH and Flag
 ;       OTIME+3 used

 LDA OTIME+2
 ANDIM &0F
 STA OTIME+3
 LDA DATE+1
 ANDIM &0F     ; A has month
 CMP OTIME+3
 BCS LHLYCK    ; Months are ok so leap year checks
               ; Here month has decreased so reset year
 LDA DATE+1
 CLC
 ADCIM &10     ; Increment year will loop sometime
               ; but who cares as product should
               ; be dead by then
 STA DATE+1
 BNE RFIXX2    ; Branch always (year <>0)     
               ; REWRITE DONGLE
LHLYCK LDA OTIME+2
 ANDIM &10
 BEQ RTCX    ; No flag so exit
 
LHFXNX
 LDA DATE+1    ; Load new Month
 ANDIM &0F
 CMPIM 3
 BCC RTCX      ; Not MAR yet so exit
               ; Here it is March (or Later) in a leap year 
               ; So fix dates
 DEC DATE      ; DEC DAYS
 BNE RFIXX2    ; RE WRITE DONGLE
        
               ; DAYS Became ZERO !                    
 DEC DATE+1    ; Decrement month is ok
 LDA DATE+1
 ANDIM &0F     ; Get new month saves confusion
 CMPIM 2 
 BNE LHNFEB    ; IS NOT FEB SO CHECK OTHERS
 LDAIM 29      ; Must be 29th
 BNE RFIXEX    ; Re Write DONGLE (ALWAYS)

LHNFEB
 LDXIM 4
LHCHKL CMPAX MW30D - 1
 BEQ LHCKLX    ; FOUND SO EXIT
 DEX
 BNE LHCHKL
 LDAIM 31
 BNE RFIXEX
      
LHCKLX LDAIM 30
RFIXEX

 STA DATE
RFIXX2
 JSR CHKDTE
 JMP SETTME

 
00 PHP ;same as POKE
 TXA
 JSR #05
 LDAIM &06 ;bits 7,5 are POWERFAIL and ALARM
 STA DDRB
 JSR #55 ;write DDRB
 JSR #10
 LDXIM 2
 CLC
 JSR #20
 NOP
 NOP
 JSR #50
 LDA IRB ;read IRB
 ANDIM 1
 CLC
 RORA
 RORA
 LDYIM 6
25 PHA
 TXA
 ORAIM 1
 TAX
 CLC
 JSR #40
 NOP
 NOP
 JSR #50
 LDA IRB
 LSRA
 PHP
 TXA
 ANDIM &FE
 TAX
 CLC
 JSR #40
 PLP
 PLA
 RORA
 DEY
 BNE #25
 CLC
 RORA
 PHA
 JSR #15
 JSR #50
 LDX IRB
 PLA
 PLP
 RTS ;all done

05 LDXIM &A7
 STX DDRB
 JSR #55 ;write DDRB
 LDYIM 4
 ASLA
 LDXIM 2 ;fall thru'

30 RORA
 JSR #35
 DEY
 BNE #30
 RTS ;write bits one at a time

10 JSR #15
 NOP
 NOP
 CLC
 JSR #35
 NOP
 NOP
 RTS

35 PHA
 PHP
 TXA
 ORAIM 1
 TAX
 JSR #40
 TXA
 ANDIM &FE
 TAX
 PLP
 JSR #40
 PLA
 RTS

15 LDXIM 0
 STX ORB
 BEQ #45

40 NOP
 NOP
 NOP
 NOP
20 TXA
 ROLA
 STA ORB

45 PHP
 PHA
 TXA
 PHA
 TYA
 PHA
 LDAIM 151
 LDXIM &60
 LDY ORB
 JSR OSBYTE
 JMP #60

50 PHP
 PHA
 TXA
 PHA
 TYA
 PHA
 LDAIM 150
 LDXIM &60
 JSR OSBYTE
 STY IRB
 JMP #60

55 PHP
 PHA
 TXA
 PHA
 TYA
 PHA
 LDAIM 151
 LDXIM &62
 LDY DDRB
 JSR OSBYTE
60 PLA
 TAY
 PLA
 TAX
 PLA
 PLP
 RTS

95 PHP ;Set routine
 JSR #85 ;convert to BCD (without corrupting X)
 CPXIM 0 ;detect writing munths
 BNE #99
 ORAIM &40
99 PHA
 TXA
 JSR #05
 PLA
 LDYIM 7
 JSR #30
 JSR #10
 JSR #15
 PLP
 RTS

70 LDYIM 0
 TAX
 BEQ #75
80 CLD
 INY
 SED
 SEC
 SBCIM 1
 BNE #80
 CLD
75 TYA
 RTS

85 TAY ;make BIN to BCD
 BEQ #94
 LDAIM 0
 SED
90 CLC
 ADCIM 1
 DEY
 BNE #90 
94 CLD
 RTS
 ]
 LNK UADE05

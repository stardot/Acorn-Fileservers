 OPT UADE15 ; > Uade15
 TTL File server file UADE15


;*  C O M M A N D  P R O C E S S O R*

CMND JSR GETBB ;Get big buffer !

 JSR VSTRIN
 = CR,"Starting - "
 NOP


CLPA LDXIM MONON
 STX MONFLG ;Monitor ON to start with
 STX OTIME
 STX OTIME+1 ;timer timeout

;SET UP RXCB

 INX
 STX EVCHAR ;initialise event flag
 STX RIPPLE ;Rxcb counter

 JSR OPENRX ;open CB1

 LDA &220
 STA OLDEV
 LDA &220+1
 STA OLDEV+1

 LDAIM :LSB:EVENT
 STA &220
 LDAIM :MSB:EVENT
 STA &220+1

 LDAIM 14
 LDXIM 2 
 JSR OSBYTE ;enable KB event
 LDAIM 229 ;disable escape
 LDXIM 1 
 JSR OSBYTE

 JSR VSTRIN
 = "Ready",CR,CR,15
 NOP


 LDAIM 53
 JSR OSBYTE ;** 13/2/84 **
   ; sever any REMOTE connection now

 LDXIM :LSB:PROT
 LDYIM :MSB:PROT
 LDAIM &13 ; Net OSWORD
 JSR OSWORD ; Set protection mask

CLPD   ;CLPD

; Poll KB and Rxcb's in the I/O processor

CPOLL0

 LDA EVCHAR ;look for event
 BEQ COMRTS
 LDXIM 0
 STX EVCHAR ;reset the flag
 CMPIM ESC
 BEQ DOCHDI
 ANDIM &DF ;force upper case
 CMPIM "M"
 BEQ DOMONT ;switch monitor status
 CMPIM "Q"
 BEQ DOQUIT ;call HALT 

;else fall through ..
;Now poll the control blocks using the MOS

COMRTS  ;come here for new command

 LDX RXTAB ;get number of CB to poll
 STX RXCBN ;save this for later use
 LDAIM 51 ;poll Rx number (X)
 JSR OSBYTE ;result returned in X
 TXA
 BMI DOCMND ;leap off to deal with the Rx'd packet
 JSR PRTIM ;** only call dongle every 30 or so seconds **
 JMP CPOLL0

DOCHDI   ;DOCHDI
 LDAIM &7E
 JSR OSBYTE ;acknowledge escape condition here
 JSR NOEVNT ;disable events
 LDAIM 8
 JSR SETRTN ;ensure free space table
 JSR USRMAN
 JSR CHDISC ;*** CHANGE DISC **
 JMP CLPA ;back to the start

DOQUIT   ;DOQUIT
 JSR NOEVNT ;disable events
 LDAIM 8 ;ensure all users free space ** 3/10/84 **
 JSR SETRTN
 JSR USRMAN ;no RC from this
 JSR FLUSYS
 LDXIM :LSB:DOBYE
 LDYIM :MSB:DOBYE
 JSR OSCLI ;*bye the discs
 JMP INITCO ;Back to COMMAND prompt

DOBYE = "Bye",CR


;Switch monitor and go back to loop start.

DOMONT ROUT
 JSR VSTRIN
 = CR,"Monitor "
 NOP

 LDX MONFLG
 CPXIM MONOFF
 BEQ #10
 JSR VSTRIN
 = "OFF"
 NOP
 LDAIM MONOFF
 JMP #20

10 JSR VSTRIN
 = "ON"
 NOP
 LDAIM MONON
20 STA MONFLG

DBNCEX JSR OSCRLF
 JMP CLPD ;Go back to main RX loop


;Reception has happened, so check
;the function code in the RXbuffer
;and jump to the operation.

DOCMND ROUT
 LDA RXCBN ;save CB number
 PHA ;altered in OPENRX
 JSR OPENRX ;open a new Rxcb
 PLA ;RXTAB updated to new CB here
 STA RXCBN ;reset CB number

 LDXIM :LSB:RXCBN
 LDYIM :MSB:RXCBN
 LDAIM &11 ;MOS interface
 JSR OSWORD ;read the control block

; the structure set up in RXCBV is of the form
; CB number (1) ;in RXCBN
; CB data (12)

; Thus QPTR is always zero as only one CB is
; read at any time

 LDAIM &00
 STA QPTR ;standard offset
 SEC
 LDA RXCBV+4 ;get low byte of address
 SBCIM RXBUF ;calulate buffer offset
 STA BPTR ;point at the buffer
 TAX

 LDAAX RXBUF ;Reply port at top of buffer
 STA RPLYPT ;Store reply port

 LDA CBBUF
 STA OLDRXB ;STORE OLD BUFFER PTR.
 LDA CBBUF+1
 STA OLDRXB+1


;Provide p.0 pointer to control block (used
;in XMIT/REPLY etc.)

 CLC
 LDA QPTR
 ADCIM :LSB:RXCBV
 STA NETCB
 LDAIM :MSB:RXCBV
 ADCIM 0
 STA NETCB+1

 LDAAX RXBUF+1 ;Get fn. code
 BEQ #50 ;Don't monitor commands immediately

 PHA
 JSR MONITR ;*** Do monitor **
 PLA

 CMPIM FCMAX ;Is < biggest fn. code?
 BCC #50 ;Yes => ok

 LDAIM COERRA

;Send error return to machine

 JSR EXTERR

;Finish command (don't matter if error
;didn't get through).

 JMP COMRTS

;FN. code is ok, so get routine entry address

50 ASLA
 TAX

 LDY BPTR
 LDAAY CPUFD ;**20/5/87** set all handles for use
 STA UMHUFD ;**20/5/87** by pseudo-directory references
 LDAAY CPLIB
 STA UMHLIB
 LDAAY CPCSD
 STA UMHCSD

 LDAAX FNTAB
 STA GENPTR
 LDAAX FNTAB+1
 STA GENPTR+1

;ENTER ROUTINE ..

 JMI GENPTR



;T A B L E S

CTABA ROUT

;Initial receive control block
;First 12 bytes - addresses may change

 = RXFLAG
 = COPORT ;Command port
 = 0
 = 0 ;Set to RX on any station
 & RXBUF
 = 0,0
 & RXBUF+RXBUFL
 = 0,0

FNTAB ROUT

;Addresses of functions

 & CLINE ;Decode command line
 & SAVE   ;1
 & LOAD   ;2
 & EXAMIN ;3
 & CATHDR ;4
 & LOAD ;Load command for execution
 & FIND   ;6
 & CPSHUT ;7
 & GETBYT ;8
 & PUTBYT ;9
 & GBYTES ;10
 & PBYTES ;11
 & CPRDAR ;=> GETARGS
 & CPSTAR ;=> SETARGS
 & DISCS  ;14
 & CPUSRS ;15
 & CPDATE ;16
 & CPEOF  ;17
 & CPINFO ;18
 & CPSTAT ;Set object attributes
 & CPDEL ;Delete from fn. code
 & USRENV ;21
 & CPSOPT ;Set user option bits
 & FCBYE ;Logoff by function code
 & CPUINF ;Single user info.
 & CPVERN ;25
 & CPSPAC ;26 - returns disc free space
 & CDIRFN ;27 - cdir from function code, specify size
 & CPSETD ;28 - Set date and time from program
 & SAVE ; 29 - Do a 'create', like 'save' but no data
 & RDFREE ;30 - read callers free space
 & WRFREE ;31 - write users free space
 & CPWHO ;32 - return client user name
FNusr2 & CPUSRS ;33 - user list with job/task numbers
FNuin2 & CPUINF ;34 - single user info with job/task number
FCMAX * (.-FNTAB)/2

;COMMAND LINE DECODER ....


COMTAB

 [ Lang = English
 = "DELETE",&A0
 & DELETE
 = "INFO",&A0
 & INFO
 = "DIR",&A0
 & SELDIR
 = "SDISC",&A0
 & SELDSC
 = "CDIR",&A0
 & CDIR
 = "ACCESS",&A0
 & SETACC
 = "PASS",&A0 
 & SETPW
 = "I AM",&B0
 & LOGON
 = "BYE",&A0
 & USROFF
 = "NEWUSER",&A0
 & NEWUSE
 = "PRIV",&A0
 & STPRIV
 = "LIB",&A0
 & SLIB
 = "REMUSER",&A0
 & REMUSE
 = "RENAME",&A0
 & RENAME
 =  0 ;Indicates table end
 ]

 [ Lang = Italian
 = "CANCELLA",&A0
 & DELETE
 = "INFO",&A0
 & INFO
 = "DIR",&A0
 & SELDIR
 = "SDISC",&A0
 & SELDSC
 = "CDIR",&A0
 & CDIR
 = "ACCESSO",&A0
 & SETACC
 = "PASSA",&A0 
 & SETPW
 = "I SONO",&B0
 & LOGON
 = "CIAO",&A0
 & USROFF
 = "NUTENTE",&A0
 & NEWUSE
 = "PRIV",&A0
 & STPRIV
 = "BIBL",&A0
 & SLIB
 = "RIMUT",&A0
 & REMUSE
 = "RINOME",&A0
 & RENAME
 =  0 ;Indicates table end
 ]

CLINE ROUT
 LDXIM &FF
 CLD
10 LDY BPTR
 JSR SPACES
 DEY
20 INY
 INX
 LDAAX COMTAB
 BEQ BADCOM ;Last delimiter is zero
 BMI #50 ;Check next char after command is non-alpha
 EORAY MIDRX ;Compare
 ANDIM &DF ;Force cases
 BEQ #20
 DEX
30 INX
 LDAAX COMTAB
 BPL #30
 LDAAY MIDRX
 CMPIM "."
 BNE #55
 INY
 JMP #60

50 LDAAY MIDRX ;Otherwise check char. after cmnd. is non-alpha
 JSR ISCHAR
 BCS #60 ;Is non-alpha => end of command
55 INX
 INX ;Inc. past terminator and address
 JMP #10

60 LDAAX COMTAB+1 ;Get command processor address
 STA Cozero
 LDAAX COMTAB+2
 STA Cozero+1
 JMI Cozero ;Enter command processor


;UNRECOGNISED COMMAND

BADCOM ROUT
 JSR BUFTXT
 BNE #30 ;Quotes error
 LDXIM 0 ;Now move from TXTBUF to TXBUF
10 LDAAX TXTBUF
 STAAX MIDTX
 INX
 CMPIM CR
 BNE #10

 CPXIM 1
 BNE #20
 LDAIM WOTERR
 JSR EXTERR ;Do WHAT? error immediately
 JMP #30

20 TXA
 CLC
 ADCIM TXHDR ;Message length
 LDYIM CCCMND
 STY CCODE
 JSR REPLYC
30 JMP COMRTS

 [ Lang = English
40 = "Bad command in ",0
 ]
 [ Lang = Italian
40 = "Comando errato nel ",0
 ]


MONITR ROUT
 BIT MONFLG
 BPL #15 ;bit7=0 -> no monitor

 LDXIM MONTL ;length of the 'monitored' function codes table
 
10 CMPAX MONT1 ;look for function match
 BEQ #20 ;found one
 DEX
 BPL #10 ;if fall thru' then exit
15 RTS

20 STX COTEMP+1 ;save this for later use
 JSR PRTMC ;print the machine number

 JSR VSTRIN
 = ": "
 NOP

 LDYIM 0
 LDX COTEMP+1
 BEQ #65 ;CLI here

30 LDAAY MONT3 ;read though the text
 BEQ #40 ;count the number so far
 INY
 BNE #30
40 INY
 DEX
 BNE #30
 LDX COTEMP+1

50 LDAAY MONT3 ;now at the correct operation
 BEQ #60
 JSR WRCH ;print ascii chars only
 INY ;step thru'
 BNE #50 ;stop on zero 

60 JSR MONOUT ;print a space
65 LDAAX MONT2 ;determine objectname offset (if any)
 BMI #90 ;none here

 CLC
 ADC BPTR
 TAY ;Y has offset within the buffer

70 LDAAY MIDRX ;get chars from Rx buffer
 CMPIM CR ;end of name
 BEQ #80
 JSR WRCH ;print the name
 INY
 BNE #70

80 JSR MONOUT ;print another space

90 LDAAX MONT4 ;determine size offset (if any)
 BMI #95
 CLC
 ADC BPTR
 TAY ;Y has offset within the buffer

 LDAAY MIDRX+2
 JSR WHEX
 LDAAY MIDRX+1
 JSR WHEX
 LDAAY MIDRX
 JSR WHEX

95 JMP OSCRLF


WRCH CMPIM &7F
 BCS #15
 CMPIM &20
 BCC #15
 JMP OSASCI ;print ascii characters

MONT1 = 0,1,2,5,20,23,27,29 ;function codes
MONT2 = 0,11,0,0,0,-1,1,11 ;name offsets
MONT3
 = 0 ;CLI here
 = "Save",0
 = "Load",0
 = "Run",0
 = "Delete",0
 = "Bye",0
 = "Cdir",0
 = "Create",0
MONT4 = -1,8,-1,-1,-1,-1,-1,8 ;length offsets
MONTL * MONT2-MONT1-1



 [ 1=0

;Print machine number.

PTRMC ROUT
 LDA CBSTID+1
 BEQ #10 ;Net. no. = 0
 JSR WRTDEC
 JMP #20
10 JSR VSTRIN
 = "   "
 NOP
20 LDAIM SPACE
 JSR OSWRCH
 LDA CBSTID

WRTDEC ROUT
 STA TEMPA
 LDAIM 0
 STA TEMPB
 TXA
 PHA
 TYA
 PHA
 LDXIM "/" ;Hundreds
 LDA TEMPA
 SEC
10 SBCIM &64
 INX
 BCS #10
 ADCIM &64
 PHA
 TXA
 JSR WRTDIG
 LDXIM "/" ;Tens
 PLA
 SEC
20 SBCIM &A
 INX
 BCS #20
 ADCIM &A
 PHA
 TXA
 JSR WRTDIG
 DEC TEMPB
 PLA
 CLC
 ADCIM "0"
 JSR WRTDIG
 PLA
 TAY
 PLA
 TAX
 RTS

WRTDIG ROUT
 CMPIM "0"
 BNE #10
 BIT TEMPB
 BMI #20
 LDAIM SPACE
 BNE #20
10 DEC TEMPB ;Only works for 15 leading spaces
20 JMP OSWRCH

 |

PRTMC ROUT
 LDA CBSTID+1
 BEQ #05

 JSR MKDEC ;make decimal
 JSR #30 ;print the network number
 LDAIM "."
 JSR OSWRCH
 JMP #15 

05 LDXIM 4
10 LDAIM SPACE
 JSR OSWRCH
 DEX
 BNE #10 ;print spaces

15 LDA CBSTID
 JSR MKDEC ;convert to decimal
 JSR #30
 LDXIM 4
 LDA CBFLG
 ANDIM MCtask ;**12/6/87** isolate job/task number
 BEQ #20
 LSRA
 LSRA
 LSRA
 LSRA
 PHA
 LDAIM "["
 JSR OSWRCH
 PLA
 JSR WHEXD
 LDAIM "]"
 JSR OSWRCH
 LDXIM 1
20 LDAIM SPACE
 JSR OSWRCH
 DEX
 BNE #20
 RTS

30 LDA COWORK ;msig digit
 JSR OSWRCH
 LDA COWORK+1
 JSR OSWRCH
 LDA COWORK+2
 JMP OSWRCH ;print all three characters in COWORK


;Convert to decimal

MKDEC ROUT
 TAY
 LDAIM &FF
 STA TEMPA ;leading zero flag

 LDAIM 100
 JSR #10
 STA COWORK
 LDAIM 10
 JSR #10
 STA COWORK+1
 LDAIM 1

10 STA COWORK+3
 TYA
 LDXIM "0"-1
 SEC

20 INX
 SBC COWORK+3
 BCS #20
 ADC COWORK+3

 CPXIM "0"
 BNE #30
 BIT TEMPA
 BPL #30
 LDXIM SPACE
 BNE #40

30 INC TEMPA ;print zeros
40 TAY ;restore original parameter
 TXA
 STA COWORK+2 ;save this for now
 RTS
 ]

;CHDISC
;1) READ DRIVE NUMBER (IF DRIVES>1)
;2) GET DISC NUMBER FOR DRIVE
;3) FLUSH ALL OBJECTS FROM STORE
;4) ENSURE DISC MAP
;5) RESTART (MAPMAN)
;6) RESTART (AUTMAN)

CHDISC ROUT
 LDA DRIVES
 SEC
 SBCIM  1
 BEQ #10 ;ONE DRIVE, CONTINUE

 JSR RDDRIV
 BNE #50 ;IF QUIT TYPED, QUIT ** 13/9/84

10 PHA  ;STORE DRIVE NO.
 JSR CHMSG ;"CHANGING DRIVE - ??"
 PLA
 STA CURDRV
 JSR DRVINF ;GET DISC NO.

 BNE #40 ;ABORT IF ERROR

 LDAIM 8
 JSR SETRTN
 JSR STRMAN ;*** FLUSH STORE **
 BNE #40

 LDAIM 6
 JSR SETRTN
 JSR MAPMAN ;*** ENSURE DISC **
 BNE #40

20 JSR CHMSGA ;"LOAD NEW DISC"
 BNE #50 ;IF ABORT, ABORT ** 13/9/84 **

 LDA CURDRV
 LDYIM ARGB
 STAIY NEWARG
 LDAIM 9
 JSR SETRTN
 JSR MAPMAN ;*** RESTART DRIVE **
 BEQ #30 ;ALL WELL, FINISH

 JSR USRERR ;ERROR, PRINT MESSAGE
 JMP #20

30 JSR GETPWF ;Restart AUTMAN
 JSR VSTRIN
 = CR,"Restarting - "
 NOP

 RTS

40 JSR INTERR
50 JSR FLUSYS ;clear out the system
 JMP INITCO ;** 13/9/84 ** return to command prompt after abort


;READ DRIVE NUMBER FROM CMND. LINE

RDDRIV ROUT
 JSR VSTRIN
 = CR,"Drive: "
 NOP

 JSR RDLINE

 LDYIM  0
 LDAIY COMPTR
 ANDIM &DF ;force upper case
 CMPIM ABTCH ;ABORT ?? "Q"
 BNE #10 ;** 13/9/84 **

 LDAIM &FF
 BNE #20 ;ABORT ...

10 JSR GETINT ;GET DRIVE NO.
 BNE RDDRIV ;DO AGAIN IF NESC.

 LDA INTEGR+1
 BNE RDDRIV

 LDA INTEGR
 CMP DRIVES
 BCS RDDRIV ;INTEGR>=DRIVES -> ERROR

 LDXIM  0 ;GIVE Z SET EXIT
20 RTS



CHMSG ROUT
 PHA
 JSR VSTRIN
 = CR,"Changing drive - "
 NOP

 PLA
 JSR WHEX
 JMP OSCRLF



CHMSGA ROUT
 JSR VSTRIN
 = CR,"Load new disc",CR
 NOP

10 JSR OSECHO ;fudge around ESCAPE problem ** 28/9/84 **
 CMPIM SPACE
 BEQ #20
 ANDIM &DF ;force upper case ** 13/9/84 **
 CMPIM ABTCH
 BNE #10

 LDAIM &FF ;GIVE ABORT EXIT
20 RTS



;Call AUTMAN restart and write message
;if PW file not found.

GETPWF ROUT
 LDAIM  6
 LDYIM ARGA
 STAIY NEWARG
 JSR AUTMAN
 BEQ #10

 JSR VSTRIN
 = CR,"WARNING - PW File not found"
 NOP

10 RTS

EVENT ROUT
 PHP ;save status over routine
 PHA
 CMPIM  2
 BNE #10
 STY EVCHAR
 PLA
 PLP
 RTS

10 PLA
 PLP
 JMI OLDEV ;unknown event

NOEVNT ROUT
 LDAIM 15
 LDXIM 0
 JSR OSBYTE ;flush buffer

 LDAIM 13
 LDXIM 2
 JSR OSBYTE ;disable event
 LDAIM 229
 LDXIM 0
 JSR OSBYTE ;re-enable escape

 LDA OLDEV
 STA &220
 LDA OLDEV+1
 STA &220+1

 LDX RXCBN ;get CB number
 LDAIM 52
 JMP OSBYTE ;delete open CB

; Routine to open RECEIVE CB

OPENRX ROUT
 LDXIM 11 ;Table offset
10 LDAAX CTABA
 STAAX RXCBV ;Set flag, port and stid and bfr addresses.
 DEX
 BPL #10

 LDAIM 0
 STA RXCBN ;ready for OSWORD call

;Now correct buffer pointers if second buffer.
;The one byte gap between the buffers
;is to prevent corruption when a zero is placed
;at the end of received data to prevent
;catastrophe when a bad file name is being
;decoded.

 LDA RIPPLE
 INC RIPPLE
 LSRA ;flag in carry

 BCC #20

 LDAIM :LSB:(RXBUF+RXBUFL+1)
 STA RXCBV+4
 LDAIM :MSB:(RXBUF+RXBUFL+1)
 STA RXCBV+5

 LDAIM :LSB:(RXBUF+RXBUFL+RXBUFL+1)
 STA RXCBV+8
 LDAIM :MSB:(RXBUF+RXBUFL+RXBUFL+1)
 STA RXCBV+9

;At this point, previous CB is set to receive.

20 LDXIM :LSB:RXCBN
 LDYIM :MSB:RXCBN
 LDAIM &11
 JSR OSWORD ;do OPENRX

 LDA RXCBN
 STA RXTAB ;save CB number
 BNE #30

 LDAIM IERRAI ;unable to open Rxcb
 JMP INTERR

30 RTS


 LNK UADE16

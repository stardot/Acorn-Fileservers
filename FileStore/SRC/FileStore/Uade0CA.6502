 OPT UADE0C ;FILE > Uade0CA
 TTL File server file UADE0CA

;************ DRCHSZ ************

;DRCHSZ: CHANGE SIZE OF A FILE

;ENTRY: ARGB = LS
;ARGC = MS(PTR TO USERINFO)
;ARGD = LS
;ARGE = MS(PTR TO FILE TITLE)
;ARGF = LS
;ARGG = CS
;ARGH = MS(NEW SIZE)

;EXIT : ARGA = RC

;FUNCTION:-
;REMOVE ALL OF THE OBJECT FROM THE CACHE;
;IF TYPE OF OBJECT = FILE
;THEN CHECK FOR WRITE ACCESS;
;CHECK THAT FILE IS NOT OPEN;
;CHANGE SIZE;
;ENSURE OBJECT MAP UPTO DATE ON DISC
;ELIF TYPE OF OBJECT = DIR
;THEN RC:=WRONG TYPE #AUTOMATICALLY DONE IN RETAIN#
;FI

DRCHSZ ROUT
 [ 1=1
 LDAIM IERRAC ;Not used in FileStore ** 29/09/86 **
;v1.23 
 JMP USRERR
;v1.31
; JMP INTERR

 |
 LDYIM ARGI
 LDAIY ARGPTR
 STA DIRWC ;get wild card flag
 JSR INITDV
 BNE #40

;RETRIEVE DIR ENTRY

 JSR RETENT
 BNE #40

 JSR CRNSIN ;OBJSIN := SIN OF CURRENT DIR ENTRY
 JSR MAXACC ;OBJACC := TYPE & ACCESS HELD FOR OBJECT
 JSR UNLOCK ;UNLOCK DIR
 JSR REMOVE ;REMOVE OBJSIN FROM THE CACHE
 BNE #40 ;error trap **** 17/3/83 ****
 LDA OBJACC
 ANDIM TYPE
 CMPIM TYPDIR
 BNE #10
 LDAIM DRERRF ;WRONG TYPE
 BRA #40

;DEAL WITH A FILE

10 LDA OBJACC
 ANDIM WRITAC
 BNE #20
 LDAIM DRERRL ;NO WRITE ACCESS !
 BRA #40

;CHECK THAT THE FILE IS NOT OPEN

20 LDAIM 2 ;RNDMAN.INFO
 JSR SETDSA ;PLACE ARG, OBJECT DISC NO & SIN ONTO NEWARG STACK
 JSR RNDMAN
 BNE #30
 LDAIM DRERRI
 BRA #40

;NOW CALL MAPMAN TO HAVE THE SIZE CHANGED

30 LDAIM 3
 JSR SETDSA
 LDYIM ARGF
 LDAIY ARGPTR
 LDYIM ARGB
 STAIY NEWARG ;LS(NEW SIZE)
 LDYIM ARGG
 LDAIY ARGPTR
 LDYIM ARGC
 STAIY NEWARG ;CS(NEW SIZE)
 LDYIM ARGH
 LDAIY ARGPTR
 LDYIM ARGD
 STAIY NEWARG ;MS(NEW SIZE)

 JSR JUSINF ;** 3/10/84 pass userinfo ptr

 JSR MAPMAN
 BNE #40
 JSR ENSOMP ;ENSURE OBJECT MAP

40 JMP DREXIT
 ]

;******** EXAMINE ROUTINE ********

;DREXAM : GIVE DETAILS OF ENTRY(S) IN A DIR.
;ENTRY:
;ARGB/C PTR TO USER INFO
;ARGD/E PTR TO FILE TITL
;ARGF/G ADDRESS OF STORE FOR RESULT
;ARGH = TYPE OF RESULT REQURIED
;0 => ALL INFO, M/C READABLE
;1 => ALL INFO, CHAR STRING
;2 => FILE TITLE + FILE NAME LENGTH, M/C
;3 => ACCESS+FILE TITLE, CHAR STRING
;4 => GIVE LAST COMPONENT F.T. ONLY
;ARGI = ENTRY POINT TO DIR.
;ARGJ = NO. OF ENTRIES (0=> ALL DIR.)
;ARGK = wild card flag

;EXIT :
;ARGB/C PTR TO BYTE AFTER RESULT END
;ARGD = NO. OF ENTRIES
;ARGE = SEQ. NO. OF DIRECTORY BEING EXAMINED

;WHEN ARGH IS 4, ARGD IS MAX. ACCESS TO DIR,
;ARGE IS SEQUENCE NUMBER OF DIR., AND
;ARGF/G ARE DISC. NO LO/HI

;TABLE OF EXAMINE ROUTINE ENTRY POINTS

DEXTAB & EXRTNA
 & EXRTNB
 & EXRTNC
 & EXRTND

DREXAM ROUT
 STZ DIRFLG
 LDYIM ARGK
 LDAIY ARGPTR
 ORAIM &02 ;**2/6/87** "^" allowed at end of name
 STA DIRWC ;get wild card flag
 RORA ;look at bit0
 BCC #10
 LDAIM &80
 STA DIRFLG
10 JSR INITDV
 BNE #20

 JSR SETINF ;STORE RESULT PTR.

 LDAIY ARGPTR
 CMPIM 5
 BCC #15 ;IF <5, OK
 LDAIM DRERRO ;BAD ARG. TO EXAMINE
 BRA #20

15 STA EXARG ;TYPE OF RESULT
 INY
 LDAIY ARGPTR
 STA EXENTR ;ENTRY TO DIR.
 INY
 LDAIY ARGPTR
 JSR CHKENS
 BCC #25 ;OK
 LDAIM DRERRN ;TOO MANY ENTRIES REQUESTED
20 JMP #75

25 STA EXENTS ;NO. OF ENTRIES
 JSR GETDRD ;LOAD APPROPRIATE DIR
 BNE #20
 LDAIM 4
 CMP EXARG
 BNE #35

;IF HERE, COPY FILE NAME FROM DIRECTORY
;INTO RESULT AREA.

 LDYIM DRNAME ;OFFSET IN DIR.
30 LDAIY DPTRLD
 STAI INFPTR
 INY
 JSR INCIPT
 CPYIM DRFREE
 BNE #30

 LDYIM DRSQNO
 LDAIY DPTRLD ;Read dir. sequence number
 PHA ;Store for later use

 LDA DIRACC
 LDYIM ARGD
 STAIY ARGPTR
 PLA ;Pull sequence number
 INY
 STAIY ARGPTR
 LDA DRDISC
 INY
 STAIY ARGPTR
 INY
 LDA DRDISC+1
 STAIY ARGPTR
 BRA #70

35 JSR INTPRE ;PREVEN := DIRSTA

;FOR I=0 TO EXENTR DO
;$( SET CURRENT := NEXT(PREV. ENTRY)
;IF END OF DIR...EXIT WITH RC SET
;PREVENTRY := CURRENT ENTRY
;$)

40 JSR SETCRN
 BEQ #60 ;Zero => end of dir => exit
 LDA EXENTR
 DEC EXENTR
 TAX
 BEQ #45 ;LOOP FINISHED
 JSR MOVCRN ;PREVEN := CRNTEN
 BRA #40

;SET ROUTINE TO BE USED, DEPENDING
;ON EXARG.
;EXRTN := JMP <examine routine>

45 LDA EXARG
 ASLA
 TAX
 LDAAX DEXTAB
 STA EXRTN+1
 LDAAX DEXTAB+1
 STA EXRTN+2
 LDAIM JMPINS
 STA EXRTN
 LDAIM 0 ;NO. OF ENTRIES

;LOOP ROUND EXAMINE ROUTINE, DECREMENTING
;EXENTS, AND CHAINING THROUGH DIR.

50 PHA  ;STORE NO. OF ENTRIES
 JSR EXRTN ; call routine
 BEQ #55
 PLX ;Restore stack
 JSR UNLOCK
 BRA #75 ;Error -> exit [always jump]

55 PLA
 INCA ;ADD NO. OF ENTS.
 PHA
 LDA CRNTEN
 STA PREVEN
 LDA CRNTEN+1
 STA PREVEN+1
 JSR SETCRN ;CURRENT := NEXT(PREV)
 BEQ #65 ;NOT OK, FINISH LOOP
 PLA
 CMP EXENTS
 BNE #50

;FINALLY, SET END OF BLOCK INDICATOR.
60 PHA
65 LDAIM EXTERM
 STAI INFPTR
 JSR INCIPT ;INCREMENT POINTER TO END OF BLOCK (USED IN TXCB).
 LDYIM ARGB
 LDA INFPTR
 STAIY ARGPTR
 INY
 LDA INFPTR+1
 STAIY ARGPTR
 INY
 PLA  ;GET NO. OF ENTRIES
 STAIY ARGPTR

 LDYIM DRSQNO
 LDAIY DPTRLD ;Get sequence no. of examined dir.
 LDYIM ARGE
 STAIY ARGPTR ;And return it

70 JSR UNLOCK

 LDAIM 0 ;OK EXIT
75 JMP DREXIT



;******** DRINFO ********

;DRINFO: RETRIEVE DETAILS OF A GIVEN OBJECT IN
;FORMATTED FORM.

;ENTRY:
;ARGB-C PTR TO USER INFO
;ARGD-E PTR TO FILE TITLE
;ARGF-G ADDRESS OF RESULT AREA
;ARGH   Wild Card Flag

;EXIT:
;ARGB-C ADDRESS OF BYTE AFTER RESULT AREA

;BYTE AFTER RESULT AREA IS USED TO
;SET UP BUFFER POINTERS IN TXCB AFTER
;DETAILS CALL.


DRINFO ROUT
;v1.23
 LDYIM ARGH
 LDAIY ARGPTR
 STA DIRWC ;get wild card flag
 JSR INITDV
 BNE #20

 JSR SETINF
 JSR TSTROT
 BNE #10
 JSR DIROBJ 

 LDAIM ROOT
 JSR OUTCH ;Ouput dir. name
 LDXIM &0A
 JSR OUTSPS ;Pad dir. name

 JSR OUTZRO ;Output 8 zeros
 JSR OUTSP
 JSR OUTZRO ;8 more zeros (exec address)
 
 LDXIM  3
 JSR OUTSPS
 JSR OUTSZA
 BNE #40

 LDAIM TYPDIR :OR: LOCKED ;TYPE = DIRECTORY
 ASLA
 JSR OUTACA ;Output access

 LDXIM  4
 JSR OUTSPS

 LDXIM  2
 JSR OUTRTD
 LDA OBJSIN + 2
 JSR OUTBYT
 LDA OBJSIN + 1
 JSR OUTBYT
 LDA OBJSIN 
 JSR OUTBYT
;v1.23
 BRA #30
;v1.31 
; JMP #30 ;FINISHED .....

;HERE DOING NON-ROOT OBJECT

10 JSR RETENT ;RETRIEVE BOTTOM ENTRY
 BNE #40

 JSR OUTENT ;Put out entry details
 JSR UNLOCK ;UNLOCK CURRENT DIR. (note does PHA/PLA)
20 BNE #40 ;Unsuccessful MAPMAN call

 
;v1.31
; JSR DRRET2 ;**4/4/88** Retrieve info to output area
; BNE #40
;
; JSR SETINF ;Set pointer to result area
; LDA INFPTR ;Set up to copy details
; STA MOVFRM ;(as we will overwrite output area)
; LDA INFPTR+1
; STA MOVFRM+1
; SEC
; LDAIM :LSB:DETNAM
; STA MOVTO
; SBCIM :LSB:DRTITL
; STA CRNTEN ;Save for use in EXAM routines
; LDAIM :MSB:DETNAM
; STA MOVTO+1
; SBCIM :MSB:DRTITL
; STA CRNTEN+1
; LDXIM INFNXT ;Move all details
; JSR MOVE
;
; JSR MOVEFT ;Copy info as text, name first
; JSR OUTSP
; JSR OUTLEX
; STZ FILLFL
; LDA DETSZ+2
; JSR OUTBYT
; LDA DETSZ+1
; JSR OUTBYT
; LDA DETSZ
; JSR OUTBYT
; LDXIM 3 
; JSR OUTSPS
; JSR OUTEN2 ;Rest of entry common with EXAM

;END OF ENTRY. PUT CR AT END TO FORCE
;A NEW LINE IF OSASCII'ING AT THE
;CLIENT END, AND EXTERM CHAR. TO
;INDICATE END OF DATA.

;v1.23
30

 LDAIM CR
 JSR OUTCH
 LDAIM EXTERM
 JSR OUTCH

 LDYIM ARGB ;PUT INFPTR ON STACK AS RESULT
 LDA INFPTR
 STAIY ARGPTR
 INY
 LDA INFPTR+1
 STAIY ARGPTR

 LDAIM 0

40 JMP DREXIT

;Copy DIRSIN to OBJSIN

DIROBJ ROUT
 LDA DIRSIN
 STA OBJSIN ;SET SIN FOR SIZE ROUTINE
 LDA DIRSIN+1
 STA OBJSIN+1
 LDA DIRSIN+2
 STA OBJSIN+2
 RTS



;************ DRMAKE ************


;DRMAKE: MAKE THE ROOT DIRECTORY-BUT DON'T RETAIN IT.
;USED IN DISC INITIALISATION.

;ENTRY: ARGB-ARGD = APPROX SIZE OF DIR(IN BYTES)
;N.B. DRDISC MUST = DISC NUMBER

;EXIT : ARGA = RC
;ARGF-ARGS SAME AS DIRMAN.PRESERVE'S ENTRY ARGS

DRMAKE ROUT
 [ 1=0
 STZ DIRWC ;get wild card flag
 LDYIM ARGB
 LDAIY ARGPTR
 STA DIRTMP
 INY
 LDAIY ARGPTR
 STA DIRTMP+1
 INY
 LDAIY ARGPTR
 STA DIRTMP+2
 STZ EXRTN ;**23/1/87** no parent directory
 STZ EXRTN+1
 STZ EXRTN+2
 JSR MAKDIR

;MOVE "$" INTO THE HEADER

 BNE #40
 LDXIM NAMLNT
 LDYIM DRNAME
 LDAIM ROOT
10 STAIY DPTRLD
 LDAIM SPACE
 INY
 DEX
 BNE #10

;NOW ENSURE THE DIR UPTO DATE ON DISC AND ENSURE
;THE DISC MAP

 JSR ENSRIT ;ENSURE & UNLOCK IT
 BEQ #30

20 JSR DELOBJ ;DELETE IT
 BRA #40

30 JSR ENSOMP ;OBJSIN MUST = SIN OF DIR
 BNE #20
40 JMP DREXIT
 |
 LDAIM &FF
 JMP DREXIT ;**3/10/84**
 ]

;************* DRFTDN ****************

;GIVEN FILE TITLE, ANALYSE TO GET DISC NUMBER
;AND RETURN. USED BY SAVE IN C.PROC TO
;RESOLVE ON WHAT DISC TO SAVE A FILE

;ENTRY:
;ARGB-C PTR TO USER INFO
;ARGD-E PTR TO FILE TITLE

;EXIT:
;ARGB-C DISC NUMBER

DRFTDN ROUT
 LDYIM ARGF
 LDAIY ARGPTR
 STA DIRWC ;get wild card flag
 JSR INITDV
 BNE #10
 LDYIM ARGB
 LDA DRDISC
 STAIY ARGPTR
 INY
 LDA DRDISC+1
 STAIY ARGPTR
 LDAIM 0 ;=> success
10 JMP DREXIT

 LNK UADE0D

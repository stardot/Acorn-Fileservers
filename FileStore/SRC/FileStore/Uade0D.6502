 OPT UADE0D ;FILE > Uade0D
 TTL File server file UADE0D

;********************************
;*       DIRMAN UTILITIES       *
;********************************

;******** GETDIR ROUTINE *********

;GETDIR: LOADS THE DIRECTORY SPECIFIED BY A FILE TITLE.

;EXIT: A = RC
;DIRSTA = ADDR OF DIR IN MEMORY

;IF TITLE = <root><terminator> OR
;TITLE = <terminator>
;THEN load 'current dir' #set by INITDV#
;ELSE call RETENT #retrieve entry#
;check that entry is for a directory
;DIRSIN := SIN of current entry
;load new current directory
;FI

;NOTE that GETDIR in cases where an error occurs
;will UNLOCK anything that it loaded.

 [ 1=0
GETDIR
 STZ DIRFLG
 ]
GETDRD ROUT
 JSR TSTROT ;<root>$<terminator>?
 BEQ #50
 JSR TSTERM ;<terminator>$?
 BEQ #50

 INY ;**20/5/87** test pseudo-directory
 LDAIY NAMPTR
 DEY
 CMPIM TERMIN ;**20/5/87** single char only
 BNE #20
 LDAIY NAMPTR
 JSR Testpd
 BEQ #50

20 BIT DIRFLG
 BMI #30
 JSR RETENT
 BRA #40

30 JSR RETEND
40 BNE #60
 JSR Tsparn ;See if it is parent
 BEQ #45
 JSR TSTDIR ;SEE IF ITS A DIR-TSTDIR WILL UNLOCK IF REQD.
 BNE #60
 JSR SETSIN
45 JSR UNLOCK
50 JSR LOADDR ;Unlocked if any error
60 RTS

;CHKTIT: CHECKS THE SYNTAX OF A FILE TITLE.
;ENTRY: NAMPTR => PTR TO FILE TITLE,
;TO BE RECOGNISED.

;EXIT : A = RC (0=>SUCCESS)
;LASTNM => ADDRESS OF THE LAST
;TEXT NAME IN THE FILE TITLE.

;<file title>::=$<title component>|<file name>
;<file name)::= <text name><title component>
;<title component>::=<terminator>|<separator><file name>

CHKTIT ROUT
 LDAIM &3C
 TRB DIRWC ;top bits only
 LDYIM 0 ;Y:=PTR TO CHAR
 STY DIRTMP ;counter for loop here
 JSR SETLST ;SETUP LASTNM
 LDAIY NAMPTR
 CMPIM ROOT
 BEQ #00 ;**20/5/87** check pseudo-directories also
 JSR Testpd
 BNE #20 ;SEE IF ITS A <file name>
00 INY
 LDAIY NAMPTR
 CMPIM SEPART ;IS IT A <separator>
 BEQ #10
 CMPIM TERMIN ;IS IT A <terminator>
 BEQ #40
 BRA #55 ;RC:=INVALID SEPARATOR

;TRY TO RECOGNISE <file name>

10 INY
20 STY DIRTMP+1 ;save offset
 JSR SETLST ;SETUP LASTNM
30 JSR CHKTEX ;RECOGNISE <text name>
 BNE #60
 LDAIY NAMPTR
 CMPIM TERMIN
 BNE #50

 INC DIRTMP
 LDX DIRTMP
 CPXIM 2
 BEQ #40 ;match here

 LDA DIRWC ;last level here
 ANDIM &3F
 BIT DIRWC
 BVC #35
 ORAIM &80
35 STA DIRWC
 LDY DIRTMP+1 ;restore Y
 BRA #30 ;do loop again

40 LDAIM 0 ;RC := 0
 RTS

50 CMPIM SEPART
 BEQ #10
55 LDAIM DRERRA
60 RTS

;CHKTEX: RTN TO RECOGNISE <text name>

CHKTEX ROUT
 LDXIM NAMLNT ;X:=MAX NO. OF CHARS IN <text name>
10 LDAIY NAMPTR
 CMPIM &21
 BCC #40
 CMPIM &7F
 BCS #40 ;Nope => error

 BIT DIRWC
 BPL #20
 CMPIM "*"
 BEQ #30
 CMPIM "#"
 BEQ #30

20 CMPIM """" ;** 21/9/83 **
 BEQ #40
 CMPIM ":"
 BEQ #40
 CMPIM "*"
 BEQ #40
 CMPIM "."
 BEQ #40

;v1.23
 CMPIM ":"
 BEQ #40

 CMPIM "#"
 BEQ #40 ;Nope => error
 CMPIM "$"
 BEQ #40 ;** 18/9/84 **

30 INY
 DEX
 BNE #10
40 LDAIM 0
 CPXIM NAMLNT ;TEST LENGTH OF <text name>
 BNE #50
 LDAIM DRERRA ;INVALID TEXT NAME
50 TAX  ;SET FLAGS
 RTS

SETLST ROUT
 TYA  ;RTN TO SETUP LASTNM
 CLC
 ADC NAMPTR
 STA LASTNM
 LDA NAMPTR+1
 ADCIM 0
 STA LASTNM+1
 RTS

;FNDTEX: SEARCH CUR DIR FOR NAME IN TXTNAM.
;N.B. DIR ENTRIES ARE SORTED,
;KEY=<file title>.

;ENTRY: DIRSTA=STORE ADDR OF DIR TO BE SEARCHED.

;EXIT : A=0 => NAME FOUND
;PREVEN => PTR TO PREVIOUS ENTRY
;CRNTEN => PTR TO CURRENT ENTRY

FNDTEX ROUT
 JSR INTPRE ;PREVEN := addr of 1st entry
 STZ WILD1 ;flag for wild cards
10 JSR SETCRN
 BEQ #30 ;end of dir ?
 LDYIM DRTITL
 LDXIM 0
 
 JSR #50 ;look up name with wild cards
 BCS #40
 PHP
 LDA WILD1
 BNE #15
 PLP
 BMI #30
 PHP
15 PLP
FNDTEZ JSR MOVCRN
 BRA #10 ;repeat until end

30 LDAIM DRERRC
 RTS

40 LDAIM 0
 RTS ;exit ok

50 LDAAX TXTNAM
 CMPIM "*"
 BNE #80
 INC WILD1
 INX
60 PHX
 PHY
 JSR #50
 PLY
 PLX
 BCS #95
 INY
 CPYIM 12
 BCC #60

70 LDAAX TXTNAM
 CMPIM &20
 BEQ #95
 CMPIM &0D
 BEQ #95
 CPXIM 10 ;returns C=1 at end-of-name
 RTS

80 CPYIM 12
 BCS #70
 JSR CPCHAR
 BNE #90
 INX
 INY
 BNE #50

90 CLC
95 RTS

CPCHAR ROUT
 CMPIM "#"
 BEQ #10
 JSR CAPS
 PHA
 LDAIY CRNTEN
 JSR CAPS
 STA WILD2
 PLA
 CMP WILD2
 RTS

10 INC WILD1 ;set flag
 LDAIY CRNTEN ;must NOT match a space
 CMPIM SPACE
 PHP
 PLA
 EORIM 2 ;flip Z flag
 PHA
 PLP ;return Z=1 if not a space
 RTS

CAPS ROUT
 STA WILD2
 CMPIM "A"
 BCC #10
 CMPIM "z"+1
 BCS #10
 CMPIM "Z"+1
 BCC #30
 CMPIM "a"
 BCS #20
10 SEC
 BRA #30

20 CLC
30 LDAIM &F9
 RORA
 RORA
 RORA
 AND WILD2
 RTS

INTPRE LDA DIRSTA ;PREVEN := DIRSTA
 STA PREVEN
 LDA DIRSTA+1
 STA PREVEN+1
 RTS

MOVCRN LDA CRNTEN ;PREVEN := CRNTEN
 STA PREVEN
 LDA CRNTEN+1
 STA PREVEN+1
 RTS

SETCRN CLC  ;RTN TO SETUP CRNTEN (CURRENT ENTRY) PTR
 LDYIM DRLINK
 LDAIY PREVEN
 ADC DIRSTA
 STA CRNTEN
 INY
 LDAIY PREVEN
 ADC DIRSTA+1
 STA CRNTEN+1
 LDYIM 0
 LDAIY PREVEN
 INY
 ORAIY PREVEN ;IF [PREVEN] = 0 THEN A:=0
 RTS

;INITDV: INITIALISES SEVERAL DIRMAN VARIABLES.

;ENTRY:
;ARGB-C PTR TO USERINFO
;ARGD-E PTR TO FILE TITLE

;FUNCTION:-

;DRUSIN => PTR TO USERINFO
;MCNUMB => MACHINE NO OF CALLER
;NAMPTR => PTR TO FILE TITLE
;DRDISC => SELECTED DISC NUMBER
;DIRACC => IF CHAR[0] OF FILE TITLE = ROOT
; THEN IF SYST PRIVILEGED
; THEN OWNER ACCESS
; ELSE ANYBODY ACCESS
; FI
; ELIF CHAR[0] OF FILE TITLE = "^"
; THEN ACCESS OF PARENT DIRECTORY
; ELIF CHAR[0] OF FILE TITLE = "&"
; THEN OWNDER ACCESS
; ELIF CHAR[0] OF FILE TITLE = "%"
; THEN CURRENT ACCESS TO LIBRARY DIRECTORY
; ELSE ACCESS TO CURRENTLY SELECTED DIR
; FI ! TYPDIR

;DIRSIN => IF DISC NAME PRESENT
; THEN SIN OF ROOT DIRECTORY ON NAMED DISC
; ELIF CHAR[0] OF FILE TITLE = ROOT
; THEN SIN OF ROOT DIRECTORY
; ELIF CHAR[0] OF FILE TITLE = "^"
; THEN SIN OF PARENT DIRECTORY
; ELIF CHAR[0] OF FILE TITLE = "&"
; THEN SIN OF UFD
; ELIF CHAR[0] OF FILE TITLE = "%"
; THEN SIN OF LIBRARY
; ELSE SIN OF CURRENTLY SELECTED DIR
; FI
;TDATE  => IF ROOT DIR IMPLIED
; THEN DATE ROOT DIR CREATED (SEE MAPTB)
; FI
;DIRSTT := 0 START BLK NO

;EXIT: A = RC

INITDV ROUT
 LDYIM ARGB
 LDAIY ARGPTR
 STA DRUSIN
 INY
 LDAIY ARGPTR
 STA DRUSIN+1 ;DRUSIN:=PTR TO USER INFO

 INY
 LDAIY ARGPTR
 STA NAMPTR
 INY
 LDAIY ARGPTR
 STA NAMPTR+1 ;NAMPTR := PTR TO FILE TITLE

 LDYIM UTMCNO
 LDAIY DRUSIN
 STA MCNUMB
 INY
 LDAIY DRUSIN
 STA MCNUMB+1
 INY
 LDAIY DRUSIN ;**25/12/86**
 STA MCNUMB+2 ;MCNUMB := MACHINE NO OF CALLER

;PRECEEDED BY A DISC NAME?

 LDYIM 0
 LDAIY NAMPTR
 CMPIM DISCIN ;DISC NAME PRESENT??
 BEQ #00
 JMP #60

00 LDXIM DNAMLN ;X:=MAX LENGTH OF DISC NAME
 LDAIM :LSB:DRDSNM
 STA MOVTO
 LDAIM :MSB:DRDSNM
 STA MOVTO+1 ;MOVTO:=PTR TO DRDSNM BUFFER

 INC NAMPTR
 BNE #05
 INC NAMPTR+1 ;NAMPTR+:=1

05 LDAIY NAMPTR
10 STAIY MOVTO ;COPY DISC NAME INTO DRDSNM
 CMPIM TERMIN ;TERMINATOR?
 BEQ #40
 CMPIM SEPART ;SEPARATOR?
 BNE #20
 LDAIM TERMIN
 STAIY MOVTO ;TERMINATE DISC NAME
 INY
 LDAIY NAMPTR ;**20/5/87** disc name, must prohibit "^","&", "%"
 CMPIM "^" ;**20/5/87** as these have a disc name implied
 [ Pseudods = Yes
 BEQ #15
 CMPIM "&"
 BEQ #15
 CMPIM "%"
 ]
 BNE #40
15 INY
 LDAIY NAMPTR ;**20/5/87** check single char names only
 DEY
 CMPIM TERMIN
 BEQ #22
 CMPIM SEPART
 BEQ #22
 BRA #40

20 INY
 LDAIY NAMPTR
 DEX
 BNE #10
 LDAIM TERMIN
 STAIY MOVTO ;TERMINATE DISC NAME
 LDAIY NAMPTR
 CMPIM TERMIN
 BEQ #40
 CMPIM SEPART
 BEQ #30
22 LDAIM DRERRA ;BAD FILE TITLE
25 RTS

30 INY
40 CLC
 TYA
 ADC NAMPTR
 STA NAMPTR
 BCC #50
 INC NAMPTR+1 ;NAMPTR:=PTR TO FILE TITLE

;GET DISC NUMBER OF NAMED DISC

50 LDAIM &A
 JSR SETRTN
 INY
 LDAIM :LSB:DRDSNM
 STAIY NEWARG
 INY
 LDAIM :MSB:DRDSNM
 STAIY NEWARG ;PTR TO DISC NAME
 JSR MAPMAN ;MAPMAN.DISCNAME->DISCNUMB
 BNE #25
 LDYIM ARGB
 LDAIY NEWARG
 STA DRDISC
 INY
 LDAIY NEWARG
 STA DRDISC+1
 BRA #65

;WAS ROOT DIR SPECIFIED

60 JSR TSROOT ;IS ROOT DIR SPECIFIED?
 BNE #75
 LDYIM UTDISC
 LDAIY DRUSIN
 STA DRDISC
 INY
 LDAIY DRUSIN
 STA DRDISC+1 ;DRDISC:=SELECTED DISC NUMBER
65 LDAIM ANYBDY+TYPDIR
 STA DIRACC ;DIRACC:=ANYBDY!TYPDIR
 LDYIM UTPRIV
 LDAIY DRUSIN
 ANDIM SYSTPV
 BEQ #70
 LDAIM OWNER+TYPDIR
 STA DIRACC ;DIRACC:=OWNER!TYPDIR

;GET SIN OF ROOT ON SELECTED DISC

70 LDAIM 4 ;(SIN OF ROOT)
 JSR SETDSA ;PLACE DISC NO ON NEWARG STACK
 JSR MAPMAN ;CALL MAPMAN.SINOFROOT
 BNE #84
 LDYIM ARGB
 LDAIY NEWARG
 STA DIRSIN
 INY
 LDAIY NEWARG
 STA DIRSIN+1
 INY
 LDAIY NEWARG
 STA DIRSIN+2 ;DIRSIN:=SIN OF ROOT
 INY
 LDAIY NEWARG
 STA TDATE ;TDATE:=DATE OF ROOT
 INY
 LDAIY NEWARG
 STA TDATE+1
 BRA #82

;LOOK UP ACCESS, DISC NUMBER, & SIN OF SELECTED DIR

 [ Pseudods = Yes
72 LDA UMHUFD ;**20/5/87** "&", get ufd
 BRA #78

74 LDA UMHLIB ;**20/5/87** "%", get lib
 BRA #78
 ]
  
75 INY ;**20/5/87** check pseudo-directory names
 LDAIY NAMPTR ;**20/5/87** single char only
 CMPIM SEPART
 BEQ #76
 CMPIM TERMIN
 BNE #77
76 DEY
 LDAIY NAMPTR
 CMPIM "^" ;**20/5/87** parent directory
 BEQ #85
 [ Pseudods = Yes
 CMPIM "&" ;**20/5/87** ufd
 BEQ #72
 CMPIM "%" ;**20/5/87** lib
 BEQ #74
 ]
77 LDYIM UTHSLD ;OFFSET OF HANDLE FOR SELECTED DIR
 LDAIY DRUSIN ;A:=HANDLE FOR SELECTED DIR
78 JSR FNDHND ;FIND HANDLE IN HANDTB
 BNE #84

 LDYIM HTACC ;check that its a dir
 LDAIY HNDPTR
 ANDIM TYPDIR
 BNE #80
 LDAIM DRERRD ;OBJECT NOT A DIR
 RTS

80 CLC
 LDA HNDPTR ;HNDPTR SETUP BY FNDHND
 ADCIM HTACC
 STA MOVFRM
 LDA HNDPTR+1
 ADCIM 0
 STA MOVFRM+1
 LDAIM :LSB:DIRACC
 STA MOVTO
 LDAIM :MSB:DIRACC
 STA MOVTO+1
 LDXIM 6 ;DIRACC,DRDISC,DIRSIN
 JSR MOVE ;COPY INFO FROM HANDTB INTO DIRMAN VARIABLES

82 LDAIM 0
 STA DIRSTT
 STA DIRSTT+1 ;DIRSTT:=0
84 RTS

85 JSR #77 ;**20/5/87** initialise to current directory

;v1.23
 LDYIM &19
 LDAIY DRUSIN
 
;v1.31
; LDYIM HTDISC ;**1/6/88** "^" for parent directory
; LDAIY HNDPTR ;**1/6/88** get current disc
 STA DRDISC
 INY
; LDAIY HNDPTR
 LDAIY DRUSIN
 STA DRDISC+1
 JSR RETPAR ;**20/5/87** retrieve parent
 BNE #84
 JSR UNLOCK
 BRA #82

LDDR ROUT
 LDAIM 5
 JSR SETRTN
 JSR SETDIR
 JSR MAPMAN ;MAPMAN.SIZEINFO
 BNE #10
 LDYIM ARGB
 LDAIY NEWARG
 STA DIRSZE
 INY
 LDAIY NEWARG
 STA DIRSZE+1 ;DIRSZE:=SIZE OF DIR IN BYTE
 INY
 LDAIY NEWARG
 STA DIRSZE+2
 INY
 LDAIY NEWARG
 STA DIRBKS
 INY
 LDAIY NEWARG
 STA DIRBKS+1 ;DIRBKS:=NO OF BLOCKS USED BY DIR
 STZ DIRSTT
 STZ DIRSTT+1 ;DIRSTT:=0(START ADDR IN DIR)
 JSR SETDIR
 LDAIM 1
 JSR SETRTN ;STRMAN.DISC ADDR TO STORE ADDR
 JSR STRMAN
 BNE #10
 LDYIM ARGB
 LDAIY NEWARG
 STA DIRSTA
 STA DPTRLD
 INY
 LDAIY NEWARG
 STA DIRSTA+1
 STA DPTRLD+1 ;DPTRLD:=PTR TO 1ST BYTE OF DIR
 LDAIM 0 ;RC:=0
10 RTS

; Load directory.  It will be locked if return code is zero, unlocked if not.

LOADDR ROUT
 JSR LDDR ;TRY AND LOAD THE DIR
 BNE #20

;SEE IF LEADING AND TRAILING SEQUENCE NUMBERS MATCH
;IN THE PROCESS SETUP DPTRTR (PTR TO LAST BYTE OF DIR)

 LDYIM DRSQNO
 LDAIY DPTRLD
 TAX  ;X:=LEADING SQ. NO.
 SEC
 LDA DPTRLD
 SBCIM 1
 STA DPTRTR
 LDA DPTRLD+1
 SBCIM 0
 STA DPTRTR+1 ;DPTRTR:=DPTRLD-1
 CLC
 LDA DPTRTR
 ADC DIRSZE
 STA DPTRTR
 LDA DPTRTR+1
 ADC DIRSZE+1
 STA DPTRTR+1 ;DPTRTR:=PTR TO LAST BYTE OF DIR
 TXA
 LDYIM 0
 CMPIY DPTRTR ;A:=TRAILING SQ. NO.
 BEQ #10
 LDAIM DRERRB ;BROKEN DIR
 JMP UNLOCK ;Unlock and return **25/12/86**

10 LDYIM ARGA
 LDAIY NEWARG ;RC
20 RTS

SETDIR LDAIM :LSB:DRDISC ;MOVE DISC NO->DIRBKS ONTO NEWARG STACK
 STA MOVFRM
 LDAIM :MSB:DRDISC
 STA MOVFRM+1
 CLC
 LDA NEWARG
 ADCIM ARGB
 STA MOVTO
 LDA NEWARG+1
 ADCIM 0
 STA MOVTO+1
 LDXIM 9
 JMP MOVE

STAARG LDA DIRSTA ;MOVE DIRSTA ONTO ARG STACK FOR STRMAN
 LDYIM ARGB
 STAIY NEWARG
 STA GENPTR ;SETUP GENPTR FOR MRKDRT RTN
 LDA DIRSTA+1
 INY
 STAIY NEWARG
 STA GENPTR+1
 RTS

UNLOCK ROUT
 PHA
 LDAIM 3 ;CALL STRMAN.UNLOCK
 JSR SETRTN
 JSR STAARG
 JSR STRMAN
 BEQ #10
 JSR INTERR
10 PLA
 RTS

ENSRIT LDAIM 2 ;CALL STRMAN.ENSURE FOR DIR
 JSR SETRTN
 JSR STAARG
 JSR MRKDRT
 LDYIM ARGD
 LDAIM UNLKIT
 STAIY NEWARG ;ENSURE AND UNLOCK THE OBJECT

;NOW INC SEQ. NOS.

 LDYIM DRSQNO
 LDAIY DPTRLD
 INCA ;A:=NEW SQ NO
 STAIY DPTRLD ;1ST SQ NO
 STAI DPTRTR ;LST SQ NO

 JMP STRMAN

 LNK UADE0DA

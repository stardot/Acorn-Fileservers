 OPT 1 ; > <FileStoreMOSSource>.NET01
 TTL Receive routines. NET01

;RECEIVE ROUTINES
;THIS IS THE CODE NEEDED TO RECEIVE AN ECONET MESSAGE
;A SCOUT MESSAGE IS RECEIVED
;IF THIS IS CORRECT AN ACKNOWLEDGE IS TRANSMITED
;A DATA PACKET IS AWAITED
;THE DATA PACKET IS LOADED INTO MEMORY
;THE DATA PACKET IS ACKNOWLEDGED.
;
; ****** NEVER fall through here ************
;

 
REC
 STZ TXCLR1
 STZ NSTATE
 LDAIM AP
 BIT SReg2  ;CHECK FOR ADDRESS PRESENT
 BEQ RXSERR ;AP EXPECTED
 LDA RXBYTE
 CMP STNID ;TEST DESTLO FOR STATION MATCH
 BEQ TESTHI
 CMPIM BDCAST  ;TEST DESTLO FOR BRCAST MATCH
 BNE FRDISC
 LDAIM BCAST
 STA NSTATE ;FLAG BROADCAST MESSAGE

TESTHI
 LDAIM :LSB: RXDEHI
 [ FAST1 <> TRUE
 LDYIM :MSB: RXDEHI
 JMP WRXINT
 |
 JMP WRXNTF ; New fast code !
 ]
 
RXDEHI
 BIT SReg2
 BPL RXSERR ;RXDA EXPECTED N.B IN 2BYTE MODE
 LDA RXBYTE
 BEQ FORUSB ;NET NUMBER MUST BE ZERO
 CMPIM BDCAST ;TEST DESTHI FOR NETWORK BROADCAST
 BEQ FORUS

FRDISC ;FRAME DISCONTINUE
 LDAIM &A2  ;+TXRS -RXRS +FRDSC -TDSR -RDSR -TIE +RIE CR2
 STA CReg1
 JMP NOUPD3 ;WAIT FOR ANOTHER RXINT

FORUS ; BROADCAST FOR US
 LDAIM BCAST
 STA NSTATE ;FLAG BROADCAST MESSAGE

FORUSB ;NOT BROADCAST FOR US
 STZ RXYOFF
 LDAIM :LSB: RXBRAN

 [ FAST2 <> TRUE
 LDYIM :MSB: RXBRAN
 JMP WRXINT
 |
 JMP WRXNTF ; New fast code !
 ]

RXBRAN
 BRA RXHEAD
 
;RESET RECEIVER FOR MORE PACKETS
RXSERR
 LDA SReg2
 ANDIM &81
 BEQ NORST
 JSR PCRINIT
 JSR CPINIT ;REINIT THE CHIP
 JMP NOUPD3
NORST
 JMP NOUPD2 ;RESET CHIP AND WAIT FOR ANOTHER RXINIT

;THIS LOOP BUFFERS THE SCOUT PACKET IN THE SCOUT BUFFER
RXHEAD       ;RECEIVE PACKET: CNTRL,PORT,2DEST
 LDY RXYOFF ;LOAD COUNT
 LDA SReg2
RXHED2
 BPL RXSERR ;RXDA EXPECTED N.B. IN 2 BYTE MODE.SCOUT IS EVEN
 LDA RXBYTE
 STAAY SCOUTB
 INY
 LDA SReg2
 BMI PASS3 ;2BYTES STILL AVAILABLE
 BNE SBUFEN ;END OF SCOUT PACKET E.G. FV CONDITION
PASS3
 LDA RXBYTE
 STAAY SCOUTB
 INY ;INCREMENT COUNT
 CPYIM SBSIZE ;TEST COUNT
 BEQ SBUFEN
 STY RXYOFF ;STORE COUNT
 LDA SReg2
 BNE RXHED2
 JMP WRXIN2 ;WE HAVE ALREADY STORED JUMP VECTOR


;CLAIM LINE WITH FLAGS
SBUFEN
 LDAIM &C
 BIT NSTATE
 BVS SBUFN1
 
 STZ CReg1  ;-TXRST -RXRST -RXDISC -TDSR -RDSR -TIE -RIE SCR2
 LDAIM &84  ;+RTS -CTXST -CRXST -TXLAST TDRA FLAG 1-BYT -PSE
SBUFN1 
 STA CReg2 ;SWITCH TO 1-BYTE MODE PAD WITH FLAGS

;CHECK FOR OK CRC
 LDAIM FV
 BIT SReg2
 BEQ RXSERR ;BAD CRC

;CHECK FOR UNREAD DATA BYTE
 BPL RXSERR ;NOT ONE MORE EXTRA BYTE
 LDA RXBYTE
 STAAY SCOUTB ;STORE LAST BYTE OF SCOUT BUFFER
 LDAIM &44  ;-TXRST +RXRST -RXDISC -TDSR -RDSR +TIE -RIE SCR2
 STA CReg1

;CHECK FOR IMMEDIATE OPERATION
 LDA SBPORT
 BNE NOIMED
 JMP RXIMED ;PROCESS IMMEDIATE OPERATION

NOIMED
;FIND A MATCHING RXCBLOCK
 LDAIM :LSB: RXCB
 LDYIM :MSB: RXCB
 CLD
 STA RXCBPT
 STY RXCBPT + ONE ;LOAD UP TO POINT TO NFS CONTROL BLOCKS

FINDLP
 LDYIM ZERO
 LDAIY RXCBPT
 BEQ RXSCER ;TERMINATOR FOUND IN USER CBLOCKS
 CMPIM RXRDY ;VALID RECEIVE CONTROL BYTE
 BNE NOMACH
 INY  ;INCREMENT TO PORT
 LDAIY RXCBPT
 BEQ PMATCH ;WILDCARD ZERO PORT ID
 CMP SBPORT
 BNE NOMACH ;NO PORT MATCH
PMATCH
 INY ;INCR TO STATION LO
 LDAIY RXCBPT
 BEQ MATCHl ; ****** Bruce 27/2/86 ******* SLOMAT ;WILDCARD ZERO STATION ID
 CMP SBSRLO
 BNE NOMACH ;NO STATION LO MATCH
SLOMAT
 INY
 LDAIY RXCBPT
 BEQ MATCHl
 CMP SBSRHI
 BEQ MATCHl ;NO STATION HI MATCH
NOMACH ; Get past pointer locations
 LDA RXCBPT
 CLC
 ADCIM &0C ;POINT TO NEXT RXCB
 STA RXCBPT
 BCC FINDLP ;RXCB SPACE EXHAUSTED AND NO MATCH
 INC RXCBPT+1
 BRA FINDLP

RXSCER  ;ERROR IN SCOUT PACKET
 BRA RXDERR

MATCHl
 JSR ADCALC
 BIT NSTATE ; Check for broadcast RX
 BVC ACKSCO ; If not then as normal
 JMP BRDRX ; Recieve a broadcast

;ACKNOWLEDGE SCOUT PACKET N.B. DONT HAVE TO CLAIM
ACKSCO
 LDAIM :LSB: NOACK
 LDYIM :MSB: NOACK
 JMP TXACK

NOACK
 LDAIM &82  ;+TXRST -RXRST -RXDISC -TDSR -RDSR -RDSR -TIE +RIE SCR2
 STA CReg1

 LDAIM :LSB: RXDAST
 [ FAST3 <> TRUE
 LDYIM :MSB: RXDAST
 JMP WRXINT
 |
 JMP WRXNTF ; New fast code !
 ]

;RECEIVE DATA PACKET
RXDAST
 LDAIM AP
 BIT SReg2  ;CHECK FOR ADDRESS PRESENT
 BEQ RXDERR ;ADDR PRESENT EXPECTED
 LDA RXBYTE
 CMP STNID ;TEST DESTLO FOR STATION MATCH
 BNE RXDERR ;DATA PACKET NOT FOR US. DISC PACKET
;TSTHI
 LDAIM :LSB: WSOUR
 [ FAST4 <> TRUE
 LDYIM :MSB: WSOUR
 JMP WRXINT ;WAIT FOR 2BYTES OF DATA
 |
 JMP WRXNTF ; New fast code !
 ]

WSOUR
 BIT SReg2
 BPL RXDERR ;RXDA EXPECTED N.B IN 2BYTE MODE
 LDA RXBYTE ;NET NUMBER MUST BE ZERO
 BNE RXDERR ;DATA PACKET NOT FOR US
 BIT SReg1 ;QUICK IRQ POLL
 BMI WDEST

 LDAIM :LSB: WDEST
 [ FAST4 = TRUE
 LDYIM :MSB: WDEST
 JMP WRXINT   ;WAIT SCOUTACK PACKET
 |
 JMP WRXNTF ; New fast code !
 ]

WDEST
 BIT SReg2
 BPL RXDERR ;RXDA EXPECTED
 LDA RXBYTE ;READ 2 DEST BYTES
 LDA RXBYTE ;CHECK AGAINST SCOUT BUFF IF SECURITY NEEDED
 BRA RXINF
 
;RECEIVE DATA PACKET ERROR
RXDERR
;RESET RECEIVER FOR MORE PACKETS
 LDA NSTATE
 BPL NLACK ;BRANCH IF NO LONG ACK
 JMP TXBER1 ;REPORT TRANSMIT ERROR
NLACK
 JSR CPINIT ;FLUSH OUT ANY REMAINING BYTES
 JMP NOUPD2


RXINF
 LDAIM :MSB: AGAIN
 STA TXJUMP+2
 LDAIM :LSB: AGAIN
 STA TXJUMP+1 
 BIT SReg1 ;QUICK IRQ POLL
 BPL OUTL

AGAIN
 LDY RXYOFF ;LOAD COUNT
 LDA SReg2

AGAIN4
 BPL RXEND ;RDA EXPECTED N.B IN 2-BYTE MODE
 LDA RXBYTE
 STAIY RXDAPT
 INY
 BNE PASS
 INC RXDAPT + ONE
 DEC RXPAGE
 BEQ RXDERR ;ERROR BUFFER FULL BUT ONE MORE BYTE
PASS
 LDA SReg2
 BMI PASS8
 BNE RXEND
PASS8
 LDA RXBYTE
 STAIY RXDAPT
 INY
 STY RXYOFF
 BNE OUTK

UPCONT
 INC RXDAPT + ONE
 DEC RXPAGE
 BEQ RXEND ;IS THIS AN ERROR?
OUTK
 LDA SReg2 ;QUICK IRQ POLL
 BNE AGAIN4
OUTL
 JMP WRXIN2

;CHECK UNREAD DATA BYTE,CRC ETC.
RXEND
 STZ CReg1  ;-TXRS -RXRS -FDISC -TDSR -RDSR -TIE -RIE SCR2
 LDAIM &84  ;+RTS -CTXST -CRXST -TLAST TDRA FLAG 1BYTE -PSE
 STA CReg2  ;SWITCH TO 1-BYTE FOR LATER 1 BYTE TEST
 STY RXYOFF
 LDAIM FV ;CHECK CRC
 BIT SReg2
 BEQ RXDERR ;PACKET CRC BAD

 BPL NOBYT ;CHECK UNREAD BYTE
 LDA RXPAGE
 BEQ RXDERR ;FRAME TOO LONG, NOW BEING BRANCHED THROUGH
 LDA RXBYTE ;READ EXTRA BYTE
 LDY RXYOFF
 STAIY RXDAPT
 INC RXYOFF ;UPDATE POINTERS
 BNE NOBYT
 INC RXDAPT + ONE
NOBYT
 LDA NSTATE ;CHECK FOR LONG ACK PACKET
 BPL TXAK
 JMP UPTXCB ;UPDATE TXCBLOCK

TXAK
;ACKNOWLEDGE DATA PACKET
 LDAIM :LSB: UPDATE
 LDYIM :MSB: UPDATE

;TRANSMIT AN ACKNOWLEDGEMENT PACKET
TXACK
 STA TXLINK
 STY TXLINK + ONE  ;SAVE SUBROUTINE LINKAGE

 LDAIM &44  ;-TXRST +RXRST -RXDISC -TDSR -RDSR -RDSR +TIE -RIE SCR2
 STA CReg1
 LDAIM &A7  ;+RTS -CTXST +CRXST -TLAST TDRA MARK 2-BYT +PSE
 STA CReg2

;TX 2BYTES DESTINATION
 LDA SBSRLO
 BIT SReg1
 BVC RXAERR ;TDRA EXPECTED N.B. IN 2 BYTE MODE
 STA TXBYTE ;TRANSMIT SOURCE LO
 LDA SBSRHI
 STA TXBYTE ;TRANSMIT SOURCE HI
 LDA STNID
 BIT SReg1
 BMI TXACK1
 
 LDAIM :LSB: TXACKS
 LDYIM :MSB: TXACKS
 JMP WTXINT ;WAIT FOR TX INTERUPT

TXACKS   ;TX 2BYTES SOURCE
 LDA STNID
 BIT SReg1
TXACK1 
 BVC RXAERR ;TDRA EXPECTED N.B. IN 2-BYTE MODE
 STA TXBYTE
 LDAIM NETnum
 BIT NSTATE
 BMI NOEND
;END PACKET TRANSMISSION
 LDYIM &2F ;-RTS -CTXST +CRXST -TXLST FC FLAG 2-BYT +PSE
 STY CReg2
 STA CReg4
 LDA TXLINK
 LDY TXLINK + ONE
 JMP WTXINT ;WAIT FOR TX INTERUPT FC EVENT AND RETURN TO CALLER
NOEND
 STA RXBYTE
 JMP TXINF ;FOR LONG ACK

;ERROR IN TRANSMITTING AN ACK PACKET
RXAERR
;RESET RECEIVER FOR MORE PACKETS
 JMP RXDERR


;UPDATE RECEIVE CONTROL BLOCK
UPDATE
 LDA SBPORT
 BNE NOTTUB ;DONT UPDATE RXCB IF IMMED OPERATION
 LDY SBCNTL
 CPYIM IPOKE
 BEQ NOTTUB
 JMP ENDIM

NOTTUB
 LDA RXYOFF
 CLC  ;CALC BUFFER END
 ADC RXDAPT
 BCC NOPGE
 INC RXDAPT + ONE

NOPGE
 LDYIM CBEALO
 STAIY RXCBPT ;UPDATE BUFFER END LO
 INY
 LDA RXDAPT + ONE ;UPDATE BUFFER END HI
 STAIY RXCBPT
 
CBUUPD
 LDA SBPORT
 BEQ NOUPD2 ;IM PEEK OPERATION CHECK
 LDA SBSRHI ;UPDATE SOURCE HI
 LDYIM CBSRHI
 STAIY RXCBPT
 DEY

 LDA SBSRLO ;UPDATE SOURCE LO
 STAIY RXCBPT
 DEY

 LDA SBPORT ;UPDATE PORT
 STAIY RXCBPT
 DEY

 LDA SBCNTL ;UPDATE CONTROL BYTE
 ORAIM &80 ;SET TOP BIT
 STAIY RXCBPT

NOUPD2
 JSR CPRST
NOUPD3
 LDA RTCFS
 STA STNID
 LDAIM &80         ; set top bit of TX clear
 STA TXCLR1        ; user clear to transmit
 LDAIM :LSB:REC
 LDYIM :MSB:REC
 JMP WRXINT

BRDRX ; The new broadcast reception
 PHX
 LDXIM CBSALO
 LDY RXYOFF

IOBRC1
 LDAAX SCOUTB
 STAIY RXDAPT
 INY
 BNE IOBRC2
 INC RXDAPT + ONE
 DEC RXPAGE
 BEQ BRCER1 ; Remember to pull X first
IOBRC2
 INX
 STY RXYOFF
 CPXIM CBSALO + EIGHT
 BNE IOBRC1
BRDCT1
 PLX
 BRA NOTTUB
BRCER1
 INC RXYOFF
 CPXIM &B
 BEQ BRDCT1
 PLX
IMERR
 JMP RXDERR

;PROCESS IMMEDIATE OPERATION
RXIMED
 LDY SBCNTL
 CPYIM IPEEK
 BCC IMERR
 CPYIM IMACH + ONE
 BCS IMERR ;RANGE CHECK
 CPYIM ISTRT
 BCS PRIVST ;NO PROTECTION FOR LAST TWO IM OPS

 TYA
 CLD
 SEC
 SBCIM IPEEK
 TAY
 LDA IMASK
FINDIM
 RORA
 DEY
 BPL FINDIM
 BCS NOUPD2 ;PROTECTED FROM IM OPERATION

PRIVST
 PHX
 LDA SBCNTL
 CLC
 ROLA
 TAX
 JMIX (JMPIML-2)

JMPIML  ;IMMED OP JUMP TABLE
 & RXPEEK
 & RXPOKE
 & RXRTN
 & RXPROE
 & RXPROH
 & RXSTOP
 & RXSTRT
 & RXMACH
 
RXRTN
RXPROE
RXPROH
 LDAIM PROBUF
 STA RXYOFF
 LDAIM ONE
 STA RXPAGE
 LDAIM :MSB: DYNVC1 ;POINT TO DYNAMIC WORKSPACE
 STA RXDAPT
 LDAIM :LSB: DYNVC1 + 1
 STA RXDAPT + 1
 LDYIM 1 ;LOAD COUNTER
MORSTR
 LDAAY SBADT1
 STAAY IRQSTR + ONE
 DEY
 BPL MORSTR ;SAVE SCOUT BUFF VARIABLES COS IRQ IS VERY VERY SLOW
 PLX
 JMP ACKSCO

RXPOKE
 LDAIM :LSB: SCOUTB
 STA RXCBPT
 LDAIM :MSB: SCOUTB ;MAKE RXCBPT POINT TO SCOUT BUFFER
 STA RXCBPT + ONE
 PLX
 JMP MATCHl
RXMACH
 LDAIM ONE ;ONE PAGE
 STA RXPAGE
 LDAIM &100 - MSIZE ;POINT TO MACHINE PEEK AREA (&FC)
 STA RXYOFF
 LDAIM :LSB: (MCPEEK + MSIZE - &100)
 STA RXDAPT
 LDAIM :MSB: (MCPEEK + MSIZE - &100)
 STA RXDAPT + ONE
 BRA SENDIT


RXPEEK
;CALCULATE RXDAPT RXYOFF RXPAGE 
 LDAIM :LSB: SCOUTB ;MAKE RXCBPT POINT TO SCOUT BUFFER
 STA RXCBPT
 LDAIM :MSB: SCOUTB
 STA RXCBPT + ONE
 JSR ADCALC

SENDIT
 LDAIM &80
 TSB NSTATE ;SET LONG ACK FLAG

RXSTOP
RXSTRT
 PLX
 LDAIM &44  ;-TXRST +RXRST -FDISC -TDSR -RDSR +TIE -RIE SCR2
 STA CReg1
 LDAIM &A7  ;+RTS -CTXST +CRXST -TXLD TDRA FLAG 2BYT +PSE
 STA CReg2  ;ENABLE TRANSMIT
 LDAIM :LSB: CIRQ
 LDYIM :MSB: CIRQ
 JMP TXACK

ENDIM
;RESTORE RXDAPT TO POINT TO PROCEDURE BUFFER

 LDA RXYOFF ;CALC PARAMETER SIZE
 CLC
 ADCIM &100 -PROBUF +&02 ;TWO ALLOWS FOR STATION NUMBER

 STA IRQSTR + THREE
 LDA SCOUTB
 STA IRQSTR + FOUR
 LDA SBSRHI
 STA IRQSTR + FIVE ; STORE CALLING STATION NUMBER

;CAUSE IRQ
CIRQ
 LDA SBCNTL ; ZERO FOR IMMEDIATE OPERATIONS
 CLC
 ROLA
 STA IRQSTR ;SAVE SCOUT BUF VARIABLES COS IRQ SLOW
 LDAIM &C0
 STA VIA +&E ;ENABLE SHIFT INT,IER REG
 TRB VIA +&B ;SHIFT CONTROL BY SYSTEM CLOCK,ACR REG
 LDAIM &14
 STA VIA +&4 ; T1CL REG
EXITIM
 STZ VIA +&5 ; T1HI REG
 JMP NOUPD2 ;GOBACK TO NORMAL RECEIVE MODE
 
JMPI2L ;IMMED OP LO BYTE JUMP TABLE
 & RXRTN2
 & RXPRE2
 & RXPRH2
 & RXSTP2
 & RXSTR2

RXRTN2
 JMI IRQSTR + ONE ;NON TUBE TYPE ROUTINE CALL

RXPRE2
RXPRH2
 RTS

RXSTP2 ROUT
 LDAIM STOP
 TSB SSTATE ;FLAG PROCESSOR IS STOPPED
 BNE #20
 CLI ;ENABLE INTERUPT
10
 BIT SSTATE
 BNE #10 ;LOOP UNTIL BIT RESET
20
 RTS
 
RXSTR2
 LDAIM STOP
 TRB SSTATE ;CLEAR STOPPED STATE
 RTS 
 

 LNK NET02

; ********

 [ :MSB: RXDEHI <> :MSB: REC
 [ FAST1 = TRUE
 PAGE ERROR :MSB: RXDEHI <> :MSB: REC ; FAST1 => FALSE
 ]
 |
 [ FAST1 <> TRUE
 PAGE OK :MSB: RXDEHI = :MSB: REC ; FAST1 => TRUE
 ]
 ]

; ********

 [ :MSB: RXHEAD <> :MSB: RXDEHI
 [ FAST2 = TRUE
 PAGE ERROR :MSB: RXHEAD <> :MSB: RXDEHI ; FAST2 => FALSE
 ]
 |
 [ FAST2 <> TRUE
 PAGE OK :MSB: RXHEAD = :MSB: RXDEHI ; FAST2 => TRUE
 ]
 ]

; ********

 [ :MSB: RXDAST <> :MSB: NOACK
 [ FAST3 = TRUE
 PAGE ERROR :MSB: RXDAST <> :MSB: NOACK ; FAST3 => FALSE
 ]
 |
 [ FAST3 <> TRUE
 PAGE OK :MSB: RXDAST = :MSB: NOACK ; FAST3 => TRUE
 ]
 ]
 
; ********

 [ :MSB: WSOUR <> :MSB: RXDAST
 [ FAST4 = TRUE
 PAGE ERROR :MSB: WSOUR <> :MSB: RXDAST ; FAST4 => FALSE
 ]
 |
 [ FAST4 <> TRUE
 PAGE OK :MSB: WSOUR = :MSB: RXDAST ; FAST4 => TRUE
 ]
 ]

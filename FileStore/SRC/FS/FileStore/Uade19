 OPT UADE19 ;File > Uade19
 TTL File server file UADE19


;**********
;* GETBYT *
;**********

;Read single byte from file.
;All work done by RNDMAN.

;Entry: BPTR is offset of buffer in RXBUF
;QPTR is offset of control block in RXCBV

GETBYT ROUT
 JSR STKUSE ;Put user info ptr on stack
 BNE #10

 JSR #30

 LDAIM 7 ;RNDMAN.RDCH
 JSR SETRTN
 JSR RNDMAN ;*** Call RNDMAN.RDCH **
 BNE #20 ;Failed

 LDYIM ARGB
 LDAIY NEWARG ;Get byte read
 STA MIDTX ;Put in TX buffer

 INY
 LDAIY NEWARG ;Get EOF flag
 STA MIDTX+1 ;Put in TX buffer
 LDAIM TXHDR+2 ;Message length

;Note that sequence no. is still in control block

 JSR REPLYC ;Send reply

10 JMP COMRTS ;exit

20 JMP ERROR

30 LDX BPTR
 LDAAX RXBUF+2 ;Get file handle
 LDYIM ARGD
 STAIY NEWARG

 LDX QPTR ;Get seq no. from control block
 LDAAX RXCBV
 ANDIM 1 ;Mask out reception flag
 INY
 STAIY NEWARG
 RTS


;**********
;* PUTBYT *
;**********

;Write single byte to file.
;All work done by RNDMAN.

;Entry: BPTR is offset of buffer in RXBUF
;QPTR is offset of control block in RXCBV

PUTBYT
 JSR STKUSE ;Put user info ptr on stack
 BNE #10

 JSR #30

 LDX BPTR
 LDAAX RXBUF+3 ;Get byte to be written
 INY
 STAIY NEWARG ;Put on call stack

 LDAIM 8 ;RNDMAN.WRCH
 JSR SETRTN
 JSR RNDMAN ;*** Call RNDMAN.WRCH **

;Note that sequence no. is still in control block

 JSR RCODE ;Send return code
 BRA #10 ;Exit


;* CPRDAR *

;Read specified part of file info

;Most work done in RNDMAN.

CPRDAR ROUT
 JSR GETUSE ;USTPTR := USERTB entry
 BNE #60
 JSR SETUSR ;Copy user info to NEWARG stack
 LDX BPTR ;Offset of request buffer
 LDAAX MIDRX ;Get handle
 LDYIM ARGD
 STAIY NEWARG ;Put handle on NEWARG stack

 LDAIM &B ;RNDMAN.RDAR
 JSR SETRTN
 JSR RNDMAN ;*** Call RNDMAN.RDAR **
 BNE #40 ;Not OK, send error code and exit

;Have now got sequential file ptr, file hwm,
;and file size on NEWARG stack.
;The one to be sent back is determined by
;arg in request block.
;Arg is 0,1,2 resp. to get the above.

;Set Y to appropriate offset on NEWARG stack

 LDX BPTR ;Offset of request buffer
 LDAAX MIDRX+1 ;Arg from request
 BNE #10 ;Not 0

 LDYIM ARGB ;Offset of file ptr
 BRA #50

10 CMPIM 1 ;Test arg
 BNE #20 ;Not 0 or 1

 LDYIM ARGE ;Offset of file HWM
 BRA #50

20 CMPIM 2 ;Test arg
 BNE #30 ;Not 0, 2, or 1

 LDYIM ARGH ;Offset of file size
 BRA #50

;Invalid arg in request

30 LDAIM ARGERR ;"Bad arg to RDAR"
40 JMP ERROR ;Send error and exit

;Y now contains the offset on NEWARG
;of the required 3 bytes.

50 LDAIY NEWARG ;LS byte
 STA MIDTX ;Put in TX buffer
 INY
 LDAIY NEWARG ;CS byte
 STA MIDTX+1
 INY
 LDAIY NEWARG ;MS byte
 STA MIDTX+2
 LDAIM TXHDR+3 ;Mesage length
 JSR REPLYC ;Send reply

60 JMP COMRTS ;Exit



;* CPSTAR *

;Set sequential file pointer

CPSTAR ROUT
 JSR GETUSE ;USTPTR := ptr to user info
 BNE #10 ;error
 JSR SETUSR ;Copy user info to stack
 LDX BPTR ;Offset of request buffer
 LDAAX MIDRX ;Get handle
 LDYIM ARGD
 STAIY NEWARG ;Put handle on stack

;Put arg saying what to set on stack

 LDAAX MIDRX+1
 INY
 STAIY NEWARG

;Put value to be set on stack

 LDAAX MIDRX+2 ;value (LS)
 INY
 STAIY NEWARG
 LDAAX MIDRX+3 ;value (CS)
 INY
 STAIY NEWARG
 LDAAX MIDRX+4 ;value (MS)
 INY
 STAIY NEWARG
 LDAAX MIDRX+5 ;Some vals have 4 bytes
 INY
 STAIY NEWARG

 LDAIM &C ;RNDMAN.STAR
 JSR SETRTN
 JSR RNDMAN ;*** Call RNDMAN.STAR **
 JSR RCODE ;Transmit reply

10 JMP COMRTS ;Exit



;************
;* PUTBYTES *
;************

;Write several bytes to specified file offset.

;1) Set up pointer to user info
;2) (abolished)
;3) Send first reply, giving data port
;and max. blocksize.
;4) LOOP: receive block into big buffer
;5) LOOP: write to disc (RNDMAN.PUTBYTES)
;unless disc error flag set
;6) LOOP: If disc error, then set flag but
;continue to receive.
;7) LOOP: If more to receive, adjust OFFSET
;and loop to 4).
;8) Send final RC (disc error flag)

;Entry: BPTR is offset of buffer in RXBUF
;QPTR is offset of control block in RXCBV

PBYTES ROUT
 JSR GETUSE ;USTPTR := ptr to user info
 BNE #10 ;not logged on ** 6/9/84 **

 JSR RMSUBO ;Prepare for some PUTBYTES calls
 BEQ #15

05 JSR EXTERR ;Not OK, send RC
10 JMP COMRTS ;Exit

;Send first reply, giving data port and max blocksize

15 LDAIM PSAVD ;Use same data port as SAVE
 STA MIDTX

 LDAIM :LSB:BUFSZ ;Big buffer size (2 bytes)
 STA MIDTX+1
 LDAIM :MSB:BUFSZ
 STA MIDTX+2

 STZ RTCODE ;RTCODE := CCODE := 0
 STZ CCODE

 LDAIM TXHDR+3 ;Message length

 JSR REPLY ;Send message
 BNE #10 ;Lost contact - abort

;Ready to receive data, so set up for
;reception loop.

 STZ DATAIN ;DATAIN := 0 (3 bytes)
 STZ DATAIN+1
 STZ DATAIN+2 
 STZ DSCERR ;Clear disc err flag
 STZ FINFLG ;Clear end-of-transfer flag

;Test specially for transfer of zero bytes,
;to prevent 64K net control block being
;set up! Jump straight to final reply.

 LDX BPTR
 LDAAX MIDRX+2 ;Ls byte of size
 ORAAX MIDRX+3 ;CS
 ORAAX MIDRX+4 ;MS
 BNE #20 ;Not zero bytes
 JMP #70 ;Jump straight to final reply

;Loop which receives data and writes it to disc
;Set buffer pointers in RX control block

20 LDY QPTR ;Buffer start = BBUF
 LDA BBUF
 STAAY CBBUF
 LDA BBUF+1
 STAAY CBBUF+1

 LDA BBEND ;Buffer end = BBEND
 STAAY CBBUFE
 LDA BBEND+1
 STAAY CBBUFE+1

 LDAIM PSAVD ;Set data port
 STAAY CBPORT

;Station already set from first reception

 JSR WAIT ;Wait for reception
 BNE #10 ;No contact => abort

;Now subtract buffer limits to see how
;much data was received.

 LDY QPTR
 SEC  ;COWORK := CBBUFE-CBBUF
 LDAAY CBBUFE
 SBCAY CBBUF
 STA COWORK ;LS byte
 LDAAY CBBUFE+1
 SBCAY CBBUF+1
 STA COWORK+1 ;MS byte

;Add amount received to total number of bytes
;received.

 CLC ;DATAIN +:= COWORK
 LDA COWORK ;LS byte
 ADC DATAIN
 STA DATAIN
 LDA COWORK+1 ;CS byte
 ADC DATAIN+1
 STA DATAIN+1
 BCC #25 ;MS byte of received length always 0
 INC DATAIN+2
25

;Compare total amount received (in DATAIN)
;with total number of bytes to be written.
;(in original message buffer).
;Set FINFLG if exactly the right amount
;has been received.
;If too much has been received, then send
;a return code.

 LDX BPTR
 SEC
 LDAAX MIDRX+2 ;LS byte of size
 SBC DATAIN
 STA BREGA ;Use BREGA as workspace
 LDAAX MIDRX+3 ;CS byte of size
 SBC DATAIN+1
 STA BREGA+1
 LDAAX MIDRX+4 ;MS byte
 SBC DATAIN+2

;Carry set if received <= size

 ORA BREGA ;OR 3 bytes of result
 ORA BREGA+1 ;for zero test
 BEQ #30 ;Equal => last block
 BCS #40 ;Recd < size => carry on

;Client sent too much data.
;Send error code and stop.

 LDAIM PBERRA ;Error code
 JMP #05 ;Send RC and exit

30 LDAIM &FF ;Last block; set FINFLG
 STA FINFLG

;If disc error flag set, ignore received data,
;and jump round disc write.

40 LDA DSCERR ;Disc error flag
 BNE #50 ;Jump if error

;Set up for call of RNDMAN


 LDX BPTR
 LDAAX MIDRX ;Get file handle
 LDYIM ARGD
 STAIY NEWARG ;Put on call stack

 LDA BBUF ;Buffer addr (Big Buffer)
 INY
 STAIY NEWARG
 LDA BBUF+1
 INY
 STAIY NEWARG

 LDA COWORK ;No. of bytes (calculated above)
 INY
 STAIY NEWARG ;LS byte
 LDA COWORK+1
 INY
 STAIY NEWARG ;MS byte

 LDAIM &A ;RNDMAN.PUTBYTES
 JSR SETUSA ;Stack user info

 JSR RNDMAN ;*** RNDMAN.PUTBYTES **
 BEQ #50 ;OK, continue
 STA DSCERR ;Store error code

;If FINFLG is set, then we have just written
;the last block.
;Otherwise, adjust the file offset and carry on.

50 LDA FINFLG ;Finished?
 BNE #70 ;Exit from loop if yes

;Send ack to client's ack port

 LDY BPTR
 LDXAY CPUFD ;Ack port
 LDAIM 1 ;Message length
 JSR REPLYB ;Send byte (random contents)
 BNE #80 ;Contact lost => abort

60 JMP #20 ;Round loop again

;Have received all the data.
;Final RC is in DSCERR.
;If RC is zero, send back amount xferred (always amount requested
;if no error). If non-zero, send error.

70 LDA DSCERR
 STA RTCODE
 BNE #90 ;RC <> 0 => error
 STA CCODE ;Set command code = 0
 STA MIDTX+4 ;send 32 bit number
 LDX BPTR
 LDAAX MIDRX+2
 STA MIDTX+1
 LDAAX MIDRX+3
 STA MIDTX+2
 LDAAX MIDRX+4 ;Move length of data to MIDTX
 STA MIDTX+3
 LDAIM TXHDR+5
 JSR REPLYC ;Send reply (note MIDTX undefined)

80 JMP COMRTS ;Exit from command

90 JSR RCODE ;Send error reply
 BRA #80



;************
;* GETBYTES *
;************

;Read several bytes from specified file offset.

;1) Set up pointer to user info
;2) Save size of transfer.
;SEND first RC to client
;3) LOOP: read chunk into big buffer (RNDMAN.GETBYTES)
;unless disc error flag set
;4) LOOP: If disc error, then set flag but
;continue to send data.
;5) LOOP: send to client
;6) LOOP: If more to send, adjust OFFSET
;and loop to 3).
;7) Send final RC (disc error flag)

;Entry: BPTR is offset of buffer in RXBUF
;QPTR is offset of control block in RXCBV

GBYTES ROUT
 STZ GBBXFD ;GBBXFD := 0
 STZ GBBXFD+1
 STZ GBBXFD+2
 STZ GBEFLG ;GBEFLG := 0

 JSR GETUSE ;USTPTR := ptr to user info
 BNE #10 ;OK, continue ** 6/9/84 **

 JSR RMSUBO ;Set up RNDMAN for GETBYTES calls
 BEQ #15

05 JSR EXTERR ;Not OK, send RC
10 JMP COMRTS ;Exit

15 LDYIM ARGB ;**23/3/88** check mode of access for file
 LDAIY NEWARG
 ANDIM READAC
 BNE #16
 LDAIM RDERRO
 BRA #05

16
 [ 1=0
 LDX BPTR ;**23/3/88** check if GETBYTES or GETPUTBYTES
 LDAAX RXBUF+1
 EORIM 35
 BNE #17
 JSR #99 ;**23/3/88** zero sequence number
 LDAIM &E ;**23/3/88** GETPUTBYTES, prepare put also
 JSR SETUSA
 LDAAX MIDRX+1
 JSR RMSUBP
 BNE #05
 JSR #99 ;**23/3/88** zero sequence number
 BRA #20

17 
 ]
 LDAIM 0
 JSR RCODE ;Send "OK" rc
 BNE #10 ;lost contect so ABORT

;TOSEND := size of transfer

20 LDX BPTR
 LDAAX MIDRX+2 ;Size (LS)
 STA TOSEND
 LDAAX MIDRX+3 ;Size (CS)
 STA TOSEND+1
 LDAAX MIDRX+4 ;Size (MS)
 STA TOSEND+2

;Use the big buffer.
;Read from disc chunks of size BUFSZ, and transmit
;them to the client.
;Note that, in general, each chunk will be badly
;aligned with respect to disc blocks. RNDMAN tries
;to be efficient about this for each chunk.
;It may be worth adding extra optimization here if
;very large (> BUFSZ) transfers are common.

 STZ DSCERR ;No disc error yet
 STZ FINFLG ;Not finished yet

;Test specially for transfer of zero
;bytes to prevent 64K net control
;block being set up!

 LDA TOSEND ;Size (LS)
 ORA TOSEND+1 ;CS
 ORA TOSEND+2 ;MS
 BNE #25 ;OK - not zero bytes
 JMP #70 ;Jump straight to final reply


;Loop, sending data to client in blocks of
;size BUFSZ.  TOSEND is the amount left to
;send, OFFSET the current file position.
;If an error occurs, the error code is put
;in DSCERR and the loop continues, padding
;out the transmission until the right
;amount of data has been sent.
;FINFLG gets set on the last time round
;the loop.

25 SEC  ;COWORK := TOSEND - BUFSZ
 LDA TOSEND
 SBCIM :LSB:BUFSZ
 STA COWORK
 LDA TOSEND+1
 SBCIM :MSB:BUFSZ
 STA COWORK+1
 LDA TOSEND+2
;; DMB: There is a small fix here
;;
;; The original sources uses
;;   :LSB: (bits 7..0)
;;   :CSB: (bits 15..8)
;;   :MSB: (bits 23..16)
;;
;; The MASM we have only supports:
;;   :LSB: (bits 7..0)
;;   :MSB: (bits 15..8)
;;
;; This was the only original use of MSB
;;
;; SBCIM :MSB:BUFSZ
 SBCIM 0
 STA COWORK+2

 ORA COWORK ;OR 3 bytes for zero test
 ORA COWORK+1
 BEQ #30 ;TOSEND = BUFSZ
 BCS #35 ;TOSEND < BUFSZ

;BUFSZ >= TOSEND: send remaining data
;and set finish flag.

30 LDA TOSEND ;OUTBSZ := TOSEND
 STA OUTBSZ
 LDA TOSEND+1
 STA OUTBSZ+1
 DEC FINFLG ;Set loop finish flag to $FF
 BRA #40

35 LDAIM :LSB:BUFSZ ;OUTBSZ := BUFSZ
 STA OUTBSZ
 LDAIM :MSB:BUFSZ
 STA OUTBSZ+1

;The size of the block to send is in OUTBSZ.
;Call RNDMAN.GETBYTES to get the data into
;the big buffer.

40 LDX BPTR
 LDAAX MIDRX ;Get file handle
 LDXIM 9 ;**23/3/88** RNDMAN.GETBYTES
 JSR RMSUBR

;Add number of bytes actually read to
;GBBXFD, and OR end-of-file flag
;into GBEFLG.

 CLC
 LDYIM ARGB
 LDAIY NEWARG ;Bytes xferred (LS)
 ADC GBBXFD
 STA GBBXFD ;LS total
 INY
 LDAIY NEWARG
 ADC GBBXFD+1
 STA GBBXFD+1 ;CS total
 BCC #60 ;Only 2 bytes from RNDMAN
 INC GBBXFD+2 ;MS total
60 INY
 LDAIY NEWARG ;EOF flag
 TSB GBEFLG ;OR with flag so far

 LDY BPTR
 [ 1=0
 LDAAY RXBUF+1 ;**23/3/88** GETBYTES or GETPUTBYTES
 EORIM 35
 BNE #65
 LDA DSCERR ;**23/3/88** GETPUTBYTES
 BNE #67
 LDAAY MIDRX+1
 LDXIM &A ;**23/3/88** RNDMAN.PUTBYTES
 JSR RMSUBR
 BRA #67
65 
 ]
 LDAAY CPUFD ;Get client's data port
 JSR SENDBB ;Send big block (size in OUTBSZ)
 BNE #90 ;Contact lost with client; give up

;End of loop. Test finish flag, and set
;TOSEND from COWORK.

67 BIT FINFLG ;Test finish flag
 BMI #70 ;Exit from loop if finished

 LDA COWORK ;TOSEND := COWORK
 STA TOSEND
 LDA COWORK+1
 STA TOSEND+1
 LDA COWORK+2
 STA TOSEND+2

 JMP #25 ;Loop return

;Exit from GBLOOP: RC in DSCERR

70 LDA DSCERR
 BNE #80 ;Jump if error

;Send back end-of-file flag and
;count of bytes actually read.

 LDA GBEFLG ;EOF flag
 STA MIDTX ;Put in TX buffer
 LDA GBBXFD ;Bytes xferred (LS)
 STA MIDTX+1
 LDA GBBXFD+1
 STA MIDTX+2 ;CS
 LDA GBBXFD+2
 STA MIDTX+3 ;MS
 STZ MIDTX+4 ;send 32 bit number ** 26/2/85 **
 LDAIM TXHDR+5 ;Message length
 JMP Datout ;Send reply

80 JSR RCODE ;Send return code

90 JMP COMRTS ;Exit from command

 [ 1=0
99 LDYIM RTINUS ;**23/3/88** fudge to keep sequence number
 LDAIY RTEPTR ;**23/3/88** safely at zero as it cannot be
 ANDIM &FE ;**23/3/88** used by GETPUTBYTES
 STAIY RTEPTR
 RTS
 ]

;*** Call RNDMAN to set up bytes operation

RMSUBO ROUT
 LDAIM &E ;**** RNDMAN.SUBO ***
 JSR SETUSA
 LDX BPTR
 LDAAX MIDRX+0 ;Get file handle
RMSUBP INY
 STAIY NEWARG

 LDX QPTR ;Get seq no from control block
 LDAAX RXCBV
 ANDIM 1 ;Get just seq bit
 INY
 STAIY NEWARG

;The flag, no of bytes, and offset
;are in the correct order in rx block

 LDX BPTR
10 LDAAX MIDRX+1
 INY
 STAIY NEWARG
 INX
 CPYIM ARGL
 BNE #10 ;More to copy

 JMP RNDMAN ;**** Call RNDMAN.SUBO & return ***

;Routine to call RNDMAN.GETBYTES or .PUTBYTES.
;Entry: A=Handle; X=RNDMAN code

RMSUBR ROUT
 LDYIM ARGD
 STAIY NEWARG ;Put handle on stack

 LDA BBUF ;Put buffer address on stack
 INY
 STAIY NEWARG
 LDA BBUF+1
 INY
 STAIY NEWARG

 LDA OUTBSZ ;Put no. of bytes on stack
 INY
 STAIY NEWARG
 LDA OUTBSZ+1
 INY
 STAIY NEWARG

 TXA ;RNDMAN function code
 JSR SETUSA

 JSR RNDMAN ;*** Call RNDMAN **
 BEQ #50 ;OK, continue
 STA DSCERR ;Otherwise set error code
50 RTS


;Yet another interface - this one allows an application
;to determine the userid under which it is logged-on

;This is probably most useful for MAILing type progs

CPWHO ROUT ;** 19/3/85 **
 JSR GETUSE
 BNE #20 ;nb this will deal with the error

 LDXIM 0
 LDYIM UTUSID
10 LDAIY USTPTR ;copy the user name
 STAAX MIDTX
 INY
 INX
 CMPIM CR ;copy only upto CR (pw follows - dont want that)
 BNE #10

 TXA
 JMP Datous ;return the answer with zero RC

20 JMP COMRTS

 LNK UADE20
